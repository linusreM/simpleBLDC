
bldc_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e1c  08009e1c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009e1c  08009e1c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e1c  08009e1c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034d4  2000017c  08009fa0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003650  08009fa0  00023650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a054  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005385  00000000  00000000  0004a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  0004f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  00050bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f2d  00000000  00000000  00051fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019602  00000000  00000000  00073efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aedcb  00000000  00000000  0008d4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  0013c348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d5c 	.word	0x08009d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	08009d5c 	.word	0x08009d5c

080001d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_Init+0x28>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_Init+0x28>)
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e0:	2003      	movs	r0, #3
 80001e2:	f001 f976 	bl	80014d2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f008 febc 	bl	8008f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001ec:	f008 fe92 	bl	8008f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40022000 	.word	0x40022000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <HAL_IncTick+0x20>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b06      	ldr	r3, [pc, #24]	; (8000220 <HAL_IncTick+0x24>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <HAL_IncTick+0x24>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000
 8000220:	20002508 	.word	0x20002508

08000224 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  return uwTick;  
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <HAL_GetTick+0x14>)
 800022a:	681b      	ldr	r3, [r3, #0]
}
 800022c:	4618      	mov	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20002508 	.word	0x20002508

0800023c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b09c      	sub	sp, #112	; 0x70
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000244:	2300      	movs	r3, #0
 8000246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800024a:	2300      	movs	r3, #0
 800024c:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000258:	2301      	movs	r3, #1
 800025a:	e1c8      	b.n	80005ee <HAL_ADC_Init+0x3b2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000266:	f003 0310 	and.w	r3, r3, #16
 800026a:	2b00      	cmp	r3, #0
 800026c:	d176      	bne.n	800035c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000272:	2b00      	cmp	r3, #0
 8000274:	d152      	bne.n	800031c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f008 f881 	bl	8008398 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d13b      	bne.n	800031c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 fc95 	bl	8000bd4 <ADC_Disable>
 80002aa:	4603      	mov	r3, r0
 80002ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d12f      	bne.n	800031c <HAL_ADC_Init+0xe0>
 80002bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d12b      	bne.n	800031c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002cc:	f023 0302 	bic.w	r3, r3, #2
 80002d0:	f043 0202 	orr.w	r2, r3, #2
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	689a      	ldr	r2, [r3, #8]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002f8:	4b86      	ldr	r3, [pc, #536]	; (8000514 <HAL_ADC_Init+0x2d8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a86      	ldr	r2, [pc, #536]	; (8000518 <HAL_ADC_Init+0x2dc>)
 80002fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000302:	0c9a      	lsrs	r2, r3, #18
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800030e:	e002      	b.n	8000316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3b01      	subs	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f9      	bne.n	8000310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000326:	2b00      	cmp	r3, #0
 8000328:	d007      	beq.n	800033a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000338:	d110      	bne.n	800035c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800033e:	f023 0312 	bic.w	r3, r3, #18
 8000342:	f043 0210 	orr.w	r2, r3, #16
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800034e:	f043 0201 	orr.w	r2, r3, #1
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000356:	2301      	movs	r3, #1
 8000358:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	2b00      	cmp	r3, #0
 8000366:	f040 8135 	bne.w	80005d4 <HAL_ADC_Init+0x398>
 800036a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800036e:	2b00      	cmp	r3, #0
 8000370:	f040 8130 	bne.w	80005d4 <HAL_ADC_Init+0x398>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8128 	bne.w	80005d4 <HAL_ADC_Init+0x398>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800038c:	f043 0202 	orr.w	r2, r3, #2
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800039c:	d004      	beq.n	80003a8 <HAL_ADC_Init+0x16c>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a5e      	ldr	r2, [pc, #376]	; (800051c <HAL_ADC_Init+0x2e0>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d101      	bne.n	80003ac <HAL_ADC_Init+0x170>
 80003a8:	4b5d      	ldr	r3, [pc, #372]	; (8000520 <HAL_ADC_Init+0x2e4>)
 80003aa:	e000      	b.n	80003ae <HAL_ADC_Init+0x172>
 80003ac:	4b5d      	ldr	r3, [pc, #372]	; (8000524 <HAL_ADC_Init+0x2e8>)
 80003ae:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b8:	d102      	bne.n	80003c0 <HAL_ADC_Init+0x184>
 80003ba:	4b58      	ldr	r3, [pc, #352]	; (800051c <HAL_ADC_Init+0x2e0>)
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	e01a      	b.n	80003f6 <HAL_ADC_Init+0x1ba>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a55      	ldr	r2, [pc, #340]	; (800051c <HAL_ADC_Init+0x2e0>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <HAL_ADC_Init+0x196>
 80003ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003ce:	613b      	str	r3, [r7, #16]
 80003d0:	e011      	b.n	80003f6 <HAL_ADC_Init+0x1ba>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a54      	ldr	r2, [pc, #336]	; (8000528 <HAL_ADC_Init+0x2ec>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d102      	bne.n	80003e2 <HAL_ADC_Init+0x1a6>
 80003dc:	4b53      	ldr	r3, [pc, #332]	; (800052c <HAL_ADC_Init+0x2f0>)
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	e009      	b.n	80003f6 <HAL_ADC_Init+0x1ba>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a51      	ldr	r2, [pc, #324]	; (800052c <HAL_ADC_Init+0x2f0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d102      	bne.n	80003f2 <HAL_ADC_Init+0x1b6>
 80003ec:	4b4e      	ldr	r3, [pc, #312]	; (8000528 <HAL_ADC_Init+0x2ec>)
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	e001      	b.n	80003f6 <HAL_ADC_Init+0x1ba>
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	f003 0303 	and.w	r3, r3, #3
 8000400:	2b01      	cmp	r3, #1
 8000402:	d108      	bne.n	8000416 <HAL_ADC_Init+0x1da>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	2b01      	cmp	r3, #1
 8000410:	d101      	bne.n	8000416 <HAL_ADC_Init+0x1da>
 8000412:	2301      	movs	r3, #1
 8000414:	e000      	b.n	8000418 <HAL_ADC_Init+0x1dc>
 8000416:	2300      	movs	r3, #0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d11c      	bne.n	8000456 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800041c:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800041e:	2b00      	cmp	r3, #0
 8000420:	d010      	beq.n	8000444 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f003 0303 	and.w	r3, r3, #3
 800042a:	2b01      	cmp	r3, #1
 800042c:	d107      	bne.n	800043e <HAL_ADC_Init+0x202>
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b01      	cmp	r3, #1
 8000438:	d101      	bne.n	800043e <HAL_ADC_Init+0x202>
 800043a:	2301      	movs	r3, #1
 800043c:	e000      	b.n	8000440 <HAL_ADC_Init+0x204>
 800043e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000440:	2b00      	cmp	r3, #0
 8000442:	d108      	bne.n	8000456 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	431a      	orrs	r2, r3
 8000452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000454:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	035b      	lsls	r3, r3, #13
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000460:	2a01      	cmp	r2, #1
 8000462:	d002      	beq.n	800046a <HAL_ADC_Init+0x22e>
 8000464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000468:	e000      	b.n	800046c <HAL_ADC_Init+0x230>
 800046a:	2200      	movs	r2, #0
 800046c:	431a      	orrs	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4313      	orrs	r3, r2
 800047a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800047c:	4313      	orrs	r3, r2
 800047e:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000484:	2b01      	cmp	r3, #1
 8000486:	d11b      	bne.n	80004c0 <HAL_ADC_Init+0x284>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d109      	bne.n	80004a4 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000494:	3b01      	subs	r3, #1
 8000496:	045a      	lsls	r2, r3, #17
 8000498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800049a:	4313      	orrs	r3, r2
 800049c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80004a2:	e00d      	b.n	80004c0 <HAL_ADC_Init+0x284>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80004ac:	f043 0220 	orr.w	r2, r3, #32
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b8:	f043 0201 	orr.w	r2, r3, #1
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d03b      	beq.n	8000540 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a16      	ldr	r2, [pc, #88]	; (8000528 <HAL_ADC_Init+0x2ec>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d004      	beq.n	80004dc <HAL_ADC_Init+0x2a0>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a15      	ldr	r2, [pc, #84]	; (800052c <HAL_ADC_Init+0x2f0>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d129      	bne.n	8000530 <HAL_ADC_Init+0x2f4>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80004e4:	d012      	beq.n	800050c <HAL_ADC_Init+0x2d0>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004ee:	d00a      	beq.n	8000506 <HAL_ADC_Init+0x2ca>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80004f8:	d002      	beq.n	8000500 <HAL_ADC_Init+0x2c4>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fe:	e019      	b.n	8000534 <HAL_ADC_Init+0x2f8>
 8000500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000504:	e016      	b.n	8000534 <HAL_ADC_Init+0x2f8>
 8000506:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800050a:	e013      	b.n	8000534 <HAL_ADC_Init+0x2f8>
 800050c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000510:	e010      	b.n	8000534 <HAL_ADC_Init+0x2f8>
 8000512:	bf00      	nop
 8000514:	20000118 	.word	0x20000118
 8000518:	431bde83 	.word	0x431bde83
 800051c:	50000100 	.word	0x50000100
 8000520:	50000300 	.word	0x50000300
 8000524:	50000700 	.word	0x50000700
 8000528:	50000400 	.word	0x50000400
 800052c:	50000500 	.word	0x50000500
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000538:	4313      	orrs	r3, r2
 800053a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800053c:	4313      	orrs	r3, r2
 800053e:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f003 030c 	and.w	r3, r3, #12
 800054a:	2b00      	cmp	r3, #0
 800054c:	d113      	bne.n	8000576 <HAL_ADC_Init+0x33a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800055c:	f023 0302 	bic.w	r3, r3, #2
 8000560:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	039a      	lsls	r2, r3, #14
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	4313      	orrs	r3, r2
 8000570:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000572:	4313      	orrs	r3, r2
 8000574:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <HAL_ADC_Init+0x3bc>)
 800057e:	4013      	ands	r3, r2
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000586:	430b      	orrs	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10c      	bne.n	80005ac <HAL_ADC_Init+0x370>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	f023 010f 	bic.w	r1, r3, #15
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
 80005aa:	e007      	b.n	80005bc <HAL_ADC_Init+0x380>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f022 020f 	bic.w	r2, r2, #15
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c6:	f023 0303 	bic.w	r3, r3, #3
 80005ca:	f043 0201 	orr.w	r2, r3, #1
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	645a      	str	r2, [r3, #68]	; 0x44
 80005d2:	e00a      	b.n	80005ea <HAL_ADC_Init+0x3ae>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d8:	f023 0312 	bic.w	r3, r3, #18
 80005dc:	f043 0210 	orr.w	r2, r3, #16
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80005e4:	2301      	movs	r3, #1
 80005e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80005ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3770      	adds	r7, #112	; 0x70
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	fff0c007 	.word	0xfff0c007

080005fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b09d      	sub	sp, #116	; 0x74
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000616:	2b01      	cmp	r3, #1
 8000618:	d101      	bne.n	800061e <HAL_ADC_ConfigChannel+0x22>
 800061a:	2302      	movs	r3, #2
 800061c:	e2cb      	b.n	8000bb6 <HAL_ADC_ConfigChannel+0x5ba>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	2b00      	cmp	r3, #0
 8000632:	f040 82af 	bne.w	8000b94 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2b04      	cmp	r3, #4
 800063c:	d81c      	bhi.n	8000678 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	4613      	mov	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	461a      	mov	r2, r3
 8000652:	231f      	movs	r3, #31
 8000654:	4093      	lsls	r3, r2
 8000656:	43db      	mvns	r3, r3
 8000658:	4019      	ands	r1, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	fa00 f203 	lsl.w	r2, r0, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	430a      	orrs	r2, r1
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	e063      	b.n	8000740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d81e      	bhi.n	80006be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	3b1e      	subs	r3, #30
 8000694:	221f      	movs	r2, #31
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4019      	ands	r1, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	3b1e      	subs	r3, #30
 80006b0:	fa00 f203 	lsl.w	r2, r0, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
 80006bc:	e040      	b.n	8000740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b0e      	cmp	r3, #14
 80006c4:	d81e      	bhi.n	8000704 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	3b3c      	subs	r3, #60	; 0x3c
 80006da:	221f      	movs	r2, #31
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4019      	ands	r1, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	3b3c      	subs	r3, #60	; 0x3c
 80006f6:	fa00 f203 	lsl.w	r2, r0, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	430a      	orrs	r2, r1
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
 8000702:	e01d      	b.n	8000740 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	3b5a      	subs	r3, #90	; 0x5a
 8000718:	221f      	movs	r2, #31
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43db      	mvns	r3, r3
 8000720:	4019      	ands	r1, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	3b5a      	subs	r3, #90	; 0x5a
 8000734:	fa00 f203 	lsl.w	r2, r0, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	430a      	orrs	r2, r1
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f003 030c 	and.w	r3, r3, #12
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 80e5 	bne.w	800091a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b09      	cmp	r3, #9
 8000756:	d91c      	bls.n	8000792 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6999      	ldr	r1, [r3, #24]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	3b1e      	subs	r3, #30
 800076a:	2207      	movs	r2, #7
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	4019      	ands	r1, r3
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	6898      	ldr	r0, [r3, #8]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	3b1e      	subs	r3, #30
 8000784:	fa00 f203 	lsl.w	r2, r0, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	430a      	orrs	r2, r1
 800078e:	619a      	str	r2, [r3, #24]
 8000790:	e019      	b.n	80007c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6959      	ldr	r1, [r3, #20]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	2207      	movs	r2, #7
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4019      	ands	r1, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	fa00 f203 	lsl.w	r2, r0, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d84f      	bhi.n	8000888 <HAL_ADC_ConfigChannel+0x28c>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000823 	.word	0x08000823
 80007f8:	08000845 	.word	0x08000845
 80007fc:	08000867 	.word	0x08000867
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000806:	4b9f      	ldr	r3, [pc, #636]	; (8000a84 <HAL_ADC_ConfigChannel+0x488>)
 8000808:	4013      	ands	r3, r2
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	0691      	lsls	r1, r2, #26
 8000810:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000812:	430a      	orrs	r2, r1
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800081e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000820:	e07e      	b.n	8000920 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000828:	4b96      	ldr	r3, [pc, #600]	; (8000a84 <HAL_ADC_ConfigChannel+0x488>)
 800082a:	4013      	ands	r3, r2
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	0691      	lsls	r1, r2, #26
 8000832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000834:	430a      	orrs	r2, r1
 8000836:	431a      	orrs	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000840:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000842:	e06d      	b.n	8000920 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800084a:	4b8e      	ldr	r3, [pc, #568]	; (8000a84 <HAL_ADC_ConfigChannel+0x488>)
 800084c:	4013      	ands	r3, r2
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	0691      	lsls	r1, r2, #26
 8000854:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000856:	430a      	orrs	r2, r1
 8000858:	431a      	orrs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000862:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000864:	e05c      	b.n	8000920 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800086c:	4b85      	ldr	r3, [pc, #532]	; (8000a84 <HAL_ADC_ConfigChannel+0x488>)
 800086e:	4013      	ands	r3, r2
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	0691      	lsls	r1, r2, #26
 8000876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000878:	430a      	orrs	r2, r1
 800087a:	431a      	orrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000884:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000886:	e04b      	b.n	8000920 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	069b      	lsls	r3, r3, #26
 8000898:	429a      	cmp	r2, r3
 800089a:	d107      	bne.n	80008ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008aa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80008b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	069b      	lsls	r3, r3, #26
 80008bc:	429a      	cmp	r2, r3
 80008be:	d107      	bne.n	80008d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008ce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	069b      	lsls	r3, r3, #26
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d107      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008f2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80008fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	069b      	lsls	r3, r3, #26
 8000904:	429a      	cmp	r2, r3
 8000906:	d10a      	bne.n	800091e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000916:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000918:	e001      	b.n	800091e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <HAL_ADC_ConfigChannel+0x324>
      break;
 800091e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b01      	cmp	r3, #1
 800092c:	d108      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x344>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b01      	cmp	r3, #1
 800093a:	d101      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x344>
 800093c:	2301      	movs	r3, #1
 800093e:	e000      	b.n	8000942 <HAL_ADC_ConfigChannel+0x346>
 8000940:	2300      	movs	r3, #0
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 8131 	bne.w	8000baa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00f      	beq.n	8000970 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	400a      	ands	r2, r1
 800096a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800096e:	e049      	b.n	8000a04 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	409a      	lsls	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	430a      	orrs	r2, r1
 8000986:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b09      	cmp	r3, #9
 8000990:	d91c      	bls.n	80009cc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6999      	ldr	r1, [r3, #24]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	3b1b      	subs	r3, #27
 80009a4:	2207      	movs	r2, #7
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4019      	ands	r1, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	6898      	ldr	r0, [r3, #8]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	3b1b      	subs	r3, #27
 80009be:	fa00 f203 	lsl.w	r2, r0, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
 80009ca:	e01b      	b.n	8000a04 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6959      	ldr	r1, [r3, #20]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	2207      	movs	r2, #7
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	4019      	ands	r1, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	6898      	ldr	r0, [r3, #8]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	fa00 f203 	lsl.w	r2, r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a0c:	d004      	beq.n	8000a18 <HAL_ADC_ConfigChannel+0x41c>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_ADC_ConfigChannel+0x48c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <HAL_ADC_ConfigChannel+0x420>
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_ADC_ConfigChannel+0x490>)
 8000a1a:	e000      	b.n	8000a1e <HAL_ADC_ConfigChannel+0x422>
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_ADC_ConfigChannel+0x494>)
 8000a1e:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b10      	cmp	r3, #16
 8000a26:	d105      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d015      	beq.n	8000a60 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a38:	2b11      	cmp	r3, #17
 8000a3a:	d105      	bne.n	8000a48 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00b      	beq.n	8000a60 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a4c:	2b12      	cmp	r3, #18
 8000a4e:	f040 80ac 	bne.w	8000baa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 80a5 	bne.w	8000baa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a68:	d102      	bne.n	8000a70 <HAL_ADC_ConfigChannel+0x474>
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_ADC_ConfigChannel+0x48c>)
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e023      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_ADC_ConfigChannel+0x48c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10c      	bne.n	8000a94 <HAL_ADC_ConfigChannel+0x498>
 8000a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	e01a      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8000a82:	bf00      	nop
 8000a84:	83fff000 	.word	0x83fff000
 8000a88:	50000100 	.word	0x50000100
 8000a8c:	50000300 	.word	0x50000300
 8000a90:	50000700 	.word	0x50000700
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a4a      	ldr	r2, [pc, #296]	; (8000bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d102      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x4a8>
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	e009      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_ADC_ConfigChannel+0x5cc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d102      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x4b8>
 8000aae:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <HAL_ADC_ConfigChannel+0x5c8>)
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	e001      	b.n	8000ab8 <HAL_ADC_ConfigChannel+0x4bc>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x4dc>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d101      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x4dc>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <HAL_ADC_ConfigChannel+0x4de>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d150      	bne.n	8000b80 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ade:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d010      	beq.n	8000b06 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d107      	bne.n	8000b00 <HAL_ADC_ConfigChannel+0x504>
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d101      	bne.n	8000b00 <HAL_ADC_ConfigChannel+0x504>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <HAL_ADC_ConfigChannel+0x506>
 8000b00:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d13c      	bne.n	8000b80 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d11d      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x54e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b16:	d118      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b22:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_ADC_ConfigChannel+0x5d0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <HAL_ADC_ConfigChannel+0x5d4>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9a      	lsrs	r2, r3, #18
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000b3a:	e002      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1f9      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b48:	e02e      	b.n	8000ba8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b11      	cmp	r3, #17
 8000b50:	d10b      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0x56e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b5a:	d106      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b66:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b68:	e01e      	b.n	8000ba8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d11a      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b7c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b7e:	e013      	b.n	8000ba8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f043 0220 	orr.w	r2, r3, #32
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000b92:	e00a      	b.n	8000baa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f043 0220 	orr.w	r2, r3, #32
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ba6:	e000      	b.n	8000baa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ba8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3774      	adds	r7, #116	; 0x74
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	50000400 	.word	0x50000400
 8000bc8:	50000500 	.word	0x50000500
 8000bcc:	20000118 	.word	0x20000118
 8000bd0:	431bde83 	.word	0x431bde83

08000bd4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d108      	bne.n	8000c00 <ADC_Disable+0x2c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <ADC_Disable+0x2c>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <ADC_Disable+0x2e>
 8000c00:	2300      	movs	r3, #0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d040      	beq.n	8000c88 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 030d 	and.w	r3, r3, #13
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d10f      	bne.n	8000c34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0202 	orr.w	r2, r2, #2
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000c2c:	f7ff fafa 	bl	8000224 <HAL_GetTick>
 8000c30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000c32:	e022      	b.n	8000c7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f043 0210 	orr.w	r2, r3, #16
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e01c      	b.n	8000c8a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c50:	f7ff fae8 	bl	8000224 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d90d      	bls.n	8000c7a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f043 0210 	orr.w	r2, r3, #16
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6e:	f043 0201 	orr.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e007      	b.n	8000c8a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d0e3      	beq.n	8000c50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_COMP_Init+0x22>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	75fb      	strb	r3, [r7, #23]
 8000cba:	e064      	b.n	8000d86 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbc:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_COMP_Init+0xfc>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <HAL_COMP_Init+0xfc>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <HAL_COMP_Init+0xfc>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
    /* Init the low level hardware : SYSCFG to access comparators */
    HAL_COMP_MspInit(hcomp);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f007 fc2d 	bl	8008534 <HAL_COMP_MspInit>

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f023 020c 	bic.w	r2, r3, #12
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <HAL_COMP_Stop+0x22>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e09d      	b.n	8000ef8 <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	f040 8095 	bne.w	8000ef4 <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <HAL_COMP_Stop+0x174>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d04b      	beq.n	8000e6c <HAL_COMP_Stop+0xd8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <HAL_COMP_Stop+0x178>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d046      	beq.n	8000e6c <HAL_COMP_Stop+0xd8>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_COMP_Stop+0x17c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d041      	beq.n	8000e6c <HAL_COMP_Stop+0xd8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_COMP_Stop+0x180>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d03c      	beq.n	8000e6c <HAL_COMP_Stop+0xd8>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <HAL_COMP_Stop+0x184>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d037      	beq.n	8000e6c <HAL_COMP_Stop+0xd8>
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <HAL_COMP_Stop+0x188>)
 8000dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4940      	ldr	r1, [pc, #256]	; (8000f08 <HAL_COMP_Stop+0x174>)
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d02a      	beq.n	8000e60 <HAL_COMP_Stop+0xcc>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	493f      	ldr	r1, [pc, #252]	; (8000f0c <HAL_COMP_Stop+0x178>)
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d022      	beq.n	8000e5a <HAL_COMP_Stop+0xc6>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	493d      	ldr	r1, [pc, #244]	; (8000f10 <HAL_COMP_Stop+0x17c>)
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d01a      	beq.n	8000e54 <HAL_COMP_Stop+0xc0>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	493c      	ldr	r1, [pc, #240]	; (8000f14 <HAL_COMP_Stop+0x180>)
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d012      	beq.n	8000e4e <HAL_COMP_Stop+0xba>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	493a      	ldr	r1, [pc, #232]	; (8000f18 <HAL_COMP_Stop+0x184>)
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d00a      	beq.n	8000e48 <HAL_COMP_Stop+0xb4>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	493a      	ldr	r1, [pc, #232]	; (8000f20 <HAL_COMP_Stop+0x18c>)
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d102      	bne.n	8000e42 <HAL_COMP_Stop+0xae>
 8000e3c:	f06f 0301 	mvn.w	r3, #1
 8000e40:	e010      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e42:	f06f 0302 	mvn.w	r3, #2
 8000e46:	e00d      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e48:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000e4c:	e00a      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e4e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8000e52:	e007      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e54:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8000e58:	e004      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e5a:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8000e5e:	e001      	b.n	8000e64 <HAL_COMP_Stop+0xd0>
 8000e60:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8000e64:	492d      	ldr	r1, [pc, #180]	; (8000f1c <HAL_COMP_Stop+0x188>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	624b      	str	r3, [r1, #36]	; 0x24
 8000e6a:	e036      	b.n	8000eda <HAL_COMP_Stop+0x146>
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_COMP_Stop+0x188>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4924      	ldr	r1, [pc, #144]	; (8000f08 <HAL_COMP_Stop+0x174>)
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d02a      	beq.n	8000ed0 <HAL_COMP_Stop+0x13c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4923      	ldr	r1, [pc, #140]	; (8000f0c <HAL_COMP_Stop+0x178>)
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d022      	beq.n	8000eca <HAL_COMP_Stop+0x136>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4921      	ldr	r1, [pc, #132]	; (8000f10 <HAL_COMP_Stop+0x17c>)
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d01a      	beq.n	8000ec4 <HAL_COMP_Stop+0x130>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4920      	ldr	r1, [pc, #128]	; (8000f14 <HAL_COMP_Stop+0x180>)
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d012      	beq.n	8000ebe <HAL_COMP_Stop+0x12a>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	491e      	ldr	r1, [pc, #120]	; (8000f18 <HAL_COMP_Stop+0x184>)
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d00a      	beq.n	8000eb8 <HAL_COMP_Stop+0x124>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	491e      	ldr	r1, [pc, #120]	; (8000f20 <HAL_COMP_Stop+0x18c>)
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d102      	bne.n	8000eb2 <HAL_COMP_Stop+0x11e>
 8000eac:	f06f 0301 	mvn.w	r3, #1
 8000eb0:	e010      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000eb2:	f06f 0302 	mvn.w	r3, #2
 8000eb6:	e00d      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000eb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000ebc:	e00a      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000ebe:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8000ec2:	e007      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000ec4:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8000ec8:	e004      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000eca:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8000ece:	e001      	b.n	8000ed4 <HAL_COMP_Stop+0x140>
 8000ed0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8000ed4:	4911      	ldr	r1, [pc, #68]	; (8000f1c <HAL_COMP_Stop+0x188>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000ef2:	e001      	b.n	8000ef8 <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	4001001c 	.word	0x4001001c
 8000f0c:	40010020 	.word	0x40010020
 8000f10:	40010024 	.word	0x40010024
 8000f14:	40010028 	.word	0x40010028
 8000f18:	4001002c 	.word	0x4001002c
 8000f1c:	40010400 	.word	0x40010400
 8000f20:	40010030 	.word	0x40010030

08000f24 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <HAL_COMP_Start_IT+0x26>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e0c8      	b.n	80010e2 <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 80c0 	bne.w	80010de <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80b6 	beq.w	80010d8 <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a5f      	ldr	r2, [pc, #380]	; (80010f0 <HAL_COMP_Start_IT+0x1cc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d028      	beq.n	8000fc8 <HAL_COMP_Start_IT+0xa4>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a5e      	ldr	r2, [pc, #376]	; (80010f4 <HAL_COMP_Start_IT+0x1d0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d020      	beq.n	8000fc2 <HAL_COMP_Start_IT+0x9e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_COMP_Start_IT+0x1d4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d018      	beq.n	8000fbc <HAL_COMP_Start_IT+0x98>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a5b      	ldr	r2, [pc, #364]	; (80010fc <HAL_COMP_Start_IT+0x1d8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d010      	beq.n	8000fb6 <HAL_COMP_Start_IT+0x92>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a59      	ldr	r2, [pc, #356]	; (8001100 <HAL_COMP_Start_IT+0x1dc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d008      	beq.n	8000fb0 <HAL_COMP_Start_IT+0x8c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a58      	ldr	r2, [pc, #352]	; (8001104 <HAL_COMP_Start_IT+0x1e0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_COMP_Start_IT+0x88>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00f      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e00d      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000fb4:	e00a      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	e007      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc0:	e004      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	e001      	b.n	8000fcc <HAL_COMP_Start_IT+0xa8>
 8000fc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fcc:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_COMP_Start_IT+0xce>
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8000fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe8:	4947      	ldr	r1, [pc, #284]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	628b      	str	r3, [r1, #40]	; 0x28
 8000ff0:	e01a      	b.n	8001028 <HAL_COMP_Start_IT+0x104>
 8000ff2:	4b45      	ldr	r3, [pc, #276]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4944      	ldr	r1, [pc, #272]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
 8000ffe:	e013      	b.n	8001028 <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <HAL_COMP_Start_IT+0xf6>
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800100c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	43db      	mvns	r3, r3
 8001012:	493d      	ldr	r1, [pc, #244]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001014:	4013      	ands	r3, r2
 8001016:	628b      	str	r3, [r1, #40]	; 0x28
 8001018:	e006      	b.n	8001028 <HAL_COMP_Start_IT+0x104>
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	43db      	mvns	r3, r3
 8001022:	4939      	ldr	r1, [pc, #228]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001024:	4013      	ands	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d012      	beq.n	800105a <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_COMP_Start_IT+0x128>
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001042:	4931      	ldr	r1, [pc, #196]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
 8001048:	62cb      	str	r3, [r1, #44]	; 0x2c
 800104a:	e01a      	b.n	8001082 <HAL_COMP_Start_IT+0x15e>
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	492d      	ldr	r1, [pc, #180]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e013      	b.n	8001082 <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_COMP_Start_IT+0x150>
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	43db      	mvns	r3, r3
 800106c:	4926      	ldr	r1, [pc, #152]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800106e:	4013      	ands	r3, r2
 8001070:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001072:	e006      	b.n	8001082 <HAL_COMP_Start_IT+0x15e>
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	43db      	mvns	r3, r3
 800107c:	4922      	ldr	r1, [pc, #136]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800107e:	4013      	ands	r3, r2
 8001080:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_COMP_Start_IT+0x170>
 800108c:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	6353      	str	r3, [r2, #52]	; 0x34
 8001092:	e002      	b.n	800109a <HAL_COMP_Start_IT+0x176>
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_COMP_Start_IT+0x18e>
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4917      	ldr	r1, [pc, #92]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	620b      	str	r3, [r1, #32]
 80010b0:	e005      	b.n	80010be <HAL_COMP_Start_IT+0x19a>
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4914      	ldr	r1, [pc, #80]	; (8001108 <HAL_COMP_Start_IT+0x1e4>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0201 	orr.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2202      	movs	r2, #2
 80010d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80010d6:	e004      	b.n	80010e2 <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	4001001c 	.word	0x4001001c
 80010f4:	40010020 	.word	0x40010020
 80010f8:	40010024 	.word	0x40010024
 80010fc:	40010028 	.word	0x40010028
 8001100:	4001002c 	.word	0x4001002c
 8001104:	40010030 	.word	0x40010030
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a47      	ldr	r2, [pc, #284]	; (800123c <HAL_COMP_Stop_IT+0x130>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04b      	beq.n	80011ba <HAL_COMP_Stop_IT+0xae>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_COMP_Stop_IT+0x134>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d046      	beq.n	80011ba <HAL_COMP_Stop_IT+0xae>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a44      	ldr	r2, [pc, #272]	; (8001244 <HAL_COMP_Stop_IT+0x138>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d041      	beq.n	80011ba <HAL_COMP_Stop_IT+0xae>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a43      	ldr	r2, [pc, #268]	; (8001248 <HAL_COMP_Stop_IT+0x13c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d03c      	beq.n	80011ba <HAL_COMP_Stop_IT+0xae>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a41      	ldr	r2, [pc, #260]	; (800124c <HAL_COMP_Stop_IT+0x140>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d037      	beq.n	80011ba <HAL_COMP_Stop_IT+0xae>
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_COMP_Stop_IT+0x144>)
 800114c:	6a1a      	ldr	r2, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	493a      	ldr	r1, [pc, #232]	; (800123c <HAL_COMP_Stop_IT+0x130>)
 8001154:	428b      	cmp	r3, r1
 8001156:	d02a      	beq.n	80011ae <HAL_COMP_Stop_IT+0xa2>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4938      	ldr	r1, [pc, #224]	; (8001240 <HAL_COMP_Stop_IT+0x134>)
 800115e:	428b      	cmp	r3, r1
 8001160:	d022      	beq.n	80011a8 <HAL_COMP_Stop_IT+0x9c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_COMP_Stop_IT+0x138>)
 8001168:	428b      	cmp	r3, r1
 800116a:	d01a      	beq.n	80011a2 <HAL_COMP_Stop_IT+0x96>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_COMP_Stop_IT+0x13c>)
 8001172:	428b      	cmp	r3, r1
 8001174:	d012      	beq.n	800119c <HAL_COMP_Stop_IT+0x90>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_COMP_Stop_IT+0x140>)
 800117c:	428b      	cmp	r3, r1
 800117e:	d00a      	beq.n	8001196 <HAL_COMP_Stop_IT+0x8a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4933      	ldr	r1, [pc, #204]	; (8001254 <HAL_COMP_Stop_IT+0x148>)
 8001186:	428b      	cmp	r3, r1
 8001188:	d102      	bne.n	8001190 <HAL_COMP_Stop_IT+0x84>
 800118a:	f06f 0301 	mvn.w	r3, #1
 800118e:	e010      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 8001190:	f06f 0302 	mvn.w	r3, #2
 8001194:	e00d      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 8001196:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800119a:	e00a      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 800119c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80011a0:	e007      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 80011a2:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 80011a6:	e004      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 80011a8:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 80011ac:	e001      	b.n	80011b2 <HAL_COMP_Stop_IT+0xa6>
 80011ae:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_COMP_Stop_IT+0x144>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	620b      	str	r3, [r1, #32]
 80011b8:	e036      	b.n	8001228 <HAL_COMP_Stop_IT+0x11c>
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_COMP_Stop_IT+0x144>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	491e      	ldr	r1, [pc, #120]	; (800123c <HAL_COMP_Stop_IT+0x130>)
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d02a      	beq.n	800121e <HAL_COMP_Stop_IT+0x112>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	491c      	ldr	r1, [pc, #112]	; (8001240 <HAL_COMP_Stop_IT+0x134>)
 80011ce:	428b      	cmp	r3, r1
 80011d0:	d022      	beq.n	8001218 <HAL_COMP_Stop_IT+0x10c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	491b      	ldr	r1, [pc, #108]	; (8001244 <HAL_COMP_Stop_IT+0x138>)
 80011d8:	428b      	cmp	r3, r1
 80011da:	d01a      	beq.n	8001212 <HAL_COMP_Stop_IT+0x106>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4919      	ldr	r1, [pc, #100]	; (8001248 <HAL_COMP_Stop_IT+0x13c>)
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d012      	beq.n	800120c <HAL_COMP_Stop_IT+0x100>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4918      	ldr	r1, [pc, #96]	; (800124c <HAL_COMP_Stop_IT+0x140>)
 80011ec:	428b      	cmp	r3, r1
 80011ee:	d00a      	beq.n	8001206 <HAL_COMP_Stop_IT+0xfa>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4917      	ldr	r1, [pc, #92]	; (8001254 <HAL_COMP_Stop_IT+0x148>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d102      	bne.n	8001200 <HAL_COMP_Stop_IT+0xf4>
 80011fa:	f06f 0301 	mvn.w	r3, #1
 80011fe:	e010      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 8001200:	f06f 0302 	mvn.w	r3, #2
 8001204:	e00d      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 8001206:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800120a:	e00a      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 800120c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001210:	e007      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 8001212:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8001216:	e004      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 8001218:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 800121c:	e001      	b.n	8001222 <HAL_COMP_Stop_IT+0x116>
 800121e:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8001222:	490b      	ldr	r1, [pc, #44]	; (8001250 <HAL_COMP_Stop_IT+0x144>)
 8001224:	4013      	ands	r3, r2
 8001226:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fdb3 	bl	8000d94 <HAL_COMP_Stop>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]

  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	4001001c 	.word	0x4001001c
 8001240:	40010020 	.word	0x40010020
 8001244:	40010024 	.word	0x40010024
 8001248:	40010028 	.word	0x40010028
 800124c:	4001002c 	.word	0x4001002c
 8001250:	40010400 	.word	0x40010400
 8001254:	40010030 	.word	0x40010030

08001258 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2d      	ldr	r2, [pc, #180]	; (800131c <HAL_COMP_IRQHandler+0xc4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d028      	beq.n	80012bc <HAL_COMP_IRQHandler+0x64>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <HAL_COMP_IRQHandler+0xc8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d020      	beq.n	80012b6 <HAL_COMP_IRQHandler+0x5e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <HAL_COMP_IRQHandler+0xcc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d018      	beq.n	80012b0 <HAL_COMP_IRQHandler+0x58>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <HAL_COMP_IRQHandler+0xd0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d010      	beq.n	80012aa <HAL_COMP_IRQHandler+0x52>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_COMP_IRQHandler+0xd4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d008      	beq.n	80012a4 <HAL_COMP_IRQHandler+0x4c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a26      	ldr	r2, [pc, #152]	; (8001330 <HAL_COMP_IRQHandler+0xd8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_COMP_IRQHandler+0x48>
 800129c:	2301      	movs	r3, #1
 800129e:	e00f      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e00d      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80012a8:	e00a      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ae:	e007      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012b4:	e004      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ba:	e001      	b.n	80012c0 <HAL_COMP_IRQHandler+0x68>
 80012bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_COMP_IRQHandler+0x88>
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_COMP_IRQHandler+0xdc>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e008      	b.n	80012f2 <HAL_COMP_IRQHandler+0x9a>
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_COMP_IRQHandler+0xdc>)
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00e      	beq.n	8001314 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_COMP_IRQHandler+0xb0>
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_COMP_IRQHandler+0xdc>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6353      	str	r3, [r2, #52]	; 0x34
 8001306:	e002      	b.n	800130e <HAL_COMP_IRQHandler+0xb6>
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_COMP_IRQHandler+0xdc>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6153      	str	r3, [r2, #20]

    /* COMP trigger user callback */
    HAL_COMP_TriggerCallback(hcomp);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f812 	bl	8001338 <HAL_COMP_TriggerCallback>
  }
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	4001001c 	.word	0x4001001c
 8001320:	40010020 	.word	0x40010020
 8001324:	40010024 	.word	0x40010024
 8001328:	40010028 	.word	0x40010028
 800132c:	4001002c 	.word	0x4001002c
 8001330:	40010030 	.word	0x40010030
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_COMP_GetOutputLevel>:
  *         @arg @ref COMP_OUTPUTLEVEL_LOW
  *         @arg @ref COMP_OUTPUTLEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t level = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  level = READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001362:	60fb      	str	r3, [r7, #12]

  if (level != 0U)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_COMP_GetOutputLevel+0x24>
  {
    return (COMP_OUTPUTLEVEL_HIGH);
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	e000      	b.n	8001372 <HAL_COMP_GetOutputLevel+0x26>
  }
  return (COMP_OUTPUTLEVEL_LOW);
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <NVIC_EnableIRQ+0x30>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	da0b      	bge.n	8001444 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <NVIC_SetPriority+0x4c>)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	3b04      	subs	r3, #4
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001442:	e009      	b.n	8001458 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <NVIC_SetPriority+0x50>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	e000e100 	.word	0xe000e100

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff50 	bl	8001380 <NVIC_SetPriorityGrouping>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fa:	f7ff ff65 	bl	80013c8 <NVIC_GetPriorityGrouping>
 80014fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6978      	ldr	r0, [r7, #20]
 8001506:	f7ff ffb1 	bl	800146c <NVIC_EncodePriority>
 800150a:	4602      	mov	r2, r0
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff80 	bl	8001418 <NVIC_SetPriority>
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff58 	bl	80013e4 <NVIC_EnableIRQ>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001552:	e154      	b.n	80017fe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8146 	beq.w	80017f8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x40>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	6939      	ldr	r1, [r7, #16]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d00b      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160c:	2b11      	cmp	r3, #17
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b12      	cmp	r3, #18
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80a0 	beq.w	80017f8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b8:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b55      	ldr	r3, [pc, #340]	; (800181c <HAL_GPIO_Init+0x2e0>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016d0:	4a53      	ldr	r2, [pc, #332]	; (8001820 <HAL_GPIO_Init+0x2e4>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016fa:	d019      	beq.n	8001730 <HAL_GPIO_Init+0x1f4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_GPIO_Init+0x1f0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a48      	ldr	r2, [pc, #288]	; (8001828 <HAL_GPIO_Init+0x2ec>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1ec>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_GPIO_Init+0x2f0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a46      	ldr	r2, [pc, #280]	; (8001830 <HAL_GPIO_Init+0x2f4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1e4>
 800171c:	2304      	movs	r3, #4
 800171e:	e008      	b.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001720:	2305      	movs	r3, #5
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001724:	2303      	movs	r3, #3
 8001726:	e004      	b.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x1f6>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001730:	2300      	movs	r3, #0
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001742:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_GPIO_Init+0x2e4>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c8:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	f47f aea3 	bne.w	8001554 <HAL_GPIO_Init+0x18>
  }
}
 800180e:	bf00      	nop
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	40010000 	.word	0x40010000
 8001824:	48000400 	.word	0x48000400
 8001828:	48000800 	.word	0x48000800
 800182c:	48000c00 	.word	0x48000c00
 8001830:	48001000 	.word	0x48001000
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001854:	e002      	b.n	800185c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0ce      	b.n	8001a20 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f007 fe28 	bl	80094ec <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e040      	b.n	800192c <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3329      	adds	r3, #41	; 0x29
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	b2d8      	uxtb	r0, r3
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3328      	adds	r3, #40	; 0x28
 80018d2:	4602      	mov	r2, r0
 80018d4:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	332b      	adds	r3, #43	; 0x2b
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3334      	adds	r3, #52	; 0x34
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3338      	adds	r3, #56	; 0x38
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	333c      	adds	r3, #60	; 0x3c
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3301      	adds	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3b9      	bcc.n	80018aa <HAL_PCD_Init+0x42>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e046      	b.n	80019ca <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	b2d8      	uxtb	r0, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001968:	4602      	mov	r2, r0
 800196a:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3b3      	bcc.n	800193c <HAL_PCD_Init+0xd4>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0U*/
 hpcd->Instance->CNTR = 0U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80019fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001a00:	60bb      	str	r3, [r7, #8]
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1U);
 8001a30:	2101      	movs	r1, #1
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f007 fff6 	bl	8009a24 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	83fb      	strh	r3, [r7, #30]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001a54:	e30e      	b.n	8002074 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	777b      	strb	r3, [r7, #29]
    
    if (EPindex == 0U)
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8129 	bne.w	8001cbc <PCD_EP_ISR_Handler+0x278>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d14d      	bne.n	8001b12 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0U */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1U) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3328      	adds	r3, #40	; 0x28
 8001a92:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	441a      	add	r2, r3
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f007 fd83 	bl	80095de <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 82c7 	beq.w	8002074 <PCD_EP_ISR_Handler+0x630>
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 82c2 	bne.w	8002074 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b10:	e2b0      	b.n	8002074 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1U */
        
        /* DIR = 1U & CTR_RX       => SETUP or OUT int */
        /* DIR = 1U & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8001b18:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d031      	beq.n	8001b94 <PCD_EP_ISR_Handler+0x150>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	3306      	adds	r3, #6
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	461a      	mov	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 715d 	add.w	r1, r3, #884	; 0x374
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	889a      	ldrh	r2, [r3, #4]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f001 fd10 	bl	8003596 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1U*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b86:	400b      	ands	r3, r1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 fcf9 	bl	8009584 <HAL_PCD_SetupStageCallback>
 8001b92:	e26f      	b.n	8002074 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b94:	89bb      	ldrh	r3, [r7, #12]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f280 826a 	bge.w	8002074 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b299      	uxth	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	3306      	adds	r3, #6
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d011      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x1cc>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6919      	ldr	r1, [r3, #16]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	889a      	ldrh	r2, [r3, #4]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f001 fcca 	bl	8003596 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	441a      	add	r2, r3
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f007 fcc8 	bl	80095a8 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3306      	adds	r3, #6
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b3e      	cmp	r3, #62	; 0x3e
 8001c3a:	d917      	bls.n	8001c6c <PCD_EP_ISR_Handler+0x228>
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	82fb      	strh	r3, [r7, #22]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <PCD_EP_ISR_Handler+0x212>
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	82fb      	strh	r3, [r7, #22]
 8001c56:	8afb      	ldrh	r3, [r7, #22]
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	e011      	b.n	8001c90 <PCD_EP_ISR_Handler+0x24c>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	82fb      	strh	r3, [r7, #22]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <PCD_EP_ISR_Handler+0x242>
 8001c80:	8afb      	ldrh	r3, [r7, #22]
 8001c82:	3301      	adds	r3, #1
 8001c84:	82fb      	strh	r3, [r7, #22]
 8001c86:	8afb      	ldrh	r3, [r7, #22]
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca0:	b29c      	uxth	r4, r3
 8001ca2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001ca6:	b29c      	uxth	r4, r3
 8001ca8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001cac:	b29c      	uxth	r4, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b9c      	ldr	r3, [pc, #624]	; (8001f24 <PCD_EP_ISR_Handler+0x4e0>)
 8001cb4:	4323      	orrs	r3, r4
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8013      	strh	r3, [r2, #0]
 8001cba:	e1db      	b.n	8002074 <PCD_EP_ISR_Handler+0x630>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	7f7b      	ldrb	r3, [r7, #29]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cce:	89bb      	ldrh	r3, [r7, #12]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f280 80d5 	bge.w	8001e84 <PCD_EP_ISR_Handler+0x440>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	7f7b      	ldrb	r3, [r7, #29]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7f7b      	ldrb	r3, [r7, #29]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8001d00:	7f7a      	ldrb	r2, [r7, #29]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	7a9b      	ldrb	r3, [r3, #10]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d122      	bne.n	8001d64 <PCD_EP_ISR_Handler+0x320>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	3306      	adds	r3, #6
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d48:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001d4a:	8bfb      	ldrh	r3, [r7, #30]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d074      	beq.n	8001e3a <PCD_EP_ISR_Handler+0x3f6>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	889a      	ldrh	r2, [r3, #4]
 8001d5c:	8bfb      	ldrh	r3, [r7, #30]
 8001d5e:	f001 fc1a 	bl	8003596 <PCD_ReadPMA>
 8001d62:	e06a      	b.n	8001e3a <PCD_EP_ISR_Handler+0x3f6>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d7e:	d122      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x382>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	3302      	adds	r3, #2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001dac:	8bfb      	ldrh	r3, [r7, #30]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02b      	beq.n	8001e0a <PCD_EP_ISR_Handler+0x3c6>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	88da      	ldrh	r2, [r3, #6]
 8001dbe:	8bfb      	ldrh	r3, [r7, #30]
 8001dc0:	f001 fbe9 	bl	8003596 <PCD_ReadPMA>
 8001dc4:	e021      	b.n	8001e0a <PCD_EP_ISR_Handler+0x3c6>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3306      	adds	r3, #6
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001df2:	8bfb      	ldrh	r3, [r7, #30]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <PCD_EP_ISR_Handler+0x3c6>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	891a      	ldrh	r2, [r3, #8]
 8001e04:	8bfb      	ldrh	r3, [r7, #30]
 8001e06:	f001 fbc6 	bl	8003596 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001e20:	4013      	ands	r3, r2
 8001e22:	b299      	uxth	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	441a      	add	r2, r3
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <PCD_EP_ISR_Handler+0x4e4>)
 8001e34:	430b      	orrs	r3, r1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	8bfb      	ldrh	r3, [r7, #30]
 8001e40:	441a      	add	r2, r3
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	8bfb      	ldrh	r3, [r7, #30]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <PCD_EP_ISR_Handler+0x420>
 8001e5a:	8bfa      	ldrh	r2, [r7, #30]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d206      	bcs.n	8001e72 <PCD_EP_ISR_Handler+0x42e>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f007 fb9c 	bl	80095a8 <HAL_PCD_DataOutStageCallback>
 8001e70:	e008      	b.n	8001e84 <PCD_EP_ISR_Handler+0x440>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	7819      	ldrb	r1, [r3, #0]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 ff86 	bl	8002d90 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e84:	89bb      	ldrh	r3, [r7, #12]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80f1 	beq.w	8002074 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[EPindex];
 8001e92:	7f7a      	ldrb	r2, [r7, #29]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3328      	adds	r3, #40	; 0x28
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	7f7b      	ldrb	r3, [r7, #29]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	7f7a      	ldrb	r2, [r7, #29]
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	7a9b      	ldrb	r3, [r3, #10]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12b      	bne.n	8001f2c <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8082 	beq.w	8002010 <PCD_EP_ISR_Handler+0x5cc>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6919      	ldr	r1, [r3, #16]
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	889a      	ldrh	r2, [r3, #4]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f001 faf9 	bl	8003514 <PCD_WritePMA>
 8001f22:	e075      	b.n	8002010 <PCD_EP_ISR_Handler+0x5cc>
 8001f24:	ffff8080 	.word	0xffff8080
 8001f28:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d126      	bne.n	8001f94 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d031      	beq.n	8001fe0 <PCD_EP_ISR_Handler+0x59c>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	88da      	ldrh	r2, [r3, #6]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f001 fac1 	bl	8003514 <PCD_WritePMA>
 8001f92:	e025      	b.n	8001fe0 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <PCD_EP_ISR_Handler+0x59c>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	891a      	ldrh	r2, [r3, #8]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f001 fa9a 	bl	8003514 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b299      	uxth	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <PCD_EP_ISR_Handler+0x650>)
 800200a:	430b      	orrs	r3, r1
 800200c:	b29b      	uxth	r3, r3
 800200e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	3302      	adds	r3, #2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	441a      	add	r2, r3
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f007 fabf 	bl	80095de <HAL_PCD_DataInStageCallback>
 8002060:	e008      	b.n	8002074 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	7819      	ldrb	r1, [r3, #0]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 ffa8 	bl	8002fc4 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207c:	b29b      	uxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	81fa      	strh	r2, [r7, #14]
 8002082:	b21b      	sxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f6ff ace6 	blt.w	8001a56 <PCD_EP_ISR_Handler+0x12>
        }
      } 
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3724      	adds	r7, #36	; 0x24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	ffffc080 	.word	0xffffc080

08002098 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_IRQHandler+0x22>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fcc5 	bl	8001a44 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020cc:	d10c      	bne.n	80020e8 <HAL_PCD_IRQHandler+0x50>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80020d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f007 faa7 	bl	800962e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80020e0:	2100      	movs	r1, #0
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8a7 	bl	8002236 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020fa:	d105      	bne.n	8002108 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8002104:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002110:	b29b      	uxth	r3, r3
 8002112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211a:	d105      	bne.n	8002128 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8002124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002130:	b29b      	uxth	r3, r3
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d120      	bne.n	800217e <HAL_PCD_IRQHandler+0xe6>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	b292      	uxth	r2, r2
 8002150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0208 	bic.w	r2, r2, #8
 8002166:	b292      	uxth	r2, r2
 8002168:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    HAL_PCD_ResumeCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f007 fa97 	bl	80096a0 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800217a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002186:	b29b      	uxth	r3, r3
 8002188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002190:	d12a      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x150>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0208 	orr.w	r2, r2, #8
 80021a4:	b292      	uxth	r2, r2
 80021a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80021b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0204 	orr.w	r2, r2, #4
 80021c8:	b292      	uxth	r2, r2
 80021ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d002      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x150>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f007 fa42 	bl	800966c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fa:	d108      	bne.n	800220e <HAL_PCD_IRQHandler+0x176>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8002204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f007 fa02 	bl	8009612 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002216:	b29b      	uxth	r3, r3
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002220:	d105      	bne.n	800222e <HAL_PCD_IRQHandler+0x196>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800222a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_PCD_SetAddress+0x1a>
 800224c:	2302      	movs	r3, #2
 800224e:	e015      	b.n	800227c <HAL_PCD_SetAddress+0x46>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0U) 
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8002268:	e003      	b.n	8002272 <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002288:	b490      	push	{r4, r7}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	70fb      	strb	r3, [r7, #3]
 800229a:	460b      	mov	r3, r1
 800229c:	803b      	strh	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	747b      	strb	r3, [r7, #17]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80022a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da0b      	bge.n	80022c6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e00c      	b.n	80022e0 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80022ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	09db      	lsrs	r3, r3, #7
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80022fc:	883a      	ldrh	r2, [r7, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	78ba      	ldrb	r2, [r7, #2]
 8002306:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_PCD_EP_Open+0x8e>
 8002312:	2302      	movs	r3, #2
 8002314:	e329      	b.n	800296a <HAL_PCD_EP_Open+0x6e2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d86f      	bhi.n	8002406 <HAL_PCD_EP_Open+0x17e>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <HAL_PCD_EP_Open+0xa4>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800233d 	.word	0x0800233d
 8002330:	080023d3 	.word	0x080023d3
 8002334:	08002371 	.word	0x08002371
 8002338:	0800239f 	.word	0x0800239f
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	b292      	uxth	r2, r2
 800236c:	801a      	strh	r2, [r3, #0]
    break;
 800236e:	e04b      	b.n	8002408 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4611      	mov	r1, r2
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	440a      	add	r2, r1
 8002390:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002398:	b29b      	uxth	r3, r3
 800239a:	8013      	strh	r3, [r2, #0]
    break;
 800239c:	e034      	b.n	8002408 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80023cc:	b292      	uxth	r2, r2
 80023ce:	801a      	strh	r2, [r3, #0]
    break;
 80023d0:	e01a      	b.n	8002408 <HAL_PCD_EP_Open+0x180>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002400:	b292      	uxth	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]
    break;
 8002404:	e000      	b.n	8002408 <HAL_PCD_EP_Open+0x180>
  default:
    break;
 8002406:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29a      	uxth	r2, r3
 800241a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800241e:	4013      	ands	r3, r2
 8002420:	b29a      	uxth	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b299      	uxth	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	4b83      	ldr	r3, [pc, #524]	; (8002648 <HAL_PCD_EP_Open+0x3c0>)
 800243c:	430b      	orrs	r3, r1
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0U) 
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	7a9b      	ldrb	r3, [r3, #10]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8104 	bne.w	8002654 <HAL_PCD_EP_Open+0x3cc>
  {
    if (ep->is_in)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d059      	beq.n	8002508 <HAL_PCD_EP_Open+0x280>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002464:	b292      	uxth	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	440a      	add	r2, r1
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	4611      	mov	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	440a      	add	r2, r1
 800247a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <HAL_PCD_EP_Open+0x246>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80024b4:	4013      	ands	r3, r2
 80024b6:	b299      	uxth	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	4b61      	ldr	r3, [pc, #388]	; (800264c <HAL_PCD_EP_Open+0x3c4>)
 80024c8:	430b      	orrs	r3, r1
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e8:	b29c      	uxth	r4, r3
 80024ea:	f084 0320 	eor.w	r3, r4, #32
 80024ee:	b29c      	uxth	r4, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <HAL_PCD_EP_Open+0x3c0>)
 8002500:	4323      	orrs	r3, r4
 8002502:	b29b      	uxth	r3, r3
 8002504:	8013      	strh	r3, [r2, #0]
 8002506:	e22b      	b.n	8002960 <HAL_PCD_EP_Open+0x6d8>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002518:	b292      	uxth	r2, r2
 800251a:	4611      	mov	r1, r2
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	00d2      	lsls	r2, r2, #3
 8002522:	440a      	add	r2, r1
 8002524:	3204      	adds	r2, #4
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	4611      	mov	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	440a      	add	r2, r1
 8002530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	b29b      	uxth	r3, r3
 8002538:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	3306      	adds	r3, #6
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b3e      	cmp	r3, #62	; 0x3e
 8002566:	d917      	bls.n	8002598 <HAL_PCD_EP_Open+0x310>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	827b      	strh	r3, [r7, #18]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_PCD_EP_Open+0x2fa>
 800257c:	8a7b      	ldrh	r3, [r7, #18]
 800257e:	3b01      	subs	r3, #1
 8002580:	827b      	strh	r3, [r7, #18]
 8002582:	8a7b      	ldrh	r3, [r7, #18]
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	b29b      	uxth	r3, r3
 8002588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	e011      	b.n	80025bc <HAL_PCD_EP_Open+0x334>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	827b      	strh	r3, [r7, #18]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_PCD_EP_Open+0x32a>
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	3301      	adds	r3, #1
 80025b0:	827b      	strh	r3, [r7, #18]
 80025b2:	8a7b      	ldrh	r3, [r7, #18]
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d017      	beq.n	8002606 <HAL_PCD_EP_Open+0x37e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80025ec:	4013      	ands	r3, r2
 80025ee:	b299      	uxth	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	441a      	add	r2, r3
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_PCD_EP_Open+0x3c8>)
 8002600:	430b      	orrs	r3, r1
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	b29c      	uxth	r4, r3
 8002622:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002626:	b29c      	uxth	r4, r3
 8002628:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800262c:	b29c      	uxth	r4, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_PCD_EP_Open+0x3c0>)
 800263e:	4323      	orrs	r3, r4
 8002640:	b29b      	uxth	r3, r3
 8002642:	8013      	strh	r3, [r2, #0]
 8002644:	e18c      	b.n	8002960 <HAL_PCD_EP_Open+0x6d8>
 8002646:	bf00      	nop
 8002648:	ffff8080 	.word	0xffff8080
 800264c:	ffff80c0 	.word	0xffff80c0
 8002650:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29a      	uxth	r2, r3
 8002666:	f640 630f 	movw	r3, #3599	; 0xe0f
 800266a:	4013      	ands	r3, r2
 800266c:	b299      	uxth	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_PCD_EP_Open+0x5a0>)
 800267e:	430b      	orrs	r3, r1
 8002680:	b29b      	uxth	r3, r3
 8002682:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	88db      	ldrh	r3, [r3, #6]
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002694:	b292      	uxth	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	00d2      	lsls	r2, r2, #3
 800269e:	440a      	add	r2, r1
 80026a0:	0052      	lsls	r2, r2, #1
 80026a2:	4611      	mov	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	891b      	ldrh	r3, [r3, #8]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80026c4:	b292      	uxth	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	00d2      	lsls	r2, r2, #3
 80026ce:	440a      	add	r2, r1
 80026d0:	3204      	adds	r2, #4
 80026d2:	0052      	lsls	r2, r2, #1
 80026d4:	4611      	mov	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	440a      	add	r2, r1
 80026dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 80a4 	bne.w	8002838 <HAL_PCD_EP_Open+0x5b0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d017      	beq.n	800273a <HAL_PCD_EP_Open+0x4b2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29a      	uxth	r2, r3
 800271c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002720:	4013      	ands	r3, r2
 8002722:	b299      	uxth	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_PCD_EP_Open+0x5a4>)
 8002734:	430b      	orrs	r3, r1
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d017      	beq.n	8002784 <HAL_PCD_EP_Open+0x4fc>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29a      	uxth	r2, r3
 8002766:	f640 730f 	movw	r3, #3855	; 0xf0f
 800276a:	4013      	ands	r3, r2
 800276c:	b299      	uxth	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	441a      	add	r2, r3
 800277c:	4b2c      	ldr	r3, [pc, #176]	; (8002830 <HAL_PCD_EP_Open+0x5a8>)
 800277e:	430b      	orrs	r3, r1
 8002780:	b29b      	uxth	r3, r3
 8002782:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	f640 730f 	movw	r3, #3855	; 0xf0f
 800279a:	4013      	ands	r3, r2
 800279c:	b299      	uxth	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_PCD_EP_Open+0x5a8>)
 80027ae:	430b      	orrs	r3, r1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	b29c      	uxth	r4, r3
 80027d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027d4:	b29c      	uxth	r4, r3
 80027d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027da:	b29c      	uxth	r4, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_PCD_EP_Open+0x5ac>)
 80027ec:	4323      	orrs	r3, r4
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280c:	b29c      	uxth	r4, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_PCD_EP_Open+0x5ac>)
 800281e:	4323      	orrs	r3, r4
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
 8002824:	e09c      	b.n	8002960 <HAL_PCD_EP_Open+0x6d8>
 8002826:	bf00      	nop
 8002828:	ffff8180 	.word	0xffff8180
 800282c:	ffffc080 	.word	0xffffc080
 8002830:	ffff80c0 	.word	0xffff80c0
 8002834:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <HAL_PCD_EP_Open+0x5fa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29a      	uxth	r2, r3
 8002864:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002868:	4013      	ands	r3, r2
 800286a:	b299      	uxth	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_PCD_EP_Open+0x6ec>)
 800287c:	430b      	orrs	r3, r1
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_PCD_EP_Open+0x644>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f640 730f 	movw	r3, #3855	; 0xf0f
 80028b2:	4013      	ands	r3, r2
 80028b4:	b299      	uxth	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_PCD_EP_Open+0x6f0>)
 80028c6:	430b      	orrs	r3, r1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	f640 730f 	movw	r3, #3855	; 0xf0f
 80028e2:	4013      	ands	r3, r2
 80028e4:	b299      	uxth	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	441a      	add	r2, r3
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_PCD_EP_Open+0x6ec>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002916:	b29c      	uxth	r4, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_PCD_EP_Open+0x6f4>)
 8002928:	4323      	orrs	r3, r4
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002948:	b29c      	uxth	r4, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	441a      	add	r2, r3
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_PCD_EP_Open+0x6f4>)
 800295a:	4323      	orrs	r3, r4
 800295c:	b29b      	uxth	r3, r3
 800295e:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8002968:	7c7b      	ldrb	r3, [r7, #17]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc90      	pop	{r4, r7}
 8002972:	4770      	bx	lr
 8002974:	ffffc080 	.word	0xffffc080
 8002978:	ffff80c0 	.word	0xffff80c0
 800297c:	ffff8080 	.word	0xffff8080

08002980 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002980:	b490      	push	{r4, r7}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800298c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0b      	bge.n	80029ac <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3328      	adds	r3, #40	; 0x28
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e00c      	b.n	80029c6 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	09db      	lsrs	r3, r3, #7
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_PCD_EP_Close+0x70>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e1c4      	b.n	8002d7a <HAL_PCD_EP_Close+0x3fa>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  if (ep->doublebuffer == 0U) 
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	7a9b      	ldrb	r3, [r3, #10]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 8082 	bne.w	8002b06 <HAL_PCD_EP_Close+0x186>
  {
    if (ep->is_in)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d03e      	beq.n	8002a88 <HAL_PCD_EP_Close+0x108>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_PCD_EP_Close+0xd4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b299      	uxth	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_PCD_EP_Close+0x2bc>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6e:	b29c      	uxth	r4, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <HAL_PCD_EP_Close+0x2c0>)
 8002a80:	4323      	orrs	r3, r4
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8013      	strh	r3, [r2, #0]
 8002a86:	e173      	b.n	8002d70 <HAL_PCD_EP_Close+0x3f0>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <HAL_PCD_EP_Close+0x152>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b299      	uxth	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_PCD_EP_Close+0x2c4>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	b29c      	uxth	r4, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_PCD_EP_Close+0x2c0>)
 8002afe:	4323      	orrs	r3, r4
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	8013      	strh	r3, [r2, #0]
 8002b04:	e134      	b.n	8002d70 <HAL_PCD_EP_Close+0x3f0>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 809c 	bne.w	8002c48 <HAL_PCD_EP_Close+0x2c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <HAL_PCD_EP_Close+0x1da>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b40:	4013      	ands	r3, r2
 8002b42:	b299      	uxth	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <HAL_PCD_EP_Close+0x2c4>)
 8002b54:	430b      	orrs	r3, r1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_PCD_EP_Close+0x224>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b299      	uxth	r1, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	441a      	add	r2, r3
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_PCD_EP_Close+0x2bc>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	441a      	add	r2, r3
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_PCD_EP_Close+0x2bc>)
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	b29c      	uxth	r4, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_PCD_EP_Close+0x2c0>)
 8002c00:	4323      	orrs	r3, r4
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c20:	b29c      	uxth	r4, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_PCD_EP_Close+0x2c0>)
 8002c32:	4323      	orrs	r3, r4
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	8013      	strh	r3, [r2, #0]
 8002c38:	e09a      	b.n	8002d70 <HAL_PCD_EP_Close+0x3f0>
 8002c3a:	bf00      	nop
 8002c3c:	ffff80c0 	.word	0xffff80c0
 8002c40:	ffff8080 	.word	0xffff8080
 8002c44:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <HAL_PCD_EP_Close+0x312>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b299      	uxth	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_PCD_EP_Close+0x404>)
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_PCD_EP_Close+0x35c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_PCD_EP_Close+0x408>)
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	441a      	add	r2, r3
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_PCD_EP_Close+0x404>)
 8002d06:	430b      	orrs	r3, r1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d26:	b29c      	uxth	r4, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_PCD_EP_Close+0x40c>)
 8002d38:	4323      	orrs	r3, r4
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d58:	b29c      	uxth	r4, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_PCD_EP_Close+0x40c>)
 8002d6a:	4323      	orrs	r3, r4
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc90      	pop	{r4, r7}
 8002d82:	4770      	bx	lr
 8002d84:	ffffc080 	.word	0xffffc080
 8002d88:	ffff80c0 	.word	0xffff80c0
 8002d8c:	ffff8080 	.word	0xffff8080

08002d90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d90:	b490      	push	{r4, r7}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	701a      	strb	r2, [r3, #0]

  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d909      	bls.n	8002dfe <HAL_PCD_EP_Receive+0x6e>
  {
    len=ep->maxpacket;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	1ad2      	subs	r2, r2, r3
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	e005      	b.n	8002e0a <HAL_PCD_EP_Receive+0x7a>
  }
  else
  {
    len=ep->xfer_len;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	7a9b      	ldrb	r3, [r3, #10]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13c      	bne.n	8002e8c <HAL_PCD_EP_Receive+0xfc>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	3306      	adds	r3, #6
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e3c:	d915      	bls.n	8002e6a <HAL_PCD_EP_Receive+0xda>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	83fb      	strh	r3, [r7, #30]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_EP_Receive+0xc4>
 8002e4e:	8bfb      	ldrh	r3, [r7, #30]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	83fb      	strh	r3, [r7, #30]
 8002e54:	8bfb      	ldrh	r3, [r7, #30]
 8002e56:	029b      	lsls	r3, r3, #10
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	e06a      	b.n	8002f40 <HAL_PCD_EP_Receive+0x1b0>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	83fb      	strh	r3, [r7, #30]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_PCD_EP_Receive+0xf0>
 8002e7a:	8bfb      	ldrh	r3, [r7, #30]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	83fb      	strh	r3, [r7, #30]
 8002e80:	8bfb      	ldrh	r3, [r7, #30]
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	801a      	strh	r2, [r3, #0]
 8002e8a:	e059      	b.n	8002f40 <HAL_PCD_EP_Receive+0x1b0>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13c      	bne.n	8002f0e <HAL_PCD_EP_Receive+0x17e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3306      	adds	r3, #6
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	461a      	mov	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ebe:	d915      	bls.n	8002eec <HAL_PCD_EP_Receive+0x15c>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	83bb      	strh	r3, [r7, #28]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <HAL_PCD_EP_Receive+0x146>
 8002ed0:	8bbb      	ldrh	r3, [r7, #28]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	83bb      	strh	r3, [r7, #28]
 8002ed6:	8bbb      	ldrh	r3, [r7, #28]
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	801a      	strh	r2, [r3, #0]
 8002eea:	e029      	b.n	8002f40 <HAL_PCD_EP_Receive+0x1b0>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	83bb      	strh	r3, [r7, #28]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_PCD_EP_Receive+0x172>
 8002efc:	8bbb      	ldrh	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	83bb      	strh	r3, [r7, #28]
 8002f02:	8bbb      	ldrh	r3, [r7, #28]
 8002f04:	029b      	lsls	r3, r3, #10
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	801a      	strh	r2, [r3, #0]
 8002f0c:	e018      	b.n	8002f40 <HAL_PCD_EP_Receive+0x1b0>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d114      	bne.n	8002f40 <HAL_PCD_EP_Receive+0x1b0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	b29c      	uxth	r4, r3
 8002f5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002f60:	b29c      	uxth	r4, r3
 8002f62:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002f66:	b29c      	uxth	r4, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PCD_EP_Receive+0x1fc>)
 8002f78:	4323      	orrs	r3, r4
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc90      	pop	{r4, r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	ffff8080 	.word	0xffff8080

08002f90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3328      	adds	r3, #40	; 0x28
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300c:	b2da      	uxtb	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	701a      	strb	r2, [r3, #0]

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	429a      	cmp	r2, r3
 800301c:	d909      	bls.n	8003032 <HAL_PCD_EP_Transmit+0x6e>
  {
    len=ep->maxpacket;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	615a      	str	r2, [r3, #20]
 8003030:	e005      	b.n	800303e <HAL_PCD_EP_Transmit+0x7a>
  }
  else
  {  
    len=ep->xfer_len;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2200      	movs	r2, #0
 800303c:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	7a9b      	ldrb	r3, [r3, #10]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11f      	bne.n	8003086 <HAL_PCD_EP_Transmit+0xc2>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6919      	ldr	r1, [r3, #16]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	889a      	ldrh	r2, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f000 fa5d 	bl	8003514 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	3302      	adds	r3, #2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	b292      	uxth	r2, r2
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	e055      	b.n	8003132 <HAL_PCD_EP_Transmit+0x16e>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d103      	bne.n	80030a8 <HAL_PCD_EP_Transmit+0xe4>
    {
      pmabuffer = ep->pmaaddr1;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	891b      	ldrh	r3, [r3, #8]
 80030a4:	82fb      	strh	r3, [r7, #22]
 80030a6:	e002      	b.n	80030ae <HAL_PCD_EP_Transmit+0xea>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	88db      	ldrh	r3, [r3, #6]
 80030ac:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	8afa      	ldrh	r2, [r7, #22]
 80030bc:	f000 fa2a 	bl	8003514 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d118      	bne.n	80030fa <HAL_PCD_EP_Transmit+0x136>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f640 730f 	movw	r3, #3855	; 0xf0f
 80030de:	4013      	ands	r3, r2
 80030e0:	b299      	uxth	r1, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_PCD_EP_Transmit+0x1b8>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	8013      	strh	r3, [r2, #0]
 80030f8:	e01b      	b.n	8003132 <HAL_PCD_EP_Transmit+0x16e>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d117      	bne.n	8003132 <HAL_PCD_EP_Transmit+0x16e>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29a      	uxth	r2, r3
 8003114:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003118:	4013      	ands	r3, r2
 800311a:	b299      	uxth	r1, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_PCD_EP_Transmit+0x1bc>)
 800312c:	430b      	orrs	r3, r1
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	b29c      	uxth	r4, r3
 800314e:	f084 0310 	eor.w	r3, r4, #16
 8003152:	b29c      	uxth	r4, r3
 8003154:	f084 0320 	eor.w	r3, r4, #32
 8003158:	b29c      	uxth	r4, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_PCD_EP_Transmit+0x1c0>)
 800316a:	4323      	orrs	r3, r4
 800316c:	b29b      	uxth	r3, r3
 800316e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}
 800317a:	bf00      	nop
 800317c:	ffff80c0 	.word	0xffff80c0
 8003180:	ffffc080 	.word	0xffffc080
 8003184:	ffff8080 	.word	0xffff8080

08003188 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003188:	b490      	push	{r4, r7}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_PCD_EP_SetStall+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e092      	b.n	80032c8 <HAL_PCD_EP_SetStall+0x140>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  if ((0x80U & ep_addr) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0b      	bge.n	80031ca <HAL_PCD_EP_SetStall+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e00a      	b.n	80031e0 <HAL_PCD_EP_SetStall+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80031f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	09db      	lsrs	r3, r3, #7
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d11c      	bne.n	8003244 <HAL_PCD_EP_SetStall+0xbc>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003220:	401c      	ands	r4, r3
 8003222:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003226:	f084 0410 	eor.w	r4, r4, #16
 800322a:	b2a1      	uxth	r1, r4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_PCD_EP_SetStall+0x14c>)
 800323c:	430b      	orrs	r3, r1
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
 8003242:	e03c      	b.n	80032be <HAL_PCD_EP_SetStall+0x136>
  }
  else
  {
    if (ep->is_in)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01c      	beq.n	8003286 <HAL_PCD_EP_SetStall+0xfe>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003266:	b29c      	uxth	r4, r3
 8003268:	f084 0310 	eor.w	r3, r4, #16
 800326c:	b29c      	uxth	r4, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_PCD_EP_SetStall+0x14c>)
 800327e:	4323      	orrs	r3, r4
 8003280:	b29b      	uxth	r3, r3
 8003282:	8013      	strh	r3, [r2, #0]
 8003284:	e01b      	b.n	80032be <HAL_PCD_EP_SetStall+0x136>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800329c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a0:	b29c      	uxth	r4, r3
 80032a2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032a6:	b29c      	uxth	r4, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_PCD_EP_SetStall+0x14c>)
 80032b8:	4323      	orrs	r3, r4
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc90      	pop	{r4, r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	ffff8080 	.word	0xffff8080

080032d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d8:	b490      	push	{r4, r7}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80032e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da0b      	bge.n	8003304 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3328      	adds	r3, #40	; 0x28
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e00a      	b.n	800331a <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800332c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	09db      	lsrs	r3, r3, #7
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_PCD_EP_ClrStall+0x72>
 8003346:	2302      	movs	r3, #2
 8003348:	e095      	b.n	8003476 <HAL_PCD_EP_ClrStall+0x19e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if (ep->is_in)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d044      	beq.n	80033e4 <HAL_PCD_EP_ClrStall+0x10c>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_PCD_EP_ClrStall+0xcc>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29a      	uxth	r2, r3
 8003386:	f640 730f 	movw	r3, #3855	; 0xf0f
 800338a:	4013      	ands	r3, r2
 800338c:	b299      	uxth	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	4b38      	ldr	r3, [pc, #224]	; (8003480 <HAL_PCD_EP_ClrStall+0x1a8>)
 800339e:	430b      	orrs	r3, r1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033be:	b29c      	uxth	r4, r3
 80033c0:	f084 0310 	eor.w	r3, r4, #16
 80033c4:	b29c      	uxth	r4, r3
 80033c6:	f084 0320 	eor.w	r3, r4, #32
 80033ca:	b29c      	uxth	r4, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_PCD_EP_ClrStall+0x1ac>)
 80033dc:	4323      	orrs	r3, r4
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8013      	strh	r3, [r2, #0]
 80033e2:	e043      	b.n	800346c <HAL_PCD_EP_ClrStall+0x194>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d017      	beq.n	800342e <HAL_PCD_EP_ClrStall+0x156>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29a      	uxth	r2, r3
 8003410:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003414:	4013      	ands	r3, r2
 8003416:	b299      	uxth	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_PCD_EP_ClrStall+0x1b0>)
 8003428:	430b      	orrs	r3, r1
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	b29c      	uxth	r4, r3
 800344a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800344e:	b29c      	uxth	r4, r3
 8003450:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003454:	b29c      	uxth	r4, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_PCD_EP_ClrStall+0x1ac>)
 8003466:	4323      	orrs	r3, r4
 8003468:	b29b      	uxth	r3, r3
 800346a:	8013      	strh	r3, [r2, #0]
  }
  __HAL_UNLOCK(hpcd); 
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bc90      	pop	{r4, r7}
 800347e:	4770      	bx	lr
 8003480:	ffff80c0 	.word	0xffff80c0
 8003484:	ffff8080 	.word	0xffff8080
 8003488:	ffffc080 	.word	0xffffc080

0800348c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	4613      	mov	r3, r2
 800349c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3328      	adds	r3, #40	; 0x28
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e00a      	b.n	80034d8 <HAL_PCDEx_PMAConfig+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c2:	897a      	ldrh	r2, [r7, #10]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_PCDEx_PMAConfig+0x62>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	809a      	strh	r2, [r3, #4]
 80034ec:	e00b      	b.n	8003506 <HAL_PCDEx_PMAConfig+0x7a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2201      	movs	r2, #1
 80034f2:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b29a      	uxth	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003514:	b480      	push	{r7}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	460b      	mov	r3, r1
 8003524:	80fb      	strh	r3, [r7, #6]
 8003526:	4613      	mov	r3, r2
 8003528:	80bb      	strh	r3, [r7, #4]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800352a:	88bb      	ldrh	r3, [r7, #4]
 800352c:	3301      	adds	r3, #1
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003540:	623b      	str	r3, [r7, #32]
  
  for (i = n; i != 0; i--)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e01d      	b.n	8003584 <PCD_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	623a      	str	r2, [r7, #32]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	b292      	uxth	r2, r2
 8003570:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	3302      	adds	r3, #2
 8003576:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	3301      	adds	r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	3b01      	subs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1de      	bne.n	8003548 <PCD_WritePMA+0x34>
  }
}
 800358a:	bf00      	nop
 800358c:	372c      	adds	r7, #44	; 0x2c
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003596:	b480      	push	{r7}
 8003598:	b089      	sub	sp, #36	; 0x24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	4611      	mov	r1, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	460b      	mov	r3, r1
 80035a6:	80fb      	strh	r3, [r7, #6]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	461a      	mov	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c2:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e017      	b.n	80035fa <PCD_ReadPMA+0x64>
  {
    temp = *pdwVal++;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	61ba      	str	r2, [r7, #24]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	0a19      	lsrs	r1, r3, #8
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	60ba      	str	r2, [r7, #8]
 80035ea:	b2ca      	uxtb	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
    pdwVal++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0U; i--)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e4      	bne.n	80035ca <PCD_ReadPMA+0x34>
  }

  if (wNBytes % 2)
 8003600:	88bb      	ldrh	r3, [r7, #4]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1c9a      	adds	r2, r3, #2
 8003610:	61ba      	str	r2, [r7, #24]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
  }
}
 8003622:	bf00      	nop
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003636:	af00      	add	r7, sp, #0
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f000 beda 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 816e 	beq.w	8003936 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800365a:	4bb5      	ldr	r3, [pc, #724]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b04      	cmp	r3, #4
 8003664:	d00c      	beq.n	8003680 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003666:	4bb2      	ldr	r3, [pc, #712]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b08      	cmp	r3, #8
 8003670:	d15a      	bne.n	8003728 <HAL_RCC_OscConfig+0xf8>
 8003672:	4baf      	ldr	r3, [pc, #700]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d153      	bne.n	8003728 <HAL_RCC_OscConfig+0xf8>
 8003680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003684:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003694:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0x82>
 80036ac:	4ba0      	ldr	r3, [pc, #640]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0xae>
 80036b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80036c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036ce:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036da:	4b95      	ldr	r3, [pc, #596]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80036e6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80036ea:	fa92 f2a2 	rbit	r2, r2
 80036ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80036f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80036f6:	fab2 f282 	clz	r2, r2
 80036fa:	b252      	sxtb	r2, r2
 80036fc:	f042 0220 	orr.w	r2, r2, #32
 8003700:	b252      	sxtb	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 810f 	beq.w	8003934 <HAL_RCC_OscConfig+0x304>
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f040 8109 	bne.w	8003934 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f000 be6b 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x112>
 8003734:	4b7e      	ldr	r3, [pc, #504]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7d      	ldr	r2, [pc, #500]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e030      	b.n	80037a4 <HAL_RCC_OscConfig+0x174>
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10c      	bne.n	8003766 <HAL_RCC_OscConfig+0x136>
 800374c:	4b78      	ldr	r3, [pc, #480]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a77      	ldr	r2, [pc, #476]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b75      	ldr	r3, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a74      	ldr	r2, [pc, #464]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e01e      	b.n	80037a4 <HAL_RCC_OscConfig+0x174>
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x15c>
 8003772:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6b      	ldr	r2, [pc, #428]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x174>
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a67      	ldr	r2, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a64      	ldr	r2, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037a4:	4b62      	ldr	r3, [pc, #392]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f023 020f 	bic.w	r2, r3, #15
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	495f      	ldr	r1, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d05a      	beq.n	8003878 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fc fd2f 	bl	8000224 <HAL_GetTick>
 80037c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fc fd2a 	bl	8000224 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d902      	bls.n	80037e2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	f000 be0e 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
 80037e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80037f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0x1e4>
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0x210>
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800382c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003830:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800383c:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003844:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003848:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800384c:	fa92 f2a2 	rbit	r2, r2
 8003850:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8003854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003858:	fab2 f282 	clz	r2, r2
 800385c:	b252      	sxtb	r2, r2
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	b252      	sxtb	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0aa      	beq.n	80037cc <HAL_RCC_OscConfig+0x19c>
 8003876:	e05e      	b.n	8003936 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fc fcd4 	bl	8000224 <HAL_GetTick>
 800387c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003882:	f7fc fccf 	bl	8000224 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d902      	bls.n	8003898 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	f000 bdb3 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
 8003898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800389c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80038ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_OscConfig+0x29a>
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x2c6>
 80038ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80038de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCC_OscConfig+0x300>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80038fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800390a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b252      	sxtb	r2, r2
 8003914:	f042 0220 	orr.w	r2, r2, #32
 8003918:	b252      	sxtb	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1aa      	bne.n	8003882 <HAL_RCC_OscConfig+0x252>
 800392c:	e003      	b.n	8003936 <HAL_RCC_OscConfig+0x306>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8170 	beq.w	8003c26 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003946:	4bd0      	ldr	r3, [pc, #832]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003952:	4bcd      	ldr	r3, [pc, #820]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b08      	cmp	r3, #8
 800395c:	d16d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x40a>
 800395e:	4bca      	ldr	r3, [pc, #808]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d167      	bne.n	8003a3a <HAL_RCC_OscConfig+0x40a>
 800396a:	2302      	movs	r3, #2
 800396c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800397c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_RCC_OscConfig+0x36a>
 8003994:	4bbc      	ldr	r3, [pc, #752]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	e013      	b.n	80039c2 <HAL_RCC_OscConfig+0x392>
 800399a:	2302      	movs	r3, #2
 800399c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039ac:	2302      	movs	r3, #2
 80039ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039be:	4bb2      	ldr	r3, [pc, #712]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2202      	movs	r2, #2
 80039c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80039c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80039cc:	fa92 f2a2 	rbit	r2, r2
 80039d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80039d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b252      	sxtb	r2, r2
 80039de:	f042 0220 	orr.w	r2, r2, #32
 80039e2:	b252      	sxtb	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3d6>
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f000 bcfc 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4ba0      	ldr	r3, [pc, #640]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6959      	ldr	r1, [r3, #20]
 8003a14:	23f8      	movs	r3, #248	; 0xf8
 8003a16:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8003a26:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	4995      	ldr	r1, [pc, #596]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a38:	e0f5      	b.n	8003c26 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8085 	beq.w	8003b50 <HAL_RCC_OscConfig+0x520>
 8003a46:	2301      	movs	r3, #1
 8003a48:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8003a58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fc fbd8 	bl	8000224 <HAL_GetTick>
 8003a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fc fbd3 	bl	8000224 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d902      	bls.n	8003a90 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	f000 bcb7 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8003aa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x490>
 8003aba:	4b73      	ldr	r3, [pc, #460]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e013      	b.n	8003ae8 <HAL_RCC_OscConfig+0x4b8>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ad8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003adc:	fa93 f3a3 	rbit	r3, r3
 8003ae0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003aee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003af2:	fa92 f2a2 	rbit	r2, r2
 8003af6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8003afa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003afe:	fab2 f282 	clz	r2, r2
 8003b02:	b252      	sxtb	r2, r2
 8003b04:	f042 0220 	orr.w	r2, r2, #32
 8003b08:	b252      	sxtb	r2, r2
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f002 021f 	and.w	r2, r2, #31
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f202 	lsl.w	r2, r1, r2
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ae      	beq.n	8003a7a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b5a      	ldr	r3, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6959      	ldr	r1, [r3, #20]
 8003b2a:	23f8      	movs	r3, #248	; 0xf8
 8003b2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8003b3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	494f      	ldr	r1, [pc, #316]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
 8003b4e:	e06a      	b.n	8003c26 <HAL_RCC_OscConfig+0x5f6>
 8003b50:	2301      	movs	r3, #1
 8003b52:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8003b62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fc fb53 	bl	8000224 <HAL_GetTick>
 8003b7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b84:	f7fc fb4e 	bl	8000224 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d902      	bls.n	8003b9a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	f000 bc32 	b.w	80043fe <HAL_RCC_OscConfig+0xdce>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8003bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_OscConfig+0x59a>
 8003bc4:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e013      	b.n	8003bf2 <HAL_RCC_OscConfig+0x5c2>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003be2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x658>)
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003bf8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003bfc:	fa92 f2a2 	rbit	r2, r2
 8003c00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8003c04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c08:	fab2 f282 	clz	r2, r2
 8003c0c:	b252      	sxtb	r2, r2
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	b252      	sxtb	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ae      	bne.n	8003b84 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80d8 	beq.w	8003de6 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d067      	beq.n	8003d10 <HAL_RCC_OscConfig+0x6e0>
 8003c40:	2301      	movs	r3, #1
 8003c42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8003c52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x65c>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	2301      	movs	r3, #1
 8003c66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fc fadc 	bl	8000224 <HAL_GetTick>
 8003c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fc fad7 	bl	8000224 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d906      	bls.n	8003c90 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e3bb      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	10908120 	.word	0x10908120
 8003c90:	2302      	movs	r3, #2
 8003c92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cba:	2202      	movs	r2, #2
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ccc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4ba5      	ldr	r3, [pc, #660]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	6019      	str	r1, [r3, #0]
 8003cda:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	fa93 f1a3 	rbit	r1, r3
 8003ce4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ce8:	6019      	str	r1, [r3, #0]
  return(result);
 8003cea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0b1      	beq.n	8003c72 <HAL_RCC_OscConfig+0x642>
 8003d0e:	e06a      	b.n	8003de6 <HAL_RCC_OscConfig+0x7b6>
 8003d10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	fa93 f2a3 	rbit	r2, r3
 8003d22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d26:	601a      	str	r2, [r3, #0]
  return(result);
 8003d28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b8c      	ldr	r3, [pc, #560]	; (8003f68 <HAL_RCC_OscConfig+0x938>)
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fc fa70 	bl	8000224 <HAL_GetTick>
 8003d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e009      	b.n	8003d5e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fc fa6b 	bl	8000224 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e34f      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8003d5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d62:	2202      	movs	r2, #2
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fa93 f2a3 	rbit	r2, r3
 8003d70:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d92:	2202      	movs	r2, #2
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003da4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da6:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003daa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dae:	2102      	movs	r1, #2
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f1a3 	rbit	r1, r3
 8003dbc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dc0:	6019      	str	r1, [r3, #0]
  return(result);
 8003dc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1b1      	bne.n	8003d4a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8159 	beq.w	80040a8 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d112      	bne.n	8003e2e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4a55      	ldr	r2, [pc, #340]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	61d3      	str	r3, [r2, #28]
 8003e14:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCC_OscConfig+0x93c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x93c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_RCC_OscConfig+0x93c>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fc f9ed 	bl	8000224 <HAL_GetTick>
 8003e4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	e009      	b.n	8003e64 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fc f9e8 	bl	8000224 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e2cc      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x93c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x858>
 8003e7a:	4b3a      	ldr	r3, [pc, #232]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a39      	ldr	r2, [pc, #228]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	e02f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x8b8>
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x87c>
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4a33      	ldr	r2, [pc, #204]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6213      	str	r3, [r2, #32]
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4a30      	ldr	r2, [pc, #192]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	6213      	str	r3, [r2, #32]
 8003eaa:	e01d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x8b8>
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x8a0>
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x8b8>
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06b      	beq.n	8003fca <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fc f997 	bl	8000224 <HAL_GetTick>
 8003ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fc f992 	bl	8000224 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e274      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8003f14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f18:	2202      	movs	r2, #2
 8003f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	fa93 f2a3 	rbit	r2, r3
 8003f26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f42:	601a      	str	r2, [r3, #0]
  return(result);
 8003f44:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d108      	bne.n	8003f70 <HAL_RCC_OscConfig+0x940>
 8003f5e:	4b01      	ldr	r3, [pc, #4]	; (8003f64 <HAL_RCC_OscConfig+0x934>)
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	e013      	b.n	8003f8c <HAL_RCC_OscConfig+0x95c>
 8003f64:	40021000 	.word	0x40021000
 8003f68:	10908120 	.word	0x10908120
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	4bbb      	ldr	r3, [pc, #748]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f90:	2102      	movs	r1, #2
 8003f92:	6011      	str	r1, [r2, #0]
 8003f94:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	fa92 f1a2 	rbit	r1, r2
 8003f9e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fa2:	6011      	str	r1, [r2, #0]
  return(result);
 8003fa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	fab2 f282 	clz	r2, r2
 8003fae:	b252      	sxtb	r2, r2
 8003fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb4:	b252      	sxtb	r2, r2
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f002 021f 	and.w	r2, r2, #31
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d099      	beq.n	8003efc <HAL_RCC_OscConfig+0x8cc>
 8003fc8:	e064      	b.n	8004094 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fc f92b 	bl	8000224 <HAL_GetTick>
 8003fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fc f926 	bl	8000224 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e208      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8003fec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004008:	2202      	movs	r2, #2
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800401a:	601a      	str	r2, [r3, #0]
  return(result);
 800401c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004020:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d102      	bne.n	800403c <HAL_RCC_OscConfig+0xa0c>
 8004036:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	e00d      	b.n	8004058 <HAL_RCC_OscConfig+0xa28>
 800403c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004040:	2202      	movs	r2, #2
 8004042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	fa93 f2a3 	rbit	r2, r3
 800404e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800405c:	2102      	movs	r1, #2
 800405e:	6011      	str	r1, [r2, #0]
 8004060:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	fa92 f1a2 	rbit	r1, r2
 800406a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800406e:	6011      	str	r1, [r2, #0]
  return(result);
 8004070:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	fab2 f282 	clz	r2, r2
 800407a:	b252      	sxtb	r2, r2
 800407c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004080:	b252      	sxtb	r2, r2
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	f002 021f 	and.w	r2, r2, #31
 8004088:	2101      	movs	r1, #1
 800408a:	fa01 f202 	lsl.w	r2, r1, r2
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d19f      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004094:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004098:	2b01      	cmp	r3, #1
 800409a:	d105      	bne.n	80040a8 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409c:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4a75      	ldr	r2, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 80040a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 81a4 	beq.w	80043fc <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	f000 819b 	beq.w	80043f8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	f040 8113 	bne.w	80042f4 <HAL_RCC_OscConfig+0xcc4>
 80040ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040e6:	601a      	str	r2, [r3, #0]
  return(result);
 80040e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fc f88f 	bl	8000224 <HAL_GetTick>
 8004106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410a:	e009      	b.n	8004120 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fc f88a 	bl	8000224 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e16e      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8004120:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004138:	601a      	str	r2, [r3, #0]
  return(result);
 800413a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800413e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_RCC_OscConfig+0xb2a>
 8004154:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	e01b      	b.n	8004192 <HAL_RCC_OscConfig+0xb62>
 800415a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800415e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	fa93 f2a3 	rbit	r2, r3
 800416e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004196:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800419a:	6011      	str	r1, [r2, #0]
 800419c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	fa92 f1a2 	rbit	r1, r2
 80041a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041aa:	6011      	str	r1, [r2, #0]
  return(result);
 80041ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	fab2 f282 	clz	r2, r2
 80041b6:	b252      	sxtb	r2, r2
 80041b8:	f042 0220 	orr.w	r2, r2, #32
 80041bc:	b252      	sxtb	r2, r2
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	f002 021f 	and.w	r2, r2, #31
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d19d      	bne.n	800410c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	4924      	ldr	r1, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	fa93 f2a3 	rbit	r2, r3
 8004200:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004204:	601a      	str	r2, [r3, #0]
  return(result);
 8004206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800420a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004214:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	461a      	mov	r2, r3
 800421c:	2301      	movs	r3, #1
 800421e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fc f800 	bl	8000224 <HAL_GetTick>
 8004224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	e009      	b.n	800423e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fb fffb 	bl	8000224 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0df      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 800423e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004248:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	fa93 f2a3 	rbit	r2, r3
 8004252:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004256:	601a      	str	r2, [r3, #0]
  return(result);
 8004258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800425c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d104      	bne.n	800427c <HAL_RCC_OscConfig+0xc4c>
 8004272:	4b01      	ldr	r3, [pc, #4]	; (8004278 <HAL_RCC_OscConfig+0xc48>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xc84>
 8004278:	40021000 	.word	0x40021000
 800427c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	fa93 f2a3 	rbit	r2, r3
 8004290:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800429a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	4b55      	ldr	r3, [pc, #340]	; (8004408 <HAL_RCC_OscConfig+0xdd8>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	fa92 f1a2 	rbit	r1, r2
 80042c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042cc:	6011      	str	r1, [r2, #0]
  return(result);
 80042ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	fab2 f282 	clz	r2, r2
 80042d8:	b252      	sxtb	r2, r2
 80042da:	f042 0220 	orr.w	r2, r2, #32
 80042de:	b252      	sxtb	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f002 021f 	and.w	r2, r2, #31
 80042e6:	2101      	movs	r1, #1
 80042e8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d09b      	beq.n	800422a <HAL_RCC_OscConfig+0xbfa>
 80042f2:	e083      	b.n	80043fc <HAL_RCC_OscConfig+0xdcc>
 80042f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800430c:	601a      	str	r2, [r3, #0]
  return(result);
 800430e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004312:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800431c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	461a      	mov	r2, r3
 8004324:	2300      	movs	r3, #0
 8004326:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fb ff7c 	bl	8000224 <HAL_GetTick>
 800432c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004330:	e009      	b.n	8004346 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004332:	f7fb ff77 	bl	8000224 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e05b      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
 8004346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800434a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800434e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	fa93 f2a3 	rbit	r2, r3
 800435a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800435e:	601a      	str	r2, [r3, #0]
  return(result);
 8004360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_RCC_OscConfig+0xd50>
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0xdd8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	e01b      	b.n	80043b8 <HAL_RCC_OscConfig+0xd88>
 8004380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	fa93 f2a3 	rbit	r2, r3
 8004394:	f107 0320 	add.w	r3, r7, #32
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f107 031c 	add.w	r3, r7, #28
 800439e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fa93 f2a3 	rbit	r2, r3
 80043ae:	f107 0318 	add.w	r3, r7, #24
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCC_OscConfig+0xdd8>)
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f107 0214 	add.w	r2, r7, #20
 80043bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	f107 0214 	add.w	r2, r7, #20
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	fa92 f1a2 	rbit	r1, r2
 80043cc:	f107 0210 	add.w	r2, r7, #16
 80043d0:	6011      	str	r1, [r2, #0]
  return(result);
 80043d2:	f107 0210 	add.w	r2, r7, #16
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b252      	sxtb	r2, r2
 80043de:	f042 0220 	orr.w	r2, r2, #32
 80043e2:	b252      	sxtb	r2, r2
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	f002 021f 	and.w	r2, r2, #31
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f202 	lsl.w	r2, r1, r2
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d19d      	bne.n	8004332 <HAL_RCC_OscConfig+0xd02>
 80043f6:	e001      	b.n	80043fc <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000

0800440c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b09e      	sub	sp, #120	; 0x78
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e164      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b92      	ldr	r3, [pc, #584]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d910      	bls.n	8004454 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	498d      	ldr	r1, [pc, #564]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b8b      	ldr	r3, [pc, #556]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e14c      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004460:	4b84      	ldr	r3, [pc, #528]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4981      	ldr	r1, [pc, #516]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80df 	beq.w	800463e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d13d      	bne.n	8004504 <HAL_RCC_ClockConfig+0xf8>
 8004488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800448c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xa6>
 80044ac:	4b71      	ldr	r3, [pc, #452]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	e00f      	b.n	80044d2 <HAL_RCC_ClockConfig+0xc6>
 80044b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	667b      	str	r3, [r7, #100]	; 0x64
 80044c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
 80044c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ce:	4b69      	ldr	r3, [pc, #420]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80044d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044da:	fa92 f2a2 	rbit	r2, r2
 80044de:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80044e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044e2:	fab2 f282 	clz	r2, r2
 80044e6:	b252      	sxtb	r2, r2
 80044e8:	f042 0220 	orr.w	r2, r2, #32
 80044ec:	b252      	sxtb	r2, r2
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	f002 021f 	and.w	r2, r2, #31
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f202 	lsl.w	r2, r1, r2
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d17d      	bne.n	80045fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0f4      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d13d      	bne.n	8004588 <HAL_RCC_ClockConfig+0x17c>
 800450c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004510:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_ClockConfig+0x12a>
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e00f      	b.n	8004556 <HAL_RCC_ClockConfig+0x14a>
 8004536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
 8004544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004552:	4b48      	ldr	r3, [pc, #288]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455a:	63ba      	str	r2, [r7, #56]	; 0x38
 800455c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8004564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b252      	sxtb	r2, r2
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	b252      	sxtb	r2, r2
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	f002 021f 	and.w	r2, r2, #31
 8004578:	2101      	movs	r1, #1
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d13b      	bne.n	80045fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b2      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
 8004588:	2302      	movs	r3, #2
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x1a4>
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	e00d      	b.n	80045cc <HAL_RCC_ClockConfig+0x1c0>
 80045b0:	2302      	movs	r3, #2
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
 80045bc:	2302      	movs	r3, #2
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2202      	movs	r2, #2
 80045ce:	61ba      	str	r2, [r7, #24]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	fa92 f2a2 	rbit	r2, r2
 80045d6:	617a      	str	r2, [r7, #20]
  return(result);
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	fab2 f282 	clz	r2, r2
 80045de:	b252      	sxtb	r2, r2
 80045e0:	f042 0220 	orr.w	r2, r2, #32
 80045e4:	b252      	sxtb	r2, r2
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	f002 021f 	and.w	r2, r2, #31
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e078      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 0203 	bic.w	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	491a      	ldr	r1, [pc, #104]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460e:	f7fb fe09 	bl	8000224 <HAL_GetTick>
 8004612:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004614:	e00a      	b.n	800462c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004616:	f7fb fe05 	bl	8000224 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e060      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_RCC_ClockConfig+0x268>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 020c 	and.w	r2, r3, #12
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	429a      	cmp	r2, r3
 800463c:	d1eb      	bne.n	8004616 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d215      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 0207 	bic.w	r2, r3, #7
 8004654:	4906      	ldr	r1, [pc, #24]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_RCC_ClockConfig+0x264>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d006      	beq.n	8004678 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_RCC_ClockConfig+0x2e2>
 800466e:	bf00      	nop
 8004670:	40022000 	.word	0x40022000
 8004674:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_RCC_ClockConfig+0x2ec>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4919      	ldr	r1, [pc, #100]	; (80046f8 <HAL_RCC_ClockConfig+0x2ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_RCC_ClockConfig+0x2ec>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4911      	ldr	r1, [pc, #68]	; (80046f8 <HAL_RCC_ClockConfig+0x2ec>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046b6:	f000 f825 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <HAL_RCC_ClockConfig+0x2ec>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046c4:	23f0      	movs	r3, #240	; 0xf0
 80046c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	fa22 f303 	lsr.w	r3, r2, r3
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <HAL_RCC_ClockConfig+0x2f0>)
 80046dc:	5cd3      	ldrb	r3, [r2, r3]
 80046de:	fa21 f303 	lsr.w	r3, r1, r3
 80046e2:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_RCC_ClockConfig+0x2f4>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f004 fc3c 	bl	8008f64 <HAL_InitTick>
  
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3778      	adds	r7, #120	; 0x78
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	08009e04 	.word	0x08009e04
 8004700:	20000118 	.word	0x20000118

08004704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	b08b      	sub	sp, #44	; 0x2c
 8004708:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b04      	cmp	r3, #4
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x30>
 800472e:	2b08      	cmp	r3, #8
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x36>
 8004732:	e03c      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004734:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004736:	623b      	str	r3, [r7, #32]
      break;
 8004738:	e03c      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004740:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004744:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	607b      	str	r3, [r7, #4]
  return(result);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	fab3 f383 	clz	r3, r3
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800475e:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f003 020f 	and.w	r2, r3, #15
 8004766:	230f      	movs	r3, #15
 8004768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	60fb      	str	r3, [r7, #12]
  return(result);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800478c:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	fbb2 f2f3 	udiv	r2, r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e004      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	623b      	str	r3, [r7, #32]
      break;
 80047ac:	e002      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047b0:	623b      	str	r3, [r7, #32]
      break;
 80047b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	372c      	adds	r7, #44	; 0x2c
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	08009de4 	.word	0x08009de4
 80047d0:	08009df4 	.word	0x08009df4
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000118 	.word	0x20000118

080047f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047f6:	f7ff ffef 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047fa:	4601      	mov	r1, r0
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004804:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004808:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	603b      	str	r3, [r7, #0]
  return(result);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x40>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000
 8004830:	08009e14 	.word	0x08009e14

08004834 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	220f      	movs	r2, #15
 8004842:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0203 	and.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_GetClockConfig+0x5c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <HAL_RCC_GetClockConfig+0x60>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0207 	and.w	r2, r3, #7
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40022000 	.word	0x40022000

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b092      	sub	sp, #72	; 0x48
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80d6 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10e      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a49      	ldr	r2, [pc, #292]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	61d3      	str	r3, [r2, #28]
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d118      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f2:	4b41      	ldr	r3, [pc, #260]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fe:	f7fb fc91 	bl	8000224 <HAL_GetTick>
 8004902:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004906:	f7fb fc8d 	bl	8000224 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	; 0x64
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e168      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004924:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8083 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004940:	429a      	cmp	r2, r3
 8004942:	d07b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	2301      	movs	r3, #1
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	461a      	mov	r2, r3
 800498e:	2300      	movs	r3, #0
 8004990:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004996:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04c      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a2:	f7fb fc3f 	bl	8000224 <HAL_GetTick>
 80049a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fb fc3b 	bl	8000224 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e114      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x352>
 80049c0:	2302      	movs	r3, #2
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
 80049cc:	2302      	movs	r3, #2
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80049d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f043 0302 	orr.w	r3, r3, #2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d108      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049ee:	4b01      	ldr	r3, [pc, #4]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	e00d      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
 80049fc:	10908100 	.word	0x10908100
 8004a00:	2302      	movs	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	4b79      	ldr	r3, [pc, #484]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2202      	movs	r2, #2
 8004a12:	613a      	str	r2, [r7, #16]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	fa92 f2a2 	rbit	r2, r2
 8004a1a:	60fa      	str	r2, [r7, #12]
  return(result);
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	fab2 f282 	clz	r2, r2
 8004a22:	b252      	sxtb	r2, r2
 8004a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a28:	b252      	sxtb	r2, r2
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	f002 021f 	and.w	r2, r2, #31
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f202 	lsl.w	r2, r1, r2
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0b6      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a3c:	4b6d      	ldr	r3, [pc, #436]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	496a      	ldr	r1, [pc, #424]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	4a66      	ldr	r2, [pc, #408]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	495e      	ldr	r1, [pc, #376]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4956      	ldr	r1, [pc, #344]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aaa:	4b52      	ldr	r3, [pc, #328]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	494f      	ldr	r1, [pc, #316]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f023 0210 	bic.w	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ae6:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	4940      	ldr	r1, [pc, #256]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	f023 0220 	bic.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4938      	ldr	r1, [pc, #224]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b22:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4931      	ldr	r1, [pc, #196]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b40:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	4929      	ldr	r1, [pc, #164]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4922      	ldr	r1, [pc, #136]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	491a      	ldr	r1, [pc, #104]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	4913      	ldr	r1, [pc, #76]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	490b      	ldr	r1, [pc, #44]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3748      	adds	r7, #72	; 0x48
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01d      	b.n	8004c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f004 fb16 	bl	8009250 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 fae8 	bl	800520c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e01d      	b.n	8004d08 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f815 	bl	8004d10 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fa87 	bl	800520c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fdc7 	bl	80058ca <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_TIM_PWM_Start+0x80>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x4a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIM_PWM_Start+0x84>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x4a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_TIM_PWM_Start+0x88>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x4a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a14      	ldr	r2, [pc, #80]	; (8004db0 <HAL_TIM_PWM_Start+0x8c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x4a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_TIM_PWM_Start+0x90>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_PWM_Start+0x4e>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_TIM_PWM_Start+0x50>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
} 
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0202 	mvn.w	r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9e7 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f9d9 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9ea 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f9bd 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9af 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9c0 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0208 	mvn.w	r2, #8
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2204      	movs	r2, #4
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f993 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f985 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f996 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0210 	mvn.w	r2, #16
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f969 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f95b 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f96c 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0201 	mvn.w	r2, #1
 8004f34:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f003 fcf0 	bl	800891c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fe4a 	bl	8005bfc <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f76:	d10e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fe3d 	bl	8005c10 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d10e      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d107      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f91a 	bl	80051f6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d10e      	bne.n	8004fee <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0220 	mvn.w	r2, #32
 8004fe6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fdfd 	bl	8005be8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_TIM_ConfigClockSource+0x1c>
 800500e:	2302      	movs	r3, #2
 8005010:	e0cf      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x1bc>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005034:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d07c      	beq.n	8005148 <HAL_TIM_ConfigClockSource+0x152>
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d80f      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x7c>
 8005052:	2b10      	cmp	r3, #16
 8005054:	f000 808f 	beq.w	8005176 <HAL_TIM_ConfigClockSource+0x180>
 8005058:	2b10      	cmp	r3, #16
 800505a:	d803      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x6e>
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8083 	beq.w	8005168 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005062:	e09d      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005064:	2b20      	cmp	r3, #32
 8005066:	f000 808d 	beq.w	8005184 <HAL_TIM_ConfigClockSource+0x18e>
 800506a:	2b30      	cmp	r3, #48	; 0x30
 800506c:	f000 8091 	beq.w	8005192 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8005070:	e096      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005072:	2b70      	cmp	r3, #112	; 0x70
 8005074:	d018      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xb2>
 8005076:	2b70      	cmp	r3, #112	; 0x70
 8005078:	d804      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x8e>
 800507a:	2b50      	cmp	r3, #80	; 0x50
 800507c:	d044      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0x112>
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d052      	beq.n	8005128 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8005082:	e08d      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d003      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x9c>
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	d028      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8005090:	e086      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	6093      	str	r3, [r2, #8]
    break;
 80050a6:	e07b      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f000 fbe5 	bl	8005886 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
    break;
 80050e0:	e05e      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6899      	ldr	r1, [r3, #8]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f000 fbc8 	bl	8005886 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005104:	609a      	str	r2, [r3, #8]
    break;
 8005106:	e04b      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	461a      	mov	r2, r3
 8005116:	f000 fb2f 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2150      	movs	r1, #80	; 0x50
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fb90 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005126:	e03b      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	461a      	mov	r2, r3
 8005136:	f000 fb52 	bl	80057de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2160      	movs	r1, #96	; 0x60
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fb80 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005146:	e02b      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	461a      	mov	r2, r3
 8005156:	f000 fb0f 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2140      	movs	r1, #64	; 0x40
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fb70 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005166:	e01b      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb69 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005174:	e014      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2110      	movs	r1, #16
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fb62 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005182:	e00d      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2120      	movs	r1, #32
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fb5b 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 8005190:	e006      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2130      	movs	r1, #48	; 0x30
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fb54 	bl	8005846 <TIM_ITRx_SetConfig>
    break;
 800519e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3c      	ldr	r2, [pc, #240]	; (8005314 <TIM_Base_SetConfig+0x108>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_Base_SetConfig+0x3c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d00b      	beq.n	8005248 <TIM_Base_SetConfig+0x3c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a39      	ldr	r2, [pc, #228]	; (8005318 <TIM_Base_SetConfig+0x10c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_Base_SetConfig+0x3c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a38      	ldr	r2, [pc, #224]	; (800531c <TIM_Base_SetConfig+0x110>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_Base_SetConfig+0x3c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a37      	ldr	r2, [pc, #220]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d108      	bne.n	800525a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <TIM_Base_SetConfig+0x108>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01b      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d017      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <TIM_Base_SetConfig+0x10c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a29      	ldr	r2, [pc, #164]	; (800531c <TIM_Base_SetConfig+0x110>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <TIM_Base_SetConfig+0x114>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0x8e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a25      	ldr	r2, [pc, #148]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <TIM_Base_SetConfig+0x108>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0xec>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a11      	ldr	r2, [pc, #68]	; (8005320 <TIM_Base_SetConfig+0x114>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0xec>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <TIM_Base_SetConfig+0x118>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0xec>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0f      	ldr	r2, [pc, #60]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0xec>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0e      	ldr	r2, [pc, #56]	; (800532c <TIM_Base_SetConfig+0x120>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d103      	bne.n	8005300 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	615a      	str	r2, [r3, #20]
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800

08005330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 0302 	bic.w	r3, r3, #2
 8005388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <TIM_OC1_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_OC1_SetConfig+0x8c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a2b      	ldr	r2, [pc, #172]	; (800544c <TIM_OC1_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_OC1_SetConfig+0x8c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <TIM_OC1_SetConfig+0x120>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_OC1_SetConfig+0x8c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a29      	ldr	r2, [pc, #164]	; (8005454 <TIM_OC1_SetConfig+0x124>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC1_SetConfig+0x8c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a28      	ldr	r2, [pc, #160]	; (8005458 <TIM_OC1_SetConfig+0x128>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d10c      	bne.n	80053d6 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0308 	bic.w	r3, r3, #8
 80053c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <TIM_OC1_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_OC1_SetConfig+0xce>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	; (800544c <TIM_OC1_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_OC1_SetConfig+0xce>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a19      	ldr	r2, [pc, #100]	; (8005450 <TIM_OC1_SetConfig+0x120>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC1_SetConfig+0xce>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <TIM_OC1_SetConfig+0x124>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC1_SetConfig+0xce>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a17      	ldr	r2, [pc, #92]	; (8005458 <TIM_OC1_SetConfig+0x128>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d111      	bne.n	8005422 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
} 
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40013400 	.word	0x40013400
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a28      	ldr	r2, [pc, #160]	; (8005568 <TIM_OC2_SetConfig+0x10c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC2_SetConfig+0x78>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <TIM_OC2_SetConfig+0x110>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10d      	bne.n	80054f0 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <TIM_OC2_SetConfig+0x10c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00f      	beq.n	8005518 <TIM_OC2_SetConfig+0xbc>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <TIM_OC2_SetConfig+0x110>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00b      	beq.n	8005518 <TIM_OC2_SetConfig+0xbc>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <TIM_OC2_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_OC2_SetConfig+0xbc>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <TIM_OC2_SetConfig+0x118>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0xbc>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a19      	ldr	r2, [pc, #100]	; (8005578 <TIM_OC2_SetConfig+0x11c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d113      	bne.n	8005540 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800551e:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005526:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a27      	ldr	r2, [pc, #156]	; (8005684 <TIM_OC3_SetConfig+0x108>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x76>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a26      	ldr	r2, [pc, #152]	; (8005688 <TIM_OC3_SetConfig+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10d      	bne.n	800560e <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <TIM_OC3_SetConfig+0x108>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_OC3_SetConfig+0xba>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <TIM_OC3_SetConfig+0x10c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_OC3_SetConfig+0xba>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1a      	ldr	r2, [pc, #104]	; (800568c <TIM_OC3_SetConfig+0x110>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_OC3_SetConfig+0xba>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a19      	ldr	r2, [pc, #100]	; (8005690 <TIM_OC3_SetConfig+0x114>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC3_SetConfig+0xba>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a18      	ldr	r2, [pc, #96]	; (8005694 <TIM_OC3_SetConfig+0x118>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d113      	bne.n	800565e <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005644:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	621a      	str	r2, [r3, #32]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40013400 	.word	0x40013400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a18      	ldr	r2, [pc, #96]	; (8005764 <TIM_OC4_SetConfig+0xcc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00f      	beq.n	8005728 <TIM_OC4_SetConfig+0x90>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <TIM_OC4_SetConfig+0xd0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_OC4_SetConfig+0x90>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <TIM_OC4_SetConfig+0xd4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_OC4_SetConfig+0x90>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a15      	ldr	r2, [pc, #84]	; (8005770 <TIM_OC4_SetConfig+0xd8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC4_SetConfig+0x90>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a14      	ldr	r2, [pc, #80]	; (8005774 <TIM_OC4_SetConfig+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d109      	bne.n	800573c <TIM_OC4_SetConfig+0xa4>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800572e:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40013400 	.word	0x40013400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800

08005778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f023 030a 	bic.w	r3, r3, #10
 80057bc:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0210 	bic.w	r2, r3, #16
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005864:	887b      	ldrh	r3, [r7, #2]
 8005866:	f043 0307 	orr.w	r3, r3, #7
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	021a      	lsls	r2, r3, #8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	609a      	str	r2, [r3, #8]
} 
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80058da:	2201      	movs	r2, #1
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	401a      	ands	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005926:	2302      	movs	r3, #2
 8005928:	e105      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x226>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b14      	cmp	r3, #20
 800593e:	f200 80f0 	bhi.w	8005b22 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005b23 	.word	0x08005b23
 8005950:	08005b23 	.word	0x08005b23
 8005954:	08005b23 	.word	0x08005b23
 8005958:	080059dd 	.word	0x080059dd
 800595c:	08005b23 	.word	0x08005b23
 8005960:	08005b23 	.word	0x08005b23
 8005964:	08005b23 	.word	0x08005b23
 8005968:	08005a1f 	.word	0x08005a1f
 800596c:	08005b23 	.word	0x08005b23
 8005970:	08005b23 	.word	0x08005b23
 8005974:	08005b23 	.word	0x08005b23
 8005978:	08005a5f 	.word	0x08005a5f
 800597c:	08005b23 	.word	0x08005b23
 8005980:	08005b23 	.word	0x08005b23
 8005984:	08005b23 	.word	0x08005b23
 8005988:	08005aa1 	.word	0x08005aa1
 800598c:	08005b23 	.word	0x08005b23
 8005990:	08005b23 	.word	0x08005b23
 8005994:	08005b23 	.word	0x08005b23
 8005998:	08005ae1 	.word	0x08005ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fcc4 	bl	8005330 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	619a      	str	r2, [r3, #24]
    }
    break;
 80059da:	e0a3      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fd3a 	bl	800545c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6999      	ldr	r1, [r3, #24]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
    }
    break;
 8005a1c:	e082      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fda9 	bl	800557c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0204 	bic.w	r2, r2, #4
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
    }
    break;
 8005a5c:	e062      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff fe17 	bl	8005698 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a78:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	61da      	str	r2, [r3, #28]
    }
    break;
 8005a9e:	e041      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f8bc 	bl	8005c24 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8005ade:	e021      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f906 	bl	8005cf8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8005b20:	e000      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8005b22:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e03d      	b.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1a      	ldr	r2, [pc, #104]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
} 
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40013400 	.word	0x40013400

08005be8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <TIM_OC5_SetConfig+0xc0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_OC5_SetConfig+0x86>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <TIM_OC5_SetConfig+0xc4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_OC5_SetConfig+0x86>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a15      	ldr	r2, [pc, #84]	; (8005cec <TIM_OC5_SetConfig+0xc8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_OC5_SetConfig+0x86>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <TIM_OC5_SetConfig+0xcc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC5_SetConfig+0x86>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <TIM_OC5_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d109      	bne.n	8005cbe <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40013400 	.word	0x40013400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <TIM_OC6_SetConfig+0xc4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00f      	beq.n	8005d80 <TIM_OC6_SetConfig+0x88>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <TIM_OC6_SetConfig+0xc8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00b      	beq.n	8005d80 <TIM_OC6_SetConfig+0x88>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <TIM_OC6_SetConfig+0xcc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <TIM_OC6_SetConfig+0x88>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_OC6_SetConfig+0xd0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC6_SetConfig+0x88>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <TIM_OC6_SetConfig+0xd4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
} 
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7c1b      	ldrb	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10e      	bne.n	8005e06 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dec:	2202      	movs	r2, #2
 8005dee:	2181      	movs	r1, #129	; 0x81
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f003 fcd8 	bl	80097a6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f003 fcd1 	bl	80097a6 <USBD_LL_OpenEP>
 8005e04:	e00b      	b.n	8005e1e <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2202      	movs	r2, #2
 8005e0a:	2181      	movs	r1, #129	; 0x81
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f003 fcca 	bl	80097a6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005e12:	2340      	movs	r3, #64	; 0x40
 8005e14:	2202      	movs	r2, #2
 8005e16:	2101      	movs	r1, #1
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f003 fcc4 	bl	80097a6 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005e1e:	2308      	movs	r3, #8
 8005e20:	2203      	movs	r2, #3
 8005e22:	2182      	movs	r1, #130	; 0x82
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f003 fcbe 	bl	80097a6 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005e2a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e2e:	f003 fde1 	bl	80099f4 <USBD_static_malloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e026      	b.n	8005e98 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e50:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7c1b      	ldrb	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7e:	2101      	movs	r1, #1
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f003 fd81 	bl	8009988 <USBD_LL_PrepareReceive>
 8005e86:	e007      	b.n	8005e98 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e8e:	2340      	movs	r3, #64	; 0x40
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f003 fd78 	bl	8009988 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005eb2:	2181      	movs	r1, #129	; 0x81
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f003 fc9c 	bl	80097f2 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005eba:	2101      	movs	r1, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f003 fc98 	bl	80097f2 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005ec2:	2182      	movs	r1, #130	; 0x82
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f003 fc94 	bl	80097f2 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00e      	beq.n	8005ef2 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f003 fd93 	bl	8009a10 <USBD_static_free>
    pdev->pClassData = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f0c:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d03a      	beq.n	8005f90 <USBD_CDC_Setup+0x94>
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d000      	beq.n	8005f20 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005f1e:	e043      	b.n	8005fa8 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	88db      	ldrh	r3, [r3, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d029      	beq.n	8005f7c <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b25b      	sxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da11      	bge.n	8005f56 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005f3e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	88d2      	ldrh	r2, [r2, #6]
 8005f44:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8005f46:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	88db      	ldrh	r3, [r3, #6]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fff0 	bl	8006f34 <USBD_CtlSendData>
    break;
 8005f54:	e029      	b.n	8005faa <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	785a      	ldrb	r2, [r3, #1]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	88db      	ldrh	r3, [r3, #6]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8005f6c:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	88db      	ldrh	r3, [r3, #6]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f80b 	bl	8006f90 <USBD_CtlPrepareRx>
    break;
 8005f7a:	e016      	b.n	8005faa <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	7850      	ldrb	r0, [r2, #1]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	4798      	blx	r3
    break;
 8005f8e:	e00c      	b.n	8005faa <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b0a      	cmp	r3, #10
 8005f96:	d001      	beq.n	8005f9c <USBD_CDC_Setup+0xa0>
 8005f98:	2b0b      	cmp	r3, #11
      break;
 8005f9a:	e005      	b.n	8005fa8 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	4905      	ldr	r1, [pc, #20]	; (8005fb4 <USBD_CDC_Setup+0xb8>)
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ffc7 	bl	8006f34 <USBD_CtlSendData>
      break;
 8005fa6:	bf00      	nop
    break;
 8005fa8:	bf00      	nop
  }
  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000198 	.word	0x20000198

08005fb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005fca:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005fe2:	2302      	movs	r3, #2
  }
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006002:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f003 fce0 	bl	80099ce <USBD_LL_GetRxDataSize>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006034:	4611      	mov	r1, r2
 8006036:	4798      	blx	r3

    return USBD_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006054:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x46>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d010      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006078:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006080:	b292      	uxth	r2, r2
 8006082:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2243      	movs	r2, #67	; 0x43
 80060a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	2000008c 	.word	0x2000008c

080060b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2243      	movs	r2, #67	; 0x43
 80060c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000048 	.word	0x20000048

080060d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2243      	movs	r2, #67	; 0x43
 80060e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80060e6:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	200000d0 	.word	0x200000d0

080060f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220a      	movs	r2, #10
 8006104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000004 	.word	0x20000004

08006118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006122:	2302      	movs	r3, #2
 8006124:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800615a:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800618a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80061b0:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7c1b      	ldrb	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061ce:	2101      	movs	r1, #1
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f003 fbd9 	bl	8009988 <USBD_LL_PrepareReceive>
 80061d6:	e007      	b.n	80061e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061de:	2340      	movs	r3, #64	; 0x40
 80061e0:	2101      	movs	r1, #1
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f003 fbd0 	bl	8009988 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80061ec:	2302      	movs	r3, #2
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	4613      	mov	r3, r2
 8006202:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800620a:	2302      	movs	r3, #2
 800620c:	e01a      	b.n	8006244 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	79fa      	ldrb	r2, [r7, #7]
 800623a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f003 fa3d 	bl	80096bc <USBD_LL_Init>
  
  return USBD_OK; 
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	e001      	b.n	8006272 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800626e:	2302      	movs	r3, #2
 8006270:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f003 fa71 	bl	8009770 <USBD_LL_Start>
  
  return USBD_OK;  
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80062ba:	2302      	movs	r3, #2
 80062bc:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	4611      	mov	r1, r2
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	4611      	mov	r1, r2
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4798      	blx	r3
  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fd5c 	bl	8006de2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006338:	461a      	mov	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2b01      	cmp	r3, #1
 800634c:	d00b      	beq.n	8006366 <USBD_LL_SetupStage+0x54>
 800634e:	2b02      	cmp	r3, #2
 8006350:	d011      	beq.n	8006376 <USBD_LL_SetupStage+0x64>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d117      	bne.n	8006386 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f98a 	bl	8006678 <USBD_StdDevReq>
    break;
 8006364:	e01a      	b.n	800639c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9d2 	bl	8006718 <USBD_StdItfReq>
    break;
 8006374:	e012      	b.n	800639c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9fd 	bl	800677e <USBD_StdEPReq>
    break;
 8006384:	e00a      	b.n	800639c <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800638c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f003 fa4b 	bl	8009830 <USBD_LL_StallEP>
    break;
 800639a:	bf00      	nop
  }  
  return USBD_OK;  
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	460b      	mov	r3, r1
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d138      	bne.n	800642c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80063c0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d142      	bne.n	8006452 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d914      	bls.n	8006402 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	bf28      	it	cs
 80063f2:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fde6 	bl	8006fcc <USBD_CtlContinueRx>
 8006400:	e027      	b.n	8006452 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006414:	2b03      	cmp	r3, #3
 8006416:	d105      	bne.n	8006424 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fde3 	bl	8006ff0 <USBD_CtlSendStatus>
 800642a:	e012      	b.n	8006452 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800643e:	2b03      	cmp	r3, #3
 8006440:	d107      	bne.n	8006452 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	7afa      	ldrb	r2, [r7, #11]
 800644c:	4611      	mov	r1, r2
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	4798      	blx	r3
  }  
  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	460b      	mov	r3, r1
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d16c      	bne.n	800654a <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3314      	adds	r3, #20
 8006474:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800647c:	2b02      	cmp	r3, #2
 800647e:	d157      	bne.n	8006530 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	429a      	cmp	r2, r3
 800648a:	d915      	bls.n	80064b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fd61 	bl	8006f6c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80064aa:	2300      	movs	r3, #0
 80064ac:	2200      	movs	r2, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f003 fa69 	bl	8009988 <USBD_LL_PrepareReceive>
 80064b6:	e03b      	b.n	8006530 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68d2      	ldr	r2, [r2, #12]
 80064c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c4:	fb02 f201 	mul.w	r2, r2, r1
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d11c      	bne.n	8006508 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d316      	bcc.n	8006508 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d20f      	bcs.n	8006508 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80064e8:	2200      	movs	r2, #0
 80064ea:	2100      	movs	r1, #0
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fd3d 	bl	8006f6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80064fa:	2300      	movs	r3, #0
 80064fc:	2200      	movs	r2, #0
 80064fe:	2100      	movs	r1, #0
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f003 fa41 	bl	8009988 <USBD_LL_PrepareReceive>
 8006506:	e013      	b.n	8006530 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800651a:	2b03      	cmp	r3, #3
 800651c:	d105      	bne.n	800652a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fd73 	bl	8007016 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006536:	2b01      	cmp	r3, #1
 8006538:	d11a      	bne.n	8006570 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff feac 	bl	8006298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8006548:	e012      	b.n	8006570 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800655c:	2b03      	cmp	r3, #3
 800655e:	d107      	bne.n	8006570 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	7afa      	ldrb	r2, [r7, #11]
 800656a:	4611      	mov	r1, r2
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	4798      	blx	r3
  }  
  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	2200      	movs	r2, #0
 8006586:	2100      	movs	r1, #0
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f003 f90c 	bl	80097a6 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f003 f902 	bl	80097a6 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2240      	movs	r2, #64	; 0x40
 80065a6:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6852      	ldr	r2, [r2, #4]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	4611      	mov	r1, r2
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 
  
  return USBD_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2204      	movs	r2, #4
 8006610:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006652:	2b03      	cmp	r3, #3
 8006654:	d10b      	bne.n	800666e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b09      	cmp	r3, #9
 800668c:	d839      	bhi.n	8006702 <USBD_StdDevReq+0x8a>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <USBD_StdDevReq+0x1c>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066e5 	.word	0x080066e5
 8006698:	080066f9 	.word	0x080066f9
 800669c:	08006703 	.word	0x08006703
 80066a0:	080066ef 	.word	0x080066ef
 80066a4:	08006703 	.word	0x08006703
 80066a8:	080066c7 	.word	0x080066c7
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	08006703 	.word	0x08006703
 80066b4:	080066db 	.word	0x080066db
 80066b8:	080066d1 	.word	0x080066d1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f936 	bl	8006930 <USBD_GetDescriptor>
    break;
 80066c4:	e022      	b.n	800670c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa25 	bl	8006b18 <USBD_SetAddress>
    break;
 80066ce:	e01d      	b.n	800670c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa5e 	bl	8006b94 <USBD_SetConfig>
    break;
 80066d8:	e018      	b.n	800670c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fae1 	bl	8006ca4 <USBD_GetConfig>
    break;
 80066e2:	e013      	b.n	800670c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb0e 	bl	8006d08 <USBD_GetStatus>
    break;
 80066ec:	e00e      	b.n	800670c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fb33 	bl	8006d5c <USBD_SetFeature>
    break;
 80066f6:	e009      	b.n	800670c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fb49 	bl	8006d92 <USBD_ClrFeature>
    break;
 8006700:	e004      	b.n	800670c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fba9 	bl	8006e5c <USBD_CtlError>
    break;
 800670a:	bf00      	nop
  }
  
  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800672c:	2b03      	cmp	r3, #3
 800672e:	d11b      	bne.n	8006768 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	889b      	ldrh	r3, [r3, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b01      	cmp	r3, #1
 8006738:	d811      	bhi.n	800675e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	88db      	ldrh	r3, [r3, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d110      	bne.n	8006772 <USBD_StdItfReq+0x5a>
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc4a 	bl	8006ff0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800675c:	e009      	b.n	8006772 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb7b 	bl	8006e5c <USBD_CtlError>
    break;
 8006766:	e004      	b.n	8006772 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fb76 	bl	8006e5c <USBD_CtlError>
    break;
 8006770:	e000      	b.n	8006774 <USBD_StdItfReq+0x5c>
    break;
 8006772:	bf00      	nop
  }
  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	889b      	ldrh	r3, [r3, #4]
 8006790:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679a:	2b20      	cmp	r3, #32
 800679c:	d108      	bne.n	80067b0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
    
    return USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e0ba      	b.n	8006926 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d039      	beq.n	800682c <USBD_StdEPReq+0xae>
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d002      	beq.n	80067c2 <USBD_StdEPReq+0x44>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d06b      	beq.n	8006898 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80067c0:	e0b0      	b.n	8006924 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d002      	beq.n	80067d2 <USBD_StdEPReq+0x54>
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d00c      	beq.n	80067ea <USBD_StdEPReq+0x6c>
 80067d0:	e025      	b.n	800681e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d027      	beq.n	8006828 <USBD_StdEPReq+0xaa>
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d024      	beq.n	8006828 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f003 f824 	bl	8009830 <USBD_LL_StallEP>
      break;	
 80067e8:	e01e      	b.n	8006828 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <USBD_StdEPReq+0x8a>
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d004      	beq.n	8006808 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f003 f814 	bl	8009830 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fbea 	bl	8006ff0 <USBD_CtlSendStatus>
      break;
 800681c:	e005      	b.n	800682a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fb1b 	bl	8006e5c <USBD_CtlError>
      break;    
 8006826:	e000      	b.n	800682a <USBD_StdEPReq+0xac>
      break;	
 8006828:	bf00      	nop
    break;
 800682a:	e07b      	b.n	8006924 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006832:	2b02      	cmp	r3, #2
 8006834:	d002      	beq.n	800683c <USBD_StdEPReq+0xbe>
 8006836:	2b03      	cmp	r3, #3
 8006838:	d00c      	beq.n	8006854 <USBD_StdEPReq+0xd6>
 800683a:	e024      	b.n	8006886 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d026      	beq.n	8006890 <USBD_StdEPReq+0x112>
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	2b80      	cmp	r3, #128	; 0x80
 8006846:	d023      	beq.n	8006890 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 ffef 	bl	8009830 <USBD_LL_StallEP>
      break;	
 8006852:	e01d      	b.n	8006890 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	885b      	ldrh	r3, [r3, #2]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d11b      	bne.n	8006894 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f002 ffff 	bl	800986e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fbb6 	bl	8006ff0 <USBD_CtlSendStatus>
      break;
 8006884:	e006      	b.n	8006894 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fae7 	bl	8006e5c <USBD_CtlError>
      break;    
 800688e:	e002      	b.n	8006896 <USBD_StdEPReq+0x118>
      break;	
 8006890:	bf00      	nop
 8006892:	e047      	b.n	8006924 <USBD_StdEPReq+0x1a6>
      break;
 8006894:	bf00      	nop
    break;
 8006896:	e045      	b.n	8006924 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d002      	beq.n	80068a8 <USBD_StdEPReq+0x12a>
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d00b      	beq.n	80068be <USBD_StdEPReq+0x140>
 80068a6:	e036      	b.n	8006916 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f002 ffba 	bl	8009830 <USBD_LL_StallEP>
      break;	
 80068bc:	e030      	b.n	8006920 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80068be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da08      	bge.n	80068d8 <USBD_StdEPReq+0x15a>
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068cc:	3301      	adds	r3, #1
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	3304      	adds	r3, #4
 80068d6:	e007      	b.n	80068e8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80068de:	3310      	adds	r3, #16
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4413      	add	r3, r2
 80068e6:	3304      	adds	r3, #4
 80068e8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f002 ffdc 	bl	80098ac <USBD_LL_IsStallEP>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e002      	b.n	8006908 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006908:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800690a:	2202      	movs	r2, #2
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb10 	bl	8006f34 <USBD_CtlSendData>
      break;
 8006914:	e005      	b.n	8006922 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa9f 	bl	8006e5c <USBD_CtlError>
      break;
 800691e:	e000      	b.n	8006922 <USBD_StdEPReq+0x1a4>
      break;	
 8006920:	bf00      	nop
    break;
 8006922:	bf00      	nop
  }
  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	2b06      	cmp	r3, #6
 8006946:	f200 80c9 	bhi.w	8006adc <USBD_GetDescriptor+0x1ac>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_GetDescriptor+0x20>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006985 	.word	0x08006985
 8006958:	080069c5 	.word	0x080069c5
 800695c:	08006add 	.word	0x08006add
 8006960:	08006add 	.word	0x08006add
 8006964:	08006a89 	.word	0x08006a89
 8006968:	08006aaf 	.word	0x08006aaf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	7c12      	ldrb	r2, [r2, #16]
 8006978:	f107 010a 	add.w	r1, r7, #10
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	60f8      	str	r0, [r7, #12]
    break;
 8006982:	e0b0      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7c1b      	ldrb	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10d      	bne.n	80069a8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	f107 020a 	add.w	r2, r7, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80069a6:	e09e      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	f107 020a 	add.w	r2, r7, #10
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
 80069b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	2202      	movs	r2, #2
 80069c0:	701a      	strb	r2, [r3, #0]
    break;
 80069c2:	e090      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	885b      	ldrh	r3, [r3, #2]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b05      	cmp	r3, #5
 80069cc:	d856      	bhi.n	8006a7c <USBD_GetDescriptor+0x14c>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBD_GetDescriptor+0xa4>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069ed 	.word	0x080069ed
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	08006a65 	.word	0x08006a65
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7c12      	ldrb	r2, [r2, #16]
 80069f8:	f107 010a 	add.w	r1, r7, #10
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
      break;
 8006a02:	e040      	b.n	8006a86 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	f107 010a 	add.w	r1, r7, #10
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
      break;
 8006a1a:	e034      	b.n	8006a86 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 010a 	add.w	r1, r7, #10
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
      break;
 8006a32:	e028      	b.n	8006a86 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 010a 	add.w	r1, r7, #10
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
      break;
 8006a4a:	e01c      	b.n	8006a86 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	7c12      	ldrb	r2, [r2, #16]
 8006a58:	f107 010a 	add.w	r1, r7, #10
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
      break;
 8006a62:	e010      	b.n	8006a86 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	7c12      	ldrb	r2, [r2, #16]
 8006a70:	f107 010a 	add.w	r1, r7, #10
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
      break;
 8006a7a:	e004      	b.n	8006a86 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9ec 	bl	8006e5c <USBD_CtlError>
      return;
 8006a84:	e044      	b.n	8006b10 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8006a86:	e02e      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7c1b      	ldrb	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	f107 020a 	add.w	r2, r7, #10
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
      break;
 8006aa2:	e020      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9d8 	bl	8006e5c <USBD_CtlError>
      return;
 8006aac:	e030      	b.n	8006b10 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7c1b      	ldrb	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f107 020a 	add.w	r2, r7, #10
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4798      	blx	r3
 8006ac6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	2207      	movs	r2, #7
 8006ace:	701a      	strb	r2, [r3, #0]
      break; 
 8006ad0:	e009      	b.n	8006ae6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9c1 	bl	8006e5c <USBD_CtlError>
      return;
 8006ada:	e019      	b.n	8006b10 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9bc 	bl	8006e5c <USBD_CtlError>
    return;
 8006ae4:	e014      	b.n	8006b10 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <USBD_GetDescriptor+0x1e0>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00d      	beq.n	8006b10 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88da      	ldrh	r2, [r3, #6]
 8006af8:	897b      	ldrh	r3, [r7, #10]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bf28      	it	cs
 8006afe:	4613      	movcs	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006b04:	897b      	ldrh	r3, [r7, #10]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68f9      	ldr	r1, [r7, #12]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa12 	bl	8006f34 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop

08006b18 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	889b      	ldrh	r3, [r3, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d12c      	bne.n	8006b84 <USBD_SetAddress+0x6c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	88db      	ldrh	r3, [r3, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d128      	bne.n	8006b84 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d104      	bne.n	8006b52 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f986 	bl	8006e5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006b50:	e01c      	b.n	8006b8c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7bfa      	ldrb	r2, [r7, #15]
 8006b56:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f002 fed0 	bl	8009904 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa43 	bl	8006ff0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006b78:	e008      	b.n	8006b8c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006b82:	e003      	b.n	8006b8c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f968 	bl	8006e5c <USBD_CtlError>
  } 
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	4b3e      	ldr	r3, [pc, #248]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006ba6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006ba8:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d904      	bls.n	8006bba <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f952 	bl	8006e5c <USBD_CtlError>
 8006bb8:	e06f      	b.n	8006c9a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d002      	beq.n	8006bca <USBD_SetConfig+0x36>
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d023      	beq.n	8006c10 <USBD_SetConfig+0x7c>
 8006bc8:	e062      	b.n	8006c90 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8006bca:	4b35      	ldr	r3, [pc, #212]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01a      	beq.n	8006c08 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8006bd2:	4b33      	ldr	r3, [pc, #204]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2203      	movs	r2, #3
 8006be0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006be4:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fb5f 	bl	80062ae <USBD_SetClassConfig>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d104      	bne.n	8006c00 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f92f 	bl	8006e5c <USBD_CtlError>
          return;
 8006bfe:	e04c      	b.n	8006c9a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f9f5 	bl	8006ff0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006c06:	e048      	b.n	8006c9a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f9f1 	bl	8006ff0 <USBD_CtlSendStatus>
      break;
 8006c0e:	e044      	b.n	8006c9a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d112      	bne.n	8006c3e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006c20:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fb5b 	bl	80062ec <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9da 	bl	8006ff0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006c3c:	e02d      	b.n	8006c9a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d01d      	beq.n	8006c88 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fb49 	bl	80062ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c5a:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006c64:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <USBD_SetConfig+0x10c>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fb1f 	bl	80062ae <USBD_SetClassConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d104      	bne.n	8006c80 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8ef 	bl	8006e5c <USBD_CtlError>
          return;
 8006c7e:	e00c      	b.n	8006c9a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9b5 	bl	8006ff0 <USBD_CtlSendStatus>
      break;
 8006c86:	e008      	b.n	8006c9a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9b1 	bl	8006ff0 <USBD_CtlSendStatus>
      break;
 8006c8e:	e004      	b.n	8006c9a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8e2 	bl	8006e5c <USBD_CtlError>
      break;
 8006c98:	bf00      	nop
    }
  }
}
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000199 	.word	0x20000199

08006ca4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d004      	beq.n	8006cc0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8cf 	bl	8006e5c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006cbe:	e01f      	b.n	8006d00 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d002      	beq.n	8006cd0 <USBD_GetConfig+0x2c>
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d00b      	beq.n	8006ce6 <USBD_GetConfig+0x42>
 8006cce:	e012      	b.n	8006cf6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8006cda:	2201      	movs	r2, #1
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f928 	bl	8006f34 <USBD_CtlSendData>
      break;
 8006ce4:	e00c      	b.n	8006d00 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8006cea:	2201      	movs	r2, #1
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f920 	bl	8006f34 <USBD_CtlSendData>
      break;
 8006cf4:	e004      	b.n	8006d00 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f8af 	bl	8006e5c <USBD_CtlError>
      break;
 8006cfe:	bf00      	nop
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006d18:	3b02      	subs	r3, #2
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d815      	bhi.n	8006d4a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0202 	orr.w	r2, r3, #2
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8f6 	bl	8006f34 <USBD_CtlSendData>
                      2);
    break;
 8006d48:	e004      	b.n	8006d54 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f885 	bl	8006e5c <USBD_CtlError>
    break;
 8006d52:	bf00      	nop
  }
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	885b      	ldrh	r3, [r3, #2]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d10d      	bne.n	8006d8a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f933 	bl	8006ff0 <USBD_CtlSendStatus>
  }

}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006da2:	3b02      	subs	r3, #2
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d812      	bhi.n	8006dce <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	885b      	ldrh	r3, [r3, #2]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d113      	bne.n	8006dd8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f912 	bl	8006ff0 <USBD_CtlSendStatus>
    }
    break;
 8006dcc:	e004      	b.n	8006dd8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f843 	bl	8006e5c <USBD_CtlError>
    break;
 8006dd6:	e000      	b.n	8006dda <USBD_ClrFeature+0x48>
    break;
 8006dd8:	bf00      	nop
  }
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	785a      	ldrb	r2, [r3, #1]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	3302      	adds	r3, #2
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	3303      	adds	r3, #3
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	3305      	adds	r3, #5
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4413      	add	r3, r2
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	3306      	adds	r3, #6
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	3307      	adds	r3, #7
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	021b      	lsls	r3, r3, #8
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	80da      	strh	r2, [r3, #6]

}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f002 fce1 	bl	8009830 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 fcdd 	bl	8009830 <USBD_LL_StallEP>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d033      	beq.n	8006efc <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f835 	bl	8006f04 <USBD_GetLen>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	881a      	ldrh	r2, [r3, #0]
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	75f9      	strb	r1, [r7, #23]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	440b      	add	r3, r1
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	75fa      	strb	r2, [r7, #23]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	2203      	movs	r2, #3
 8006eca:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006ecc:	e012      	b.n	8006ef4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	60fa      	str	r2, [r7, #12]
 8006ed4:	7dfa      	ldrb	r2, [r7, #23]
 8006ed6:	1c51      	adds	r1, r2, #1
 8006ed8:	75f9      	strb	r1, [r7, #23]
 8006eda:	4611      	mov	r1, r2
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	440a      	add	r2, r1
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	75fa      	strb	r2, [r7, #23]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4413      	add	r3, r2
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e8      	bne.n	8006ece <USBD_GetString+0x50>
    }
  } 
}
 8006efc:	bf00      	nop
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006f10:	e005      	b.n	8006f1e <USBD_GetLen+0x1a>
    {
        len++;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	3301      	adds	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f5      	bne.n	8006f12 <USBD_GetLen+0xe>
    }

    return len;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f002 fcf0 	bl	8009942 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f002 fcde 	bl	8009942 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f002 fce3 	bl	8009988 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f002 fcd1 	bl	8009988 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f002 fc9b 	bl	8009942 <USBD_LL_Transmit>
  
  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2205      	movs	r2, #5
 8007022:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007026:	2300      	movs	r3, #0
 8007028:	2200      	movs	r2, #0
 800702a:	2100      	movs	r1, #0
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f002 fcab 	bl	8009988 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800704a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800704e:	2b84      	cmp	r3, #132	; 0x84
 8007050:	d005      	beq.n	800705e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007052:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	3303      	adds	r3, #3
 800705c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800705e:	68fb      	ldr	r3, [r7, #12]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007070:	f000 fa50 	bl	8007514 <vTaskStartScheduler>
  
  return osOK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	bd80      	pop	{r7, pc}

0800707a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800707a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707c:	b087      	sub	sp, #28
 800707e:	af02      	add	r7, sp, #8
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685c      	ldr	r4, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007090:	b29e      	uxth	r6, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff ffcf 	bl	800703c <makeFreeRtosPriority>
 800709e:	4602      	mov	r2, r0
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	9200      	str	r2, [sp, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	4632      	mov	r2, r6
 80070ac:	4629      	mov	r1, r5
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 f8d2 	bl	8007258 <xTaskCreate>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d001      	beq.n	80070be <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <osDelay+0x16>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	e000      	b.n	80070e0 <osDelay+0x18>
 80070de:	2301      	movs	r3, #1
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f9e3 	bl	80074ac <vTaskDelay>
  
  return osOK;
 80070e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0208 	add.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 0208 	add.w	r2, r3, #8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 0208 	add.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a8:	d103      	bne.n	80071b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e00c      	b.n	80071cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3308      	adds	r3, #8
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e002      	b.n	80071c0 <vListInsert+0x2e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d2f6      	bcs.n	80071ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	601a      	str	r2, [r3, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6892      	ldr	r2, [r2, #8]
 800721a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6852      	ldr	r2, [r2, #4]
 8007224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d103      	bne.n	8007238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08c      	sub	sp, #48	; 0x30
 800725c:	af04      	add	r7, sp, #16
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007268:	88fb      	ldrh	r3, [r7, #6]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fe61 	bl	8007f34 <pvPortMalloc>
 8007272:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800727a:	2054      	movs	r0, #84	; 0x54
 800727c:	f000 fe5a 	bl	8007f34 <pvPortMalloc>
 8007280:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
 800728e:	e005      	b.n	800729c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f000 ff11 	bl	80080b8 <vPortFree>
 8007296:	e001      	b.n	800729c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	2300      	movs	r3, #0
 80072a6:	9303      	str	r3, [sp, #12]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	9302      	str	r3, [sp, #8]
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f80e 	bl	80072da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072be:	69f8      	ldr	r0, [r7, #28]
 80072c0:	f000 f88a 	bl	80073d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072c4:	2301      	movs	r3, #1
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e002      	b.n	80072d0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072d0:	69bb      	ldr	r3, [r7, #24]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072f2:	3b01      	subs	r3, #1
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f023 0307 	bic.w	r3, r3, #7
 8007300:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e7fe      	b.n	800731e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e012      	b.n	800734c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	7819      	ldrb	r1, [r3, #0]
 800732e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	3334      	adds	r3, #52	; 0x34
 8007336:	460a      	mov	r2, r1
 8007338:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	3301      	adds	r3, #1
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d9e9      	bls.n	8007326 <prvInitialiseNewTask+0x4c>
 8007352:	e000      	b.n	8007356 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007354:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	2b06      	cmp	r3, #6
 8007362:	d901      	bls.n	8007368 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007364:	2306      	movs	r3, #6
 8007366:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007372:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	2200      	movs	r2, #0
 8007378:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	3304      	adds	r3, #4
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fed6 	bl	8007130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	3318      	adds	r3, #24
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fed1 	bl	8007130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	f1c3 0207 	rsb	r2, r3, #7
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2200      	movs	r2, #0
 80073a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	69b8      	ldr	r0, [r7, #24]
 80073b8:	f000 fbe2 	bl	8007b80 <pxPortInitialiseStack>
 80073bc:	4602      	mov	r2, r0
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ce:	bf00      	nop
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073e0:	f000 fcd6 	bl	8007d90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073e4:	4b2a      	ldr	r3, [pc, #168]	; (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	4a29      	ldr	r2, [pc, #164]	; (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ee:	4b29      	ldr	r3, [pc, #164]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073f6:	4a27      	ldr	r2, [pc, #156]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d110      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007404:	f000 faa4 	bl	8007950 <prvInitialiseTaskLists>
 8007408:	e00d      	b.n	8007426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800740a:	4b23      	ldr	r3, [pc, #140]	; (8007498 <prvAddNewTaskToReadyList+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d802      	bhi.n	8007426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007420:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007426:	4b1d      	ldr	r3, [pc, #116]	; (800749c <prvAddNewTaskToReadyList+0xc4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <prvAddNewTaskToReadyList+0xc4>)
 800742e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	4b19      	ldr	r3, [pc, #100]	; (80074a0 <prvAddNewTaskToReadyList+0xc8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4313      	orrs	r3, r2
 800743e:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <prvAddNewTaskToReadyList+0xc8>)
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <prvAddNewTaskToReadyList+0xcc>)
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7ff fe76 	bl	800714a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800745e:	f000 fcc5 	bl	8007dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007462:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <prvAddNewTaskToReadyList+0xc0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00e      	beq.n	8007488 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvAddNewTaskToReadyList+0xbc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	429a      	cmp	r2, r3
 8007476:	d207      	bcs.n	8007488 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <prvAddNewTaskToReadyList+0xd0>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	2000029c 	.word	0x2000029c
 8007494:	2000019c 	.word	0x2000019c
 8007498:	200002a8 	.word	0x200002a8
 800749c:	200002b8 	.word	0x200002b8
 80074a0:	200002a4 	.word	0x200002a4
 80074a4:	200001a0 	.word	0x200001a0
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <vTaskDelay+0x60>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <vTaskDelay+0x2e>
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	e7fe      	b.n	80074d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074da:	f000 f861 	bl	80075a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fae7 	bl	8007ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074e6:	f000 f869 	bl	80075bc <xTaskResumeAll>
 80074ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d107      	bne.n	8007502 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <vTaskDelay+0x64>)
 80074f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	200002c4 	.word	0x200002c4
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <vTaskStartScheduler+0x74>)
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	2300      	movs	r3, #0
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	2300      	movs	r3, #0
 8007524:	2280      	movs	r2, #128	; 0x80
 8007526:	4919      	ldr	r1, [pc, #100]	; (800758c <vTaskStartScheduler+0x78>)
 8007528:	4819      	ldr	r0, [pc, #100]	; (8007590 <vTaskStartScheduler+0x7c>)
 800752a:	f7ff fe95 	bl	8007258 <xTaskCreate>
 800752e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d115      	bne.n	8007562 <vTaskStartScheduler+0x4e>
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007548:	4b12      	ldr	r3, [pc, #72]	; (8007594 <vTaskStartScheduler+0x80>)
 800754a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007550:	4b11      	ldr	r3, [pc, #68]	; (8007598 <vTaskStartScheduler+0x84>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <vTaskStartScheduler+0x88>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800755c:	f000 fb8c 	bl	8007c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007560:	e00d      	b.n	800757e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007568:	d109      	bne.n	800757e <vTaskStartScheduler+0x6a>
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	e7fe      	b.n	800757c <vTaskStartScheduler+0x68>
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200002c0 	.word	0x200002c0
 800758c:	08009d74 	.word	0x08009d74
 8007590:	08007921 	.word	0x08007921
 8007594:	200002bc 	.word	0x200002bc
 8007598:	200002a8 	.word	0x200002a8
 800759c:	200002a0 	.word	0x200002a0

080075a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075a4:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <vTaskSuspendAll+0x18>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a03      	ldr	r2, [pc, #12]	; (80075b8 <vTaskSuspendAll+0x18>)
 80075ac:	6013      	str	r3, [r2, #0]
}
 80075ae:	bf00      	nop
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	200002c4 	.word	0x200002c4

080075bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ca:	4b41      	ldr	r3, [pc, #260]	; (80076d0 <xTaskResumeAll+0x114>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <xTaskResumeAll+0x2a>
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	e7fe      	b.n	80075e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075e6:	f000 fbd3 	bl	8007d90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ea:	4b39      	ldr	r3, [pc, #228]	; (80076d0 <xTaskResumeAll+0x114>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	4a37      	ldr	r2, [pc, #220]	; (80076d0 <xTaskResumeAll+0x114>)
 80075f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f4:	4b36      	ldr	r3, [pc, #216]	; (80076d0 <xTaskResumeAll+0x114>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d161      	bne.n	80076c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075fc:	4b35      	ldr	r3, [pc, #212]	; (80076d4 <xTaskResumeAll+0x118>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05d      	beq.n	80076c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007604:	e02e      	b.n	8007664 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007606:	4b34      	ldr	r3, [pc, #208]	; (80076d8 <xTaskResumeAll+0x11c>)
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3318      	adds	r3, #24
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fdf6 	bl	8007204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fdf1 	bl	8007204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	2201      	movs	r2, #1
 8007628:	409a      	lsls	r2, r3
 800762a:	4b2c      	ldr	r3, [pc, #176]	; (80076dc <xTaskResumeAll+0x120>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4313      	orrs	r3, r2
 8007630:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <xTaskResumeAll+0x120>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <xTaskResumeAll+0x124>)
 8007642:	441a      	add	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f7ff fd7d 	bl	800714a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <xTaskResumeAll+0x128>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	429a      	cmp	r2, r3
 800765c:	d302      	bcc.n	8007664 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800765e:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <xTaskResumeAll+0x12c>)
 8007660:	2201      	movs	r2, #1
 8007662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007664:	4b1c      	ldr	r3, [pc, #112]	; (80076d8 <xTaskResumeAll+0x11c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1cc      	bne.n	8007606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007672:	f000 f9f9 	bl	8007a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007676:	4b1d      	ldr	r3, [pc, #116]	; (80076ec <xTaskResumeAll+0x130>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d010      	beq.n	80076a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007682:	f000 f837 	bl	80076f4 <xTaskIncrementTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800768c:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <xTaskResumeAll+0x12c>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3b01      	subs	r3, #1
 8007696:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f1      	bne.n	8007682 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <xTaskResumeAll+0x130>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076a4:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <xTaskResumeAll+0x12c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d009      	beq.n	80076c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076ac:	2301      	movs	r3, #1
 80076ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <xTaskResumeAll+0x134>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076c0:	f000 fb94 	bl	8007dec <vPortExitCritical>

	return xAlreadyYielded;
 80076c4:	68bb      	ldr	r3, [r7, #8]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200002c4 	.word	0x200002c4
 80076d4:	2000029c 	.word	0x2000029c
 80076d8:	2000025c 	.word	0x2000025c
 80076dc:	200002a4 	.word	0x200002a4
 80076e0:	200001a0 	.word	0x200001a0
 80076e4:	2000019c 	.word	0x2000019c
 80076e8:	200002b0 	.word	0x200002b0
 80076ec:	200002ac 	.word	0x200002ac
 80076f0:	e000ed04 	.word	0xe000ed04

080076f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076fe:	4b50      	ldr	r3, [pc, #320]	; (8007840 <xTaskIncrementTick+0x14c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 808c 	bne.w	8007820 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8007708:	4b4e      	ldr	r3, [pc, #312]	; (8007844 <xTaskIncrementTick+0x150>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007710:	4a4c      	ldr	r2, [pc, #304]	; (8007844 <xTaskIncrementTick+0x150>)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11f      	bne.n	800775c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800771c:	4b4a      	ldr	r3, [pc, #296]	; (8007848 <xTaskIncrementTick+0x154>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <xTaskIncrementTick+0x46>
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	e7fe      	b.n	8007738 <xTaskIncrementTick+0x44>
 800773a:	4b43      	ldr	r3, [pc, #268]	; (8007848 <xTaskIncrementTick+0x154>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	4b42      	ldr	r3, [pc, #264]	; (800784c <xTaskIncrementTick+0x158>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a40      	ldr	r2, [pc, #256]	; (8007848 <xTaskIncrementTick+0x154>)
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	4a40      	ldr	r2, [pc, #256]	; (800784c <xTaskIncrementTick+0x158>)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	4b40      	ldr	r3, [pc, #256]	; (8007850 <xTaskIncrementTick+0x15c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	4a3e      	ldr	r2, [pc, #248]	; (8007850 <xTaskIncrementTick+0x15c>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	f000 f986 	bl	8007a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800775c:	4b3d      	ldr	r3, [pc, #244]	; (8007854 <xTaskIncrementTick+0x160>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d34d      	bcc.n	8007802 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007766:	4b38      	ldr	r3, [pc, #224]	; (8007848 <xTaskIncrementTick+0x154>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <xTaskIncrementTick+0x80>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <xTaskIncrementTick+0x82>
 8007774:	2300      	movs	r3, #0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777a:	4b36      	ldr	r3, [pc, #216]	; (8007854 <xTaskIncrementTick+0x160>)
 800777c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007780:	601a      	str	r2, [r3, #0]
					break;
 8007782:	e03e      	b.n	8007802 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007784:	4b30      	ldr	r3, [pc, #192]	; (8007848 <xTaskIncrementTick+0x154>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d203      	bcs.n	80077a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800779c:	4a2d      	ldr	r2, [pc, #180]	; (8007854 <xTaskIncrementTick+0x160>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
						break;
 80077a2:	e02e      	b.n	8007802 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fd2b 	bl	8007204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3318      	adds	r3, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fd22 	bl	8007204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	2201      	movs	r2, #1
 80077c6:	409a      	lsls	r2, r3
 80077c8:	4b23      	ldr	r3, [pc, #140]	; (8007858 <xTaskIncrementTick+0x164>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	4a22      	ldr	r2, [pc, #136]	; (8007858 <xTaskIncrementTick+0x164>)
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4a1f      	ldr	r2, [pc, #124]	; (800785c <xTaskIncrementTick+0x168>)
 80077e0:	441a      	add	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	4610      	mov	r0, r2
 80077ea:	f7ff fcae 	bl	800714a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <xTaskIncrementTick+0x16c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d3b4      	bcc.n	8007766 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007800:	e7b1      	b.n	8007766 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007802:	4b17      	ldr	r3, [pc, #92]	; (8007860 <xTaskIncrementTick+0x16c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4914      	ldr	r1, [pc, #80]	; (800785c <xTaskIncrementTick+0x168>)
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d907      	bls.n	800782a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800781a:	2301      	movs	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e004      	b.n	800782a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <xTaskIncrementTick+0x170>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	4a0f      	ldr	r2, [pc, #60]	; (8007864 <xTaskIncrementTick+0x170>)
 8007828:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <xTaskIncrementTick+0x174>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007836:	697b      	ldr	r3, [r7, #20]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	200002c4 	.word	0x200002c4
 8007844:	200002a0 	.word	0x200002a0
 8007848:	20000254 	.word	0x20000254
 800784c:	20000258 	.word	0x20000258
 8007850:	200002b4 	.word	0x200002b4
 8007854:	200002bc 	.word	0x200002bc
 8007858:	200002a4 	.word	0x200002a4
 800785c:	200001a0 	.word	0x200001a0
 8007860:	2000019c 	.word	0x2000019c
 8007864:	200002ac 	.word	0x200002ac
 8007868:	200002b0 	.word	0x200002b0

0800786c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <vTaskSwitchContext+0xa0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800787a:	4b25      	ldr	r3, [pc, #148]	; (8007910 <vTaskSwitchContext+0xa4>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007880:	e03e      	b.n	8007900 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007882:	4b23      	ldr	r3, [pc, #140]	; (8007910 <vTaskSwitchContext+0xa4>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007888:	4b22      	ldr	r3, [pc, #136]	; (8007914 <vTaskSwitchContext+0xa8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	fab3 f383 	clz	r3, r3
 8007894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	f1c3 031f 	rsb	r3, r3, #31
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	491e      	ldr	r1, [pc, #120]	; (8007918 <vTaskSwitchContext+0xac>)
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	440b      	add	r3, r1
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	e7fe      	b.n	80078c4 <vTaskSwitchContext+0x58>
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4a11      	ldr	r2, [pc, #68]	; (8007918 <vTaskSwitchContext+0xac>)
 80078d2:	4413      	add	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	605a      	str	r2, [r3, #4]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	3308      	adds	r3, #8
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d104      	bne.n	80078f6 <vTaskSwitchContext+0x8a>
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4a07      	ldr	r2, [pc, #28]	; (800791c <vTaskSwitchContext+0xb0>)
 80078fe:	6013      	str	r3, [r2, #0]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	200002c4 	.word	0x200002c4
 8007910:	200002b0 	.word	0x200002b0
 8007914:	200002a4 	.word	0x200002a4
 8007918:	200001a0 	.word	0x200001a0
 800791c:	2000019c 	.word	0x2000019c

08007920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007928:	f000 f852 	bl	80079d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <prvIdleTask+0x28>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d9f9      	bls.n	8007928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <prvIdleTask+0x2c>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007944:	e7f0      	b.n	8007928 <prvIdleTask+0x8>
 8007946:	bf00      	nop
 8007948:	200001a0 	.word	0x200001a0
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
 800795a:	e00c      	b.n	8007976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a12      	ldr	r2, [pc, #72]	; (80079b0 <prvInitialiseTaskLists+0x60>)
 8007968:	4413      	add	r3, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fbc0 	bl	80070f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3301      	adds	r3, #1
 8007974:	607b      	str	r3, [r7, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b06      	cmp	r3, #6
 800797a:	d9ef      	bls.n	800795c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800797c:	480d      	ldr	r0, [pc, #52]	; (80079b4 <prvInitialiseTaskLists+0x64>)
 800797e:	f7ff fbb7 	bl	80070f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007982:	480d      	ldr	r0, [pc, #52]	; (80079b8 <prvInitialiseTaskLists+0x68>)
 8007984:	f7ff fbb4 	bl	80070f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007988:	480c      	ldr	r0, [pc, #48]	; (80079bc <prvInitialiseTaskLists+0x6c>)
 800798a:	f7ff fbb1 	bl	80070f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800798e:	480c      	ldr	r0, [pc, #48]	; (80079c0 <prvInitialiseTaskLists+0x70>)
 8007990:	f7ff fbae 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007994:	480b      	ldr	r0, [pc, #44]	; (80079c4 <prvInitialiseTaskLists+0x74>)
 8007996:	f7ff fbab 	bl	80070f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800799a:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <prvInitialiseTaskLists+0x78>)
 800799c:	4a05      	ldr	r2, [pc, #20]	; (80079b4 <prvInitialiseTaskLists+0x64>)
 800799e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <prvInitialiseTaskLists+0x7c>)
 80079a2:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <prvInitialiseTaskLists+0x68>)
 80079a4:	601a      	str	r2, [r3, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200001a0 	.word	0x200001a0
 80079b4:	2000022c 	.word	0x2000022c
 80079b8:	20000240 	.word	0x20000240
 80079bc:	2000025c 	.word	0x2000025c
 80079c0:	20000270 	.word	0x20000270
 80079c4:	20000288 	.word	0x20000288
 80079c8:	20000254 	.word	0x20000254
 80079cc:	20000258 	.word	0x20000258

080079d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079d6:	e028      	b.n	8007a2a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80079d8:	f7ff fde2 	bl	80075a0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <prvCheckTasksWaitingTermination+0x6c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80079ec:	f7ff fde6 	bl	80075bc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d119      	bne.n	8007a2a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80079f6:	f000 f9cb 	bl	8007d90 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <prvCheckTasksWaitingTermination+0x6c>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fbfc 	bl	8007204 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <prvCheckTasksWaitingTermination+0x70>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <prvCheckTasksWaitingTermination+0x70>)
 8007a14:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <prvCheckTasksWaitingTermination+0x74>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <prvCheckTasksWaitingTermination+0x74>)
 8007a1e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8007a20:	f000 f9e4 	bl	8007dec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8007a24:	6838      	ldr	r0, [r7, #0]
 8007a26:	f000 f80f 	bl	8007a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <prvCheckTasksWaitingTermination+0x74>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1d2      	bne.n	80079d8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000270 	.word	0x20000270
 8007a40:	2000029c 	.word	0x2000029c
 8007a44:	20000284 	.word	0x20000284

08007a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fb2f 	bl	80080b8 <vPortFree>
			vPortFree( pxTCB );
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fb2c 	bl	80080b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <prvResetNextTaskUnblockTime+0x44>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <prvResetNextTaskUnblockTime+0x14>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <prvResetNextTaskUnblockTime+0x16>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvResetNextTaskUnblockTime+0x48>)
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a8a:	e008      	b.n	8007a9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <prvResetNextTaskUnblockTime+0x44>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <prvResetNextTaskUnblockTime+0x48>)
 8007a9c:	6013      	str	r3, [r2, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000254 	.word	0x20000254
 8007ab0:	200002bc 	.word	0x200002bc

08007ab4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007abe:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ac4:	4b28      	ldr	r3, [pc, #160]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fb9a 	bl	8007204 <uxListRemove>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	2201      	movs	r2, #1
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	43da      	mvns	r2, r3
 8007ae4:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	4a20      	ldr	r2, [pc, #128]	; (8007b6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af4:	d10a      	bne.n	8007b0c <prvAddCurrentTaskToDelayedList+0x58>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afc:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4619      	mov	r1, r3
 8007b04:	481a      	ldr	r0, [pc, #104]	; (8007b70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b06:	f7ff fb20 	bl	800714a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b0a:	e026      	b.n	8007b5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b14:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d209      	bcs.n	8007b38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7ff fb2e 	bl	8007192 <vListInsert>
}
 8007b36:	e010      	b.n	8007b5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b38:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7ff fb24 	bl	8007192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d202      	bcs.n	8007b5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b54:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6013      	str	r3, [r2, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	200002a0 	.word	0x200002a0
 8007b68:	2000019c 	.word	0x2000019c
 8007b6c:	200002a4 	.word	0x200002a4
 8007b70:	20000288 	.word	0x20000288
 8007b74:	20000258 	.word	0x20000258
 8007b78:	20000254 	.word	0x20000254
 8007b7c:	200002bc 	.word	0x200002bc

08007b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b04      	subs	r3, #4
 8007b90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bb0:	4a0c      	ldr	r2, [pc, #48]	; (8007be4 <pxPortInitialiseStack+0x64>)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3b14      	subs	r3, #20
 8007bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f06f 0202 	mvn.w	r2, #2
 8007bce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3b20      	subs	r3, #32
 8007bd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	08007be9 	.word	0x08007be9

08007be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <prvTaskExitError+0x38>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf6:	d009      	beq.n	8007c0c <prvTaskExitError+0x24>
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e7fe      	b.n	8007c0a <prvTaskExitError+0x22>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8007c1e:	e7fe      	b.n	8007c1e <prvTaskExitError+0x36>
 8007c20:	20000114 	.word	0x20000114
	...

08007c30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	4770      	bx	lr
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst2>:
 8007c50:	2000019c 	.word	0x2000019c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c58:	4806      	ldr	r0, [pc, #24]	; (8007c74 <prvPortStartFirstTask+0x1c>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	b662      	cpsie	i
 8007c64:	b661      	cpsie	f
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	df00      	svc	0
 8007c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c72:	bf00      	nop
 8007c74:	e000ed08 	.word	0xe000ed08

08007c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c7e:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <xPortStartScheduler+0xf4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a3b      	ldr	r2, [pc, #236]	; (8007d70 <xPortStartScheduler+0xf8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d109      	bne.n	8007c9c <xPortStartScheduler+0x24>
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	e7fe      	b.n	8007c9a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c9c:	4b33      	ldr	r3, [pc, #204]	; (8007d6c <xPortStartScheduler+0xf4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a34      	ldr	r2, [pc, #208]	; (8007d74 <xPortStartScheduler+0xfc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d109      	bne.n	8007cba <xPortStartScheduler+0x42>
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e7fe      	b.n	8007cb8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cba:	4b2f      	ldr	r3, [pc, #188]	; (8007d78 <xPortStartScheduler+0x100>)
 8007cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	22ff      	movs	r2, #255	; 0xff
 8007cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4b27      	ldr	r3, [pc, #156]	; (8007d7c <xPortStartScheduler+0x104>)
 8007ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ce2:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <xPortStartScheduler+0x108>)
 8007ce4:	2207      	movs	r2, #7
 8007ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce8:	e009      	b.n	8007cfe <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007cea:	4b25      	ldr	r3, [pc, #148]	; (8007d80 <xPortStartScheduler+0x108>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <xPortStartScheduler+0x108>)
 8007cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d0ef      	beq.n	8007cea <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <xPortStartScheduler+0x108>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <xPortStartScheduler+0x108>)
 8007d12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d14:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <xPortStartScheduler+0x108>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d1c:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <xPortStartScheduler+0x108>)
 8007d1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d28:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <xPortStartScheduler+0x10c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <xPortStartScheduler+0x10c>)
 8007d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d34:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <xPortStartScheduler+0x10c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a12      	ldr	r2, [pc, #72]	; (8007d84 <xPortStartScheduler+0x10c>)
 8007d3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d40:	f000 f8d2 	bl	8007ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <xPortStartScheduler+0x110>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d4a:	f000 f8e9 	bl	8007f20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <xPortStartScheduler+0x114>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <xPortStartScheduler+0x114>)
 8007d54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d5a:	f7ff ff7d 	bl	8007c58 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8007d5e:	f7ff ff43 	bl	8007be8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	e000ed00 	.word	0xe000ed00
 8007d70:	410fc271 	.word	0x410fc271
 8007d74:	410fc270 	.word	0x410fc270
 8007d78:	e000e400 	.word	0xe000e400
 8007d7c:	200002c8 	.word	0x200002c8
 8007d80:	200002cc 	.word	0x200002cc
 8007d84:	e000ed20 	.word	0xe000ed20
 8007d88:	20000114 	.word	0x20000114
 8007d8c:	e000ef34 	.word	0xe000ef34

08007d90 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <vPortEnterCritical+0x54>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	4a0d      	ldr	r2, [pc, #52]	; (8007de4 <vPortEnterCritical+0x54>)
 8007db0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007db2:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <vPortEnterCritical+0x54>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d10e      	bne.n	8007dd8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dba:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <vPortEnterCritical+0x58>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <vPortEnterCritical+0x48>
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	e7fe      	b.n	8007dd6 <vPortEnterCritical+0x46>
	}
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	20000114 	.word	0x20000114
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007df2:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <vPortExitCritical+0x4c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <vPortExitCritical+0x22>
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	e7fe      	b.n	8007e0c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vPortExitCritical+0x4c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <vPortExitCritical+0x4c>)
 8007e16:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <vPortExitCritical+0x4c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <vPortExitCritical+0x3e>
 8007e20:	2300      	movs	r3, #0
 8007e22:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000114 	.word	0x20000114
 8007e3c:	00000000 	.word	0x00000000

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7ff fcfc 	bl	800786c <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc08      	pop	{r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	2000019c 	.word	0x2000019c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec0:	f7ff fc18 	bl	80076f4 <xTaskIncrementTick>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <SysTick_Handler+0x3c>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eec:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <vPortSetupTimerInterrupt+0x28>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <vPortSetupTimerInterrupt+0x2c>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	4a07      	ldr	r2, [pc, #28]	; (8007f18 <vPortSetupTimerInterrupt+0x30>)
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007efe:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <vPortSetupTimerInterrupt+0x34>)
 8007f00:	2207      	movs	r2, #7
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000118 	.word	0x20000118
 8007f14:	10624dd3 	.word	0x10624dd3
 8007f18:	e000e014 	.word	0xe000e014
 8007f1c:	e000e010 	.word	0xe000e010

08007f20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f30 <vPortEnableVFP+0x10>
 8007f24:	6801      	ldr	r1, [r0, #0]
 8007f26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f2a:	6001      	str	r1, [r0, #0]
 8007f2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f2e:	bf00      	nop
 8007f30:	e000ed88 	.word	0xe000ed88

08007f34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f40:	f7ff fb2e 	bl	80075a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f44:	4b57      	ldr	r3, [pc, #348]	; (80080a4 <pvPortMalloc+0x170>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f4c:	f000 f90c 	bl	8008168 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f50:	4b55      	ldr	r3, [pc, #340]	; (80080a8 <pvPortMalloc+0x174>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 808c 	bne.w	8008076 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01c      	beq.n	8007f9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007f64:	2208      	movs	r2, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d013      	beq.n	8007f9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f023 0307 	bic.w	r3, r3, #7
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <pvPortMalloc+0x6a>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	e7fe      	b.n	8007f9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d068      	beq.n	8008076 <pvPortMalloc+0x142>
 8007fa4:	4b41      	ldr	r3, [pc, #260]	; (80080ac <pvPortMalloc+0x178>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d863      	bhi.n	8008076 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fae:	4b40      	ldr	r3, [pc, #256]	; (80080b0 <pvPortMalloc+0x17c>)
 8007fb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fb2:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <pvPortMalloc+0x17c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fb8:	e004      	b.n	8007fc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d903      	bls.n	8007fd6 <pvPortMalloc+0xa2>
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f1      	bne.n	8007fba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fd6:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <pvPortMalloc+0x170>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d04a      	beq.n	8008076 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	4413      	add	r3, r2
 8007fe8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	1ad2      	subs	r2, r2, r3
 8007ffa:	2308      	movs	r3, #8
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d91e      	bls.n	8008040 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4413      	add	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <pvPortMalloc+0xf4>
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	613b      	str	r3, [r7, #16]
 8008026:	e7fe      	b.n	8008026 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	1ad2      	subs	r2, r2, r3
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800803a:	69b8      	ldr	r0, [r7, #24]
 800803c:	f000 f8f6 	bl	800822c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <pvPortMalloc+0x178>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	4a18      	ldr	r2, [pc, #96]	; (80080ac <pvPortMalloc+0x178>)
 800804c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800804e:	4b17      	ldr	r3, [pc, #92]	; (80080ac <pvPortMalloc+0x178>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <pvPortMalloc+0x180>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d203      	bcs.n	8008062 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800805a:	4b14      	ldr	r3, [pc, #80]	; (80080ac <pvPortMalloc+0x178>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <pvPortMalloc+0x180>)
 8008060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <pvPortMalloc+0x174>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	431a      	orrs	r2, r3
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008076:	f7ff faa1 	bl	80075bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <pvPortMalloc+0x164>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e7fe      	b.n	8008096 <pvPortMalloc+0x162>
	return pvReturn;
 8008098:	69fb      	ldr	r3, [r7, #28]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3728      	adds	r7, #40	; 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200022d8 	.word	0x200022d8
 80080a8:	200022e4 	.word	0x200022e4
 80080ac:	200022dc 	.word	0x200022dc
 80080b0:	200022d0 	.word	0x200022d0
 80080b4:	200022e0 	.word	0x200022e0

080080b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d046      	beq.n	8008158 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080ca:	2308      	movs	r3, #8
 80080cc:	425b      	negs	r3, r3
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b20      	ldr	r3, [pc, #128]	; (8008160 <vPortFree+0xa8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4013      	ands	r3, r2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d109      	bne.n	80080fa <vPortFree+0x42>
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e7fe      	b.n	80080f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <vPortFree+0x5e>
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60bb      	str	r3, [r7, #8]
 8008114:	e7fe      	b.n	8008114 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	4b11      	ldr	r3, [pc, #68]	; (8008160 <vPortFree+0xa8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d019      	beq.n	8008158 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d115      	bne.n	8008158 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <vPortFree+0xa8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	43db      	mvns	r3, r3
 8008136:	401a      	ands	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800813c:	f7ff fa30 	bl	80075a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	4b07      	ldr	r3, [pc, #28]	; (8008164 <vPortFree+0xac>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4413      	add	r3, r2
 800814a:	4a06      	ldr	r2, [pc, #24]	; (8008164 <vPortFree+0xac>)
 800814c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800814e:	6938      	ldr	r0, [r7, #16]
 8008150:	f000 f86c 	bl	800822c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008154:	f7ff fa32 	bl	80075bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008158:	bf00      	nop
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200022e4 	.word	0x200022e4
 8008164:	200022dc 	.word	0x200022dc

08008168 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800816e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008172:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008174:	4b27      	ldr	r3, [pc, #156]	; (8008214 <prvHeapInit+0xac>)
 8008176:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00c      	beq.n	800819c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3307      	adds	r3, #7
 8008186:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0307 	bic.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	4a1f      	ldr	r2, [pc, #124]	; (8008214 <prvHeapInit+0xac>)
 8008198:	4413      	add	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081a0:	4a1d      	ldr	r2, [pc, #116]	; (8008218 <prvHeapInit+0xb0>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <prvHeapInit+0xb0>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081b4:	2208      	movs	r2, #8
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0307 	bic.w	r3, r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a15      	ldr	r2, [pc, #84]	; (800821c <prvHeapInit+0xb4>)
 80081c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <prvHeapInit+0xb4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2200      	movs	r2, #0
 80081d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081d2:	4b12      	ldr	r3, [pc, #72]	; (800821c <prvHeapInit+0xb4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081e8:	4b0c      	ldr	r3, [pc, #48]	; (800821c <prvHeapInit+0xb4>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	4a0a      	ldr	r2, [pc, #40]	; (8008220 <prvHeapInit+0xb8>)
 80081f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4a09      	ldr	r2, [pc, #36]	; (8008224 <prvHeapInit+0xbc>)
 80081fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <prvHeapInit+0xc0>)
 8008202:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008206:	601a      	str	r2, [r3, #0]
}
 8008208:	bf00      	nop
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	200002d0 	.word	0x200002d0
 8008218:	200022d0 	.word	0x200022d0
 800821c:	200022d8 	.word	0x200022d8
 8008220:	200022e0 	.word	0x200022e0
 8008224:	200022dc 	.word	0x200022dc
 8008228:	200022e4 	.word	0x200022e4

0800822c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008234:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <prvInsertBlockIntoFreeList+0xac>)
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	e002      	b.n	8008240 <prvInsertBlockIntoFreeList+0x14>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	d8f7      	bhi.n	800823a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4413      	add	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	429a      	cmp	r2, r3
 800825a:	d108      	bne.n	800826e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	441a      	add	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d118      	bne.n	80082b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <prvInsertBlockIntoFreeList+0xb0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d00d      	beq.n	80082aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	441a      	add	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	e008      	b.n	80082bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082aa:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <prvInsertBlockIntoFreeList+0xb0>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e003      	b.n	80082bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d002      	beq.n	80082ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	200022d0 	.word	0x200022d0
 80082dc:	200022d8 	.word	0x200022d8

080082e0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80082e6:	463b      	mov	r3, r7
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	609a      	str	r2, [r3, #8]
 80082f0:	60da      	str	r2, [r3, #12]
 80082f2:	611a      	str	r2, [r3, #16]
 80082f4:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80082f6:	4b26      	ldr	r3, [pc, #152]	; (8008390 <MX_ADC2_Init+0xb0>)
 80082f8:	4a26      	ldr	r2, [pc, #152]	; (8008394 <MX_ADC2_Init+0xb4>)
 80082fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80082fc:	4b24      	ldr	r3, [pc, #144]	; (8008390 <MX_ADC2_Init+0xb0>)
 80082fe:	2200      	movs	r2, #0
 8008300:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008302:	4b23      	ldr	r3, [pc, #140]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008304:	2200      	movs	r2, #0
 8008306:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008308:	4b21      	ldr	r3, [pc, #132]	; (8008390 <MX_ADC2_Init+0xb0>)
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800830e:	4b20      	ldr	r3, [pc, #128]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008310:	2200      	movs	r2, #0
 8008312:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008314:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008316:	2200      	movs	r2, #0
 8008318:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <MX_ADC2_Init+0xb0>)
 800831c:	2200      	movs	r2, #0
 800831e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008322:	2201      	movs	r2, #1
 8008324:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008328:	2200      	movs	r2, #0
 800832a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800832c:	4b18      	ldr	r3, [pc, #96]	; (8008390 <MX_ADC2_Init+0xb0>)
 800832e:	2201      	movs	r2, #1
 8008330:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8008332:	4b17      	ldr	r3, [pc, #92]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008334:	2200      	movs	r2, #0
 8008336:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008338:	4b15      	ldr	r3, [pc, #84]	; (8008390 <MX_ADC2_Init+0xb0>)
 800833a:	2204      	movs	r2, #4
 800833c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800833e:	4b14      	ldr	r3, [pc, #80]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008340:	2200      	movs	r2, #0
 8008342:	619a      	str	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008344:	4b12      	ldr	r3, [pc, #72]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008346:	2200      	movs	r2, #0
 8008348:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800834a:	4811      	ldr	r0, [pc, #68]	; (8008390 <MX_ADC2_Init+0xb0>)
 800834c:	f7f7 ff76 	bl	800023c <HAL_ADC_Init>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8008356:	f000 faf3 	bl	8008940 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800835a:	2301      	movs	r3, #1
 800835c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800835e:	2301      	movs	r3, #1
 8008360:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008372:	463b      	mov	r3, r7
 8008374:	4619      	mov	r1, r3
 8008376:	4806      	ldr	r0, [pc, #24]	; (8008390 <MX_ADC2_Init+0xb0>)
 8008378:	f7f8 f940 	bl	80005fc <HAL_ADC_ConfigChannel>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8008382:	f000 fadd 	bl	8008940 <Error_Handler>
  }

}
 8008386:	bf00      	nop
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	2000250c 	.word	0x2000250c
 8008394:	50000100 	.word	0x50000100

08008398 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	609a      	str	r2, [r3, #8]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <HAL_ADC_MspInit+0x74>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d124      	bne.n	8008404 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	4a14      	ldr	r2, [pc, #80]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6153      	str	r3, [r2, #20]
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	4a0e      	ldr	r2, [pc, #56]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083dc:	6153      	str	r3, [r2, #20]
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <HAL_ADC_MspInit+0x78>)
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = ADCA_Pin|ADCB_Pin|ADCC_Pin;
 80083ea:	2370      	movs	r3, #112	; 0x70
 80083ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083ee:	2303      	movs	r3, #3
 80083f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f6:	f107 0314 	add.w	r3, r7, #20
 80083fa:	4619      	mov	r1, r3
 80083fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008400:	f7f9 f89c 	bl	800153c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8008404:	bf00      	nop
 8008406:	3728      	adds	r7, #40	; 0x28
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	50000100 	.word	0x50000100
 8008410:	40021000 	.word	0x40021000

08008414 <MX_COMP2_Init>:
COMP_HandleTypeDef hcomp3;
COMP_HandleTypeDef hcomp4;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8008418:	4b14      	ldr	r3, [pc, #80]	; (800846c <MX_COMP2_Init+0x58>)
 800841a:	4a15      	ldr	r2, [pc, #84]	; (8008470 <MX_COMP2_Init+0x5c>)
 800841c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <MX_COMP2_Init+0x58>)
 8008420:	2260      	movs	r2, #96	; 0x60
 8008422:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <MX_COMP2_Init+0x58>)
 8008426:	2280      	movs	r2, #128	; 0x80
 8008428:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <MX_COMP2_Init+0x58>)
 800842c:	227f      	movs	r2, #127	; 0x7f
 800842e:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 8008430:	4b0e      	ldr	r3, [pc, #56]	; (800846c <MX_COMP2_Init+0x58>)
 8008432:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008436:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8008438:	4b0c      	ldr	r3, [pc, #48]	; (800846c <MX_COMP2_Init+0x58>)
 800843a:	2200      	movs	r2, #0
 800843c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <MX_COMP2_Init+0x58>)
 8008440:	2200      	movs	r2, #0
 8008442:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_MEDIUMSPEED;
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <MX_COMP2_Init+0x58>)
 8008446:	2204      	movs	r2, #4
 8008448:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800844a:	4b08      	ldr	r3, [pc, #32]	; (800846c <MX_COMP2_Init+0x58>)
 800844c:	2200      	movs	r2, #0
 800844e:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <MX_COMP2_Init+0x58>)
 8008452:	2203      	movs	r2, #3
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8008456:	4805      	ldr	r0, [pc, #20]	; (800846c <MX_COMP2_Init+0x58>)
 8008458:	f7f8 fc1c 	bl	8000c94 <HAL_COMP_Init>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8008462:	f000 fa6d 	bl	8008940 <Error_Handler>
  }

}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	2000258c 	.word	0x2000258c
 8008470:	40010020 	.word	0x40010020

08008474 <MX_COMP3_Init>:
/* COMP3 init function */
void MX_COMP3_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0

  hcomp3.Instance = COMP3;
 8008478:	4b14      	ldr	r3, [pc, #80]	; (80084cc <MX_COMP3_Init+0x58>)
 800847a:	4a15      	ldr	r2, [pc, #84]	; (80084d0 <MX_COMP3_Init+0x5c>)
 800847c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <MX_COMP3_Init+0x58>)
 8008480:	2270      	movs	r2, #112	; 0x70
 8008482:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8008484:	4b11      	ldr	r3, [pc, #68]	; (80084cc <MX_COMP3_Init+0x58>)
 8008486:	2200      	movs	r2, #0
 8008488:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <MX_COMP3_Init+0x58>)
 800848c:	227f      	movs	r2, #127	; 0x7f
 800848e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <MX_COMP3_Init+0x58>)
 8008492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008496:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8008498:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <MX_COMP3_Init+0x58>)
 800849a:	2200      	movs	r2, #0
 800849c:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <MX_COMP3_Init+0x58>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_MEDIUMSPEED;
 80084a4:	4b09      	ldr	r3, [pc, #36]	; (80084cc <MX_COMP3_Init+0x58>)
 80084a6:	2204      	movs	r2, #4
 80084a8:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80084aa:	4b08      	ldr	r3, [pc, #32]	; (80084cc <MX_COMP3_Init+0x58>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <MX_COMP3_Init+0x58>)
 80084b2:	2203      	movs	r2, #3
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80084b6:	4805      	ldr	r0, [pc, #20]	; (80084cc <MX_COMP3_Init+0x58>)
 80084b8:	f7f8 fbec 	bl	8000c94 <HAL_COMP_Init>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <MX_COMP3_Init+0x52>
  {
    Error_Handler();
 80084c2:	f000 fa3d 	bl	8008940 <Error_Handler>
  }

}
 80084c6:	bf00      	nop
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200025b8 	.word	0x200025b8
 80084d0:	40010024 	.word	0x40010024

080084d4 <MX_COMP4_Init>:
/* COMP4 init function */
void MX_COMP4_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0

  hcomp4.Instance = COMP4;
 80084d8:	4b14      	ldr	r3, [pc, #80]	; (800852c <MX_COMP4_Init+0x58>)
 80084da:	4a15      	ldr	r2, [pc, #84]	; (8008530 <MX_COMP4_Init+0x5c>)
 80084dc:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <MX_COMP4_Init+0x58>)
 80084e0:	2270      	movs	r2, #112	; 0x70
 80084e2:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80084e4:	4b11      	ldr	r3, [pc, #68]	; (800852c <MX_COMP4_Init+0x58>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <MX_COMP4_Init+0x58>)
 80084ec:	227f      	movs	r2, #127	; 0x7f
 80084ee:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_INVERTED;
 80084f0:	4b0e      	ldr	r3, [pc, #56]	; (800852c <MX_COMP4_Init+0x58>)
 80084f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084f6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <MX_COMP4_Init+0x58>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <MX_COMP4_Init+0x58>)
 8008500:	2200      	movs	r2, #0
 8008502:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_MEDIUMSPEED;
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <MX_COMP4_Init+0x58>)
 8008506:	2204      	movs	r2, #4
 8008508:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800850a:	4b08      	ldr	r3, [pc, #32]	; (800852c <MX_COMP4_Init+0x58>)
 800850c:	2200      	movs	r2, #0
 800850e:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <MX_COMP4_Init+0x58>)
 8008512:	2203      	movs	r2, #3
 8008514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <MX_COMP4_Init+0x58>)
 8008518:	f7f8 fbbc 	bl	8000c94 <HAL_COMP_Init>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8008522:	f000 fa0d 	bl	8008940 <Error_Handler>
  }

}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20002560 	.word	0x20002560
 8008530:	40010028 	.word	0x40010028

08008534 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3a      	ldr	r2, [pc, #232]	; (800863c <HAL_COMP_MspInit+0x108>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d121      	bne.n	800859a <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008556:	4b3a      	ldr	r3, [pc, #232]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	4a39      	ldr	r2, [pc, #228]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 800855c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008560:	6153      	str	r3, [r2, #20]
 8008562:	4b37      	ldr	r3, [pc, #220]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration    
    PA2     ------> COMP2_INM
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = COMPB_NEG_Pin|COMPB_Pin;
 800856e:	230c      	movs	r3, #12
 8008570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008572:	2303      	movs	r3, #3
 8008574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800857a:	f107 0314 	add.w	r3, r7, #20
 800857e:	4619      	mov	r1, r3
 8008580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008584:	f7f8 ffda 	bl	800153c <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 8008588:	2200      	movs	r2, #0
 800858a:	2105      	movs	r1, #5
 800858c:	2040      	movs	r0, #64	; 0x40
 800858e:	f7f8 ffab 	bl	80014e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8008592:	2040      	movs	r0, #64	; 0x40
 8008594:	f7f8 ffc4 	bl	8001520 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(COMP4_5_6_IRQn);
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }
}
 8008598:	e04b      	b.n	8008632 <HAL_COMP_MspInit+0xfe>
  else if(compHandle->Instance==COMP3)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a29      	ldr	r2, [pc, #164]	; (8008644 <HAL_COMP_MspInit+0x110>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d121      	bne.n	80085e8 <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085a4:	4b26      	ldr	r3, [pc, #152]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	4a25      	ldr	r2, [pc, #148]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 80085aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085ae:	6153      	str	r3, [r2, #20]
 80085b0:	4b23      	ldr	r3, [pc, #140]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMPC_NEG_Pin|COMPC_Pin;
 80085bc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80085c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80085c2:	2303      	movs	r3, #3
 80085c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085ca:	f107 0314 	add.w	r3, r7, #20
 80085ce:	4619      	mov	r1, r3
 80085d0:	481d      	ldr	r0, [pc, #116]	; (8008648 <HAL_COMP_MspInit+0x114>)
 80085d2:	f7f8 ffb3 	bl	800153c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2105      	movs	r1, #5
 80085da:	2040      	movs	r0, #64	; 0x40
 80085dc:	f7f8 ff84 	bl	80014e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80085e0:	2040      	movs	r0, #64	; 0x40
 80085e2:	f7f8 ff9d 	bl	8001520 <HAL_NVIC_EnableIRQ>
}
 80085e6:	e024      	b.n	8008632 <HAL_COMP_MspInit+0xfe>
  else if(compHandle->Instance==COMP4)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a17      	ldr	r2, [pc, #92]	; (800864c <HAL_COMP_MspInit+0x118>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d11f      	bne.n	8008632 <HAL_COMP_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085f2:	4b13      	ldr	r3, [pc, #76]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	4a12      	ldr	r2, [pc, #72]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 80085f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085fc:	6153      	str	r3, [r2, #20]
 80085fe:	4b10      	ldr	r3, [pc, #64]	; (8008640 <HAL_COMP_MspInit+0x10c>)
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008606:	60bb      	str	r3, [r7, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800860a:	2305      	movs	r3, #5
 800860c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800860e:	2303      	movs	r3, #3
 8008610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008612:	2300      	movs	r3, #0
 8008614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008616:	f107 0314 	add.w	r3, r7, #20
 800861a:	4619      	mov	r1, r3
 800861c:	480a      	ldr	r0, [pc, #40]	; (8008648 <HAL_COMP_MspInit+0x114>)
 800861e:	f7f8 ff8d 	bl	800153c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP4_5_6_IRQn, 5, 0);
 8008622:	2200      	movs	r2, #0
 8008624:	2105      	movs	r1, #5
 8008626:	2041      	movs	r0, #65	; 0x41
 8008628:	f7f8 ff5e 	bl	80014e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP4_5_6_IRQn);
 800862c:	2041      	movs	r0, #65	; 0x41
 800862e:	f7f8 ff77 	bl	8001520 <HAL_NVIC_EnableIRQ>
}
 8008632:	bf00      	nop
 8008634:	3728      	adds	r7, #40	; 0x28
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40010020 	.word	0x40010020
 8008640:	40021000 	.word	0x40021000
 8008644:	40010024 	.word	0x40010024
 8008648:	48000400 	.word	0x48000400
 800864c:	40010028 	.word	0x40010028

08008650 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008650:	b5b0      	push	{r4, r5, r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <MX_FREERTOS_Init+0x2c>)
 8008658:	1d3c      	adds	r4, r7, #4
 800865a:	461d      	mov	r5, r3
 800865c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800865e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008664:	1d3b      	adds	r3, r7, #4
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fd06 	bl	800707a <osThreadCreate>
 800866e:	4602      	mov	r2, r0
 8008670:	4b03      	ldr	r3, [pc, #12]	; (8008680 <MX_FREERTOS_Init+0x30>)
 8008672:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008674:	bf00      	nop
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bdb0      	pop	{r4, r5, r7, pc}
 800867c:	08009d88 	.word	0x08009d88
 8008680:	200025e4 	.word	0x200025e4

08008684 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008684:	b5b0      	push	{r4, r5, r7, lr}
 8008686:	b096      	sub	sp, #88	; 0x58
 8008688:	af08      	add	r7, sp, #32
 800868a:	6078      	str	r0, [r7, #4]
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800868c:	f000 fe70 	bl	8009370 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN StartDefaultTask */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008690:	4b24      	ldr	r3, [pc, #144]	; (8008724 <StartDefaultTask+0xa0>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	4a23      	ldr	r2, [pc, #140]	; (8008724 <StartDefaultTask+0xa0>)
 8008696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800869a:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <StartDefaultTask+0xa4>)
 800869e:	2200      	movs	r2, #0
 80086a0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80086a2:	4b21      	ldr	r3, [pc, #132]	; (8008728 <StartDefaultTask+0xa4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a20      	ldr	r2, [pc, #128]	; (8008728 <StartDefaultTask+0xa4>)
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	6013      	str	r3, [r2, #0]
  	uint32_t max_period;
  }motor_config_t;*/

  motor_config_t mconf;

  mconf.compA = &hcomp4;
 80086ae:	4b1f      	ldr	r3, [pc, #124]	; (800872c <StartDefaultTask+0xa8>)
 80086b0:	60fb      	str	r3, [r7, #12]
  mconf.compB = &hcomp2;
 80086b2:	4b1f      	ldr	r3, [pc, #124]	; (8008730 <StartDefaultTask+0xac>)
 80086b4:	613b      	str	r3, [r7, #16]
  mconf.compC = &hcomp3;
 80086b6:	4b1f      	ldr	r3, [pc, #124]	; (8008734 <StartDefaultTask+0xb0>)
 80086b8:	617b      	str	r3, [r7, #20]
  mconf.tim = &htim2;
 80086ba:	4b1f      	ldr	r3, [pc, #124]	; (8008738 <StartDefaultTask+0xb4>)
 80086bc:	61bb      	str	r3, [r7, #24]
  mconf.high_a = TIM_CHANNEL_1;
 80086be:	2300      	movs	r3, #0
 80086c0:	61fb      	str	r3, [r7, #28]
  mconf.high_b = TIM_CHANNEL_3;
 80086c2:	2308      	movs	r3, #8
 80086c4:	623b      	str	r3, [r7, #32]
  mconf.high_c = TIM_CHANNEL_2;
 80086c6:	2304      	movs	r3, #4
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
  mconf.port = GPIOE;
 80086ca:	4b1c      	ldr	r3, [pc, #112]	; (800873c <StartDefaultTask+0xb8>)
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
  mconf.low_a = LOW_A_Pin;
 80086ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  mconf.low_b = LOW_B_Pin;
 80086d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  mconf.low_c = LOW_C_Pin;
 80086da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086de:	863b      	strh	r3, [r7, #48]	; 0x30
  mconf.max_period = 1600;
 80086e0:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
  init_motor(mconf);
 80086e6:	466d      	mov	r5, sp
 80086e8:	f107 041c 	add.w	r4, r7, #28
 80086ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80086f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086fe:	f000 f927 	bl	8008950 <init_motor>
  set_motor_power(0.15);
 8008702:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008740 <StartDefaultTask+0xbc>
 8008706:	f000 fac3 	bl	8008c90 <set_motor_power>
  commutate_irq();
 800870a:	f000 fa4b 	bl	8008ba4 <commutate_irq>
  osDelay(200);
 800870e:	20c8      	movs	r0, #200	; 0xc8
 8008710:	f7fe fcda 	bl	80070c8 <osDelay>
  set_motor_power(0.15);
 8008714:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8008740 <StartDefaultTask+0xbc>
 8008718:	f000 faba 	bl	8008c90 <set_motor_power>
  /* Infinite loop */
  for(;;)
  {
	  //commutate_irq();
	  osDelay(100);
 800871c:	2064      	movs	r0, #100	; 0x64
 800871e:	f7fe fcd3 	bl	80070c8 <osDelay>
 8008722:	e7fb      	b.n	800871c <StartDefaultTask+0x98>
 8008724:	e000edf0 	.word	0xe000edf0
 8008728:	e0001000 	.word	0xe0001000
 800872c:	20002560 	.word	0x20002560
 8008730:	2000258c 	.word	0x2000258c
 8008734:	200025b8 	.word	0x200025b8
 8008738:	20002674 	.word	0x20002674
 800873c:	48001000 	.word	0x48001000
 8008740:	3e19999a 	.word	0x3e19999a

08008744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08a      	sub	sp, #40	; 0x28
 8008748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800874a:	f107 0314 	add.w	r3, r7, #20
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	605a      	str	r2, [r3, #4]
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800875a:	4b32      	ldr	r3, [pc, #200]	; (8008824 <MX_GPIO_Init+0xe0>)
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008764:	6153      	str	r3, [r2, #20]
 8008766:	4b2f      	ldr	r3, [pc, #188]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008772:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	4a2b      	ldr	r2, [pc, #172]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800877c:	6153      	str	r3, [r2, #20]
 800877e:	4b29      	ldr	r3, [pc, #164]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800878a:	4b26      	ldr	r3, [pc, #152]	; (8008824 <MX_GPIO_Init+0xe0>)
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4a25      	ldr	r2, [pc, #148]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008794:	6153      	str	r3, [r2, #20]
 8008796:	4b23      	ldr	r3, [pc, #140]	; (8008824 <MX_GPIO_Init+0xe0>)
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800879e:	60bb      	str	r3, [r7, #8]
 80087a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80087a2:	4b20      	ldr	r3, [pc, #128]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087ac:	6153      	str	r3, [r2, #20]
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087b6:	607b      	str	r3, [r7, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	4a19      	ldr	r2, [pc, #100]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087c4:	6153      	str	r3, [r2, #20]
 80087c6:	4b17      	ldr	r3, [pc, #92]	; (8008824 <MX_GPIO_Init+0xe0>)
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LOW_A_Pin|LOW_B_Pin|LOW_C_Pin, GPIO_PIN_RESET);
 80087d2:	2200      	movs	r2, #0
 80087d4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80087d8:	4813      	ldr	r0, [pc, #76]	; (8008828 <MX_GPIO_Init+0xe4>)
 80087da:	f7f9 f82d 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LOW_A_Pin|LOW_B_Pin;
 80087de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087e4:	2301      	movs	r3, #1
 80087e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087ec:	2303      	movs	r3, #3
 80087ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80087f0:	f107 0314 	add.w	r3, r7, #20
 80087f4:	4619      	mov	r1, r3
 80087f6:	480c      	ldr	r0, [pc, #48]	; (8008828 <MX_GPIO_Init+0xe4>)
 80087f8:	f7f8 fea0 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LOW_C_Pin;
 80087fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008802:	2301      	movs	r3, #1
 8008804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880a:	2300      	movs	r3, #0
 800880c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LOW_C_GPIO_Port, &GPIO_InitStruct);
 800880e:	f107 0314 	add.w	r3, r7, #20
 8008812:	4619      	mov	r1, r3
 8008814:	4804      	ldr	r0, [pc, #16]	; (8008828 <MX_GPIO_Init+0xe4>)
 8008816:	f7f8 fe91 	bl	800153c <HAL_GPIO_Init>

}
 800881a:	bf00      	nop
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	40021000 	.word	0x40021000
 8008828:	48001000 	.word	0x48001000

0800882c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008830:	f7f7 fcce 	bl	80001d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008834:	f000 f812 	bl	800885c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008838:	f7ff ff84 	bl	8008744 <MX_GPIO_Init>
  MX_ADC2_Init();
 800883c:	f7ff fd50 	bl	80082e0 <MX_ADC2_Init>
  MX_COMP2_Init();
 8008840:	f7ff fde8 	bl	8008414 <MX_COMP2_Init>
  MX_COMP3_Init();
 8008844:	f7ff fe16 	bl	8008474 <MX_COMP3_Init>
  MX_TIM2_Init();
 8008848:	f000 fc76 	bl	8009138 <MX_TIM2_Init>
  MX_COMP4_Init();
 800884c:	f7ff fe42 	bl	80084d4 <MX_COMP4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008850:	f7ff fefe 	bl	8008650 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008854:	f7fe fc0a 	bl	800706c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008858:	e7fe      	b.n	8008858 <main+0x2c>
	...

0800885c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b09e      	sub	sp, #120	; 0x78
 8008860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008862:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008866:	2228      	movs	r2, #40	; 0x28
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fa6e 	bl	8009d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008880:	463b      	mov	r3, r7
 8008882:	223c      	movs	r2, #60	; 0x3c
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fa60 	bl	8009d4c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800888c:	2301      	movs	r3, #1
 800888e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008894:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008896:	2300      	movs	r3, #0
 8008898:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800889a:	2301      	movs	r3, #1
 800889c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800889e:	2302      	movs	r3, #2
 80088a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80088a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fa febc 	bl	8003630 <HAL_RCC_OscConfig>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80088be:	f000 f83f 	bl	8008940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088c2:	230f      	movs	r3, #15
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088c6:	2302      	movs	r3, #2
 80088c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088ca:	2300      	movs	r3, #0
 80088cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088d4:	2300      	movs	r3, #0
 80088d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80088d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80088dc:	2101      	movs	r1, #1
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fb fd94 	bl	800440c <HAL_RCC_ClockConfig>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80088ea:	f000 f829 	bl	8008940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12;
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <SystemClock_Config+0xbc>)
 80088f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80088f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80088f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088fe:	463b      	mov	r3, r7
 8008900:	4618      	mov	r0, r3
 8008902:	f7fb ffc9 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800890c:	f000 f818 	bl	8008940 <Error_Handler>
  }
}
 8008910:	bf00      	nop
 8008912:	3778      	adds	r7, #120	; 0x78
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	00020080 	.word	0x00020080

0800891c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a04      	ldr	r2, [pc, #16]	; (800893c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d101      	bne.n	8008932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800892e:	f7f7 fc65 	bl	80001fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40012c00 	.word	0x40012c00

08008940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <init_motor>:
#include "motor_control.h"

motor_t motor;	//Private state variable
motor_config_t config;

int init_motor(motor_config_t conf){
 8008950:	b084      	sub	sp, #16
 8008952:	b5b0      	push	{r4, r5, r7, lr}
 8008954:	af00      	add	r7, sp, #0
 8008956:	f107 0410 	add.w	r4, r7, #16
 800895a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	config = conf;
 800895e:	4b1b      	ldr	r3, [pc, #108]	; (80089cc <init_motor+0x7c>)
 8008960:	461c      	mov	r4, r3
 8008962:	f107 0510 	add.w	r5, r7, #16
 8008966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800896a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800896c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800896e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motor.period = 0;
 8008976:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <init_motor+0x80>)
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
	motor.state = ABC;
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <init_motor+0x80>)
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(config.tim);
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <init_motor+0x7c>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4618      	mov	r0, r3
 800898a:	f7fc f960 	bl	8004c4e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(config.tim, config.high_a);
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <init_motor+0x7c>)
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <init_motor+0x7c>)
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f7fc f9c3 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(config.tim, config.high_b);
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <init_motor+0x7c>)
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <init_motor+0x7c>)
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f7fc f9bb 	bl	8004d24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(config.tim, config.high_c);
 80089ae:	4b07      	ldr	r3, [pc, #28]	; (80089cc <init_motor+0x7c>)
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <init_motor+0x7c>)
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f7fc f9b3 	bl	8004d24 <HAL_TIM_PWM_Start>

	return 1;
 80089be:	2301      	movs	r3, #1
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	46bd      	mov	sp, r7
 80089c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80089c8:	b004      	add	sp, #16
 80089ca:	4770      	bx	lr
 80089cc:	20002608 	.word	0x20002608
 80089d0:	200025e8 	.word	0x200025e8

080089d4 <commutate>:

int commutate(motor_t mot){
 80089d4:	b084      	sub	sp, #16
 80089d6:	b580      	push	{r7, lr}
 80089d8:	af00      	add	r7, sp, #0
 80089da:	f107 0c08 	add.w	ip, r7, #8
 80089de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Set all low
	switch(motor.state){
 80089e2:	4b6e      	ldr	r3, [pc, #440]	; (8008b9c <commutate+0x1c8>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	f200 80d0 	bhi.w	8008b8c <commutate+0x1b8>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <commutate+0x20>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008a8d 	.word	0x08008a8d
 8008a00:	08008acd 	.word	0x08008acd
 8008a04:	08008b0d 	.word	0x08008b0d
 8008a08:	08008b4d 	.word	0x08008b4d
		case ABC:
			debounce_comp(config.compA);
 8008a0c:	4b64      	ldr	r3, [pc, #400]	; (8008ba0 <commutate+0x1cc>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fa57 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008a16:	f000 f94b 	bl	8008cb0 <turn_off>
			set_low_side(config.low_b);
 8008a1a:	4b61      	ldr	r3, [pc, #388]	; (8008ba0 <commutate+0x1cc>)
 8008a1c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f924 	bl	8008c6c <set_low_side>
			set_period(config.high_a, motor.period);
 8008a24:	4b5e      	ldr	r3, [pc, #376]	; (8008ba0 <commutate+0x1cc>)
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	4b5c      	ldr	r3, [pc, #368]	; (8008b9c <commutate+0x1c8>)
 8008a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a32:	4610      	mov	r0, r2
 8008a34:	f000 f8ca 	bl	8008bcc <set_period>
			switch_comparator(config.compC, COMP_TRIGGERMODE_IT_FALLING);
 8008a38:	4b59      	ldr	r3, [pc, #356]	; (8008ba0 <commutate+0x1cc>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f9f2 	bl	8008e28 <switch_comparator>
			motor.state = ACB;
 8008a44:	4b55      	ldr	r3, [pc, #340]	; (8008b9c <commutate+0x1c8>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
			break;
 8008a4a:	e0a0      	b.n	8008b8e <commutate+0x1ba>
		case ACB:
			debounce_comp(config.compC);
 8008a4c:	4b54      	ldr	r3, [pc, #336]	; (8008ba0 <commutate+0x1cc>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fa37 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008a56:	f000 f92b 	bl	8008cb0 <turn_off>
			set_low_side(config.low_c);
 8008a5a:	4b51      	ldr	r3, [pc, #324]	; (8008ba0 <commutate+0x1cc>)
 8008a5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f904 	bl	8008c6c <set_low_side>
			set_period(config.high_a, motor.period);
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <commutate+0x1cc>)
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	4b4c      	ldr	r3, [pc, #304]	; (8008b9c <commutate+0x1c8>)
 8008a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a72:	4610      	mov	r0, r2
 8008a74:	f000 f8aa 	bl	8008bcc <set_period>
			switch_comparator(config.compB, COMP_TRIGGERMODE_IT_RISING);
 8008a78:	4b49      	ldr	r3, [pc, #292]	; (8008ba0 <commutate+0x1cc>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f9d2 	bl	8008e28 <switch_comparator>
			motor.state = BCA;
 8008a84:	4b45      	ldr	r3, [pc, #276]	; (8008b9c <commutate+0x1c8>)
 8008a86:	2202      	movs	r2, #2
 8008a88:	701a      	strb	r2, [r3, #0]
			break;
 8008a8a:	e080      	b.n	8008b8e <commutate+0x1ba>
		case BCA:
			debounce_comp(config.compB);
 8008a8c:	4b44      	ldr	r3, [pc, #272]	; (8008ba0 <commutate+0x1cc>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fa17 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008a96:	f000 f90b 	bl	8008cb0 <turn_off>
			set_low_side(config.low_c);
 8008a9a:	4b41      	ldr	r3, [pc, #260]	; (8008ba0 <commutate+0x1cc>)
 8008a9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f8e4 	bl	8008c6c <set_low_side>
			set_period(config.high_b, motor.period);
 8008aa4:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <commutate+0x1cc>)
 8008aa6:	695a      	ldr	r2, [r3, #20]
 8008aa8:	4b3c      	ldr	r3, [pc, #240]	; (8008b9c <commutate+0x1c8>)
 8008aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8008aae:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f000 f88a 	bl	8008bcc <set_period>
			switch_comparator(config.compA, COMP_TRIGGERMODE_IT_FALLING);
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <commutate+0x1cc>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2102      	movs	r1, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f9b2 	bl	8008e28 <switch_comparator>
			motor.state = BAC;
 8008ac4:	4b35      	ldr	r3, [pc, #212]	; (8008b9c <commutate+0x1c8>)
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	701a      	strb	r2, [r3, #0]
			break;
 8008aca:	e060      	b.n	8008b8e <commutate+0x1ba>
		case BAC:
			debounce_comp(config.compA);
 8008acc:	4b34      	ldr	r3, [pc, #208]	; (8008ba0 <commutate+0x1cc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f9f7 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008ad6:	f000 f8eb 	bl	8008cb0 <turn_off>
			set_low_side(config.low_a);
 8008ada:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <commutate+0x1cc>)
 8008adc:	8c1b      	ldrh	r3, [r3, #32]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f8c4 	bl	8008c6c <set_low_side>
			set_period(config.high_b, motor.period);
 8008ae4:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <commutate+0x1cc>)
 8008ae6:	695a      	ldr	r2, [r3, #20]
 8008ae8:	4b2c      	ldr	r3, [pc, #176]	; (8008b9c <commutate+0x1c8>)
 8008aea:	edd3 7a02 	vldr	s15, [r3, #8]
 8008aee:	eeb0 0a67 	vmov.f32	s0, s15
 8008af2:	4610      	mov	r0, r2
 8008af4:	f000 f86a 	bl	8008bcc <set_period>
			switch_comparator(config.compC, COMP_TRIGGERMODE_IT_RISING);
 8008af8:	4b29      	ldr	r3, [pc, #164]	; (8008ba0 <commutate+0x1cc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f992 	bl	8008e28 <switch_comparator>
			motor.state = CAB;
 8008b04:	4b25      	ldr	r3, [pc, #148]	; (8008b9c <commutate+0x1c8>)
 8008b06:	2204      	movs	r2, #4
 8008b08:	701a      	strb	r2, [r3, #0]
			break;
 8008b0a:	e040      	b.n	8008b8e <commutate+0x1ba>
		case CAB:
			debounce_comp(config.compC);
 8008b0c:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <commutate+0x1cc>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f9d7 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008b16:	f000 f8cb 	bl	8008cb0 <turn_off>
			set_low_side(config.low_a);
 8008b1a:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <commutate+0x1cc>)
 8008b1c:	8c1b      	ldrh	r3, [r3, #32]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 f8a4 	bl	8008c6c <set_low_side>
			set_period(config.high_c, motor.period);
 8008b24:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <commutate+0x1cc>)
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <commutate+0x1c8>)
 8008b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b32:	4610      	mov	r0, r2
 8008b34:	f000 f84a 	bl	8008bcc <set_period>
			switch_comparator(config.compB, COMP_TRIGGERMODE_IT_FALLING);
 8008b38:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <commutate+0x1cc>)
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2102      	movs	r1, #2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f972 	bl	8008e28 <switch_comparator>
			motor.state = CBA;
 8008b44:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <commutate+0x1c8>)
 8008b46:	2205      	movs	r2, #5
 8008b48:	701a      	strb	r2, [r3, #0]
			break;
 8008b4a:	e020      	b.n	8008b8e <commutate+0x1ba>
		case CBA:
			debounce_comp(config.compB);
 8008b4c:	4b14      	ldr	r3, [pc, #80]	; (8008ba0 <commutate+0x1cc>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f9b7 	bl	8008ec4 <debounce_comp>
			turn_off();
 8008b56:	f000 f8ab 	bl	8008cb0 <turn_off>
			set_low_side(config.low_b);
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <commutate+0x1cc>)
 8008b5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f884 	bl	8008c6c <set_low_side>
			set_period(config.high_c, motor.period);
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <commutate+0x1cc>)
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <commutate+0x1c8>)
 8008b6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b72:	4610      	mov	r0, r2
 8008b74:	f000 f82a 	bl	8008bcc <set_period>
			switch_comparator(config.compA, COMP_TRIGGERMODE_IT_RISING);
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <commutate+0x1cc>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f952 	bl	8008e28 <switch_comparator>
			motor.state = ABC;
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <commutate+0x1c8>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
			break;
 8008b8a:	e000      	b.n	8008b8e <commutate+0x1ba>
		default:
			break;
 8008b8c:	bf00      	nop
	}
	return 1;
 8008b8e:	2301      	movs	r3, #1
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	46bd      	mov	sp, r7
 8008b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b98:	b004      	add	sp, #16
 8008b9a:	4770      	bx	lr
 8008b9c:	200025e8 	.word	0x200025e8
 8008ba0:	20002608 	.word	0x20002608

08008ba4 <commutate_irq>:

int commutate_irq(){
 8008ba4:	b5b0      	push	{r4, r5, r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af04      	add	r7, sp, #16
	commutate(motor);
 8008baa:	4c07      	ldr	r4, [pc, #28]	; (8008bc8 <commutate_irq+0x24>)
 8008bac:	466d      	mov	r5, sp
 8008bae:	f104 0310 	add.w	r3, r4, #16
 8008bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bb4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008bb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008bbc:	f7ff ff0a 	bl	80089d4 <commutate>
	return 1;
 8008bc0:	2301      	movs	r3, #1
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8008bc8:	200025e8 	.word	0x200025e8

08008bcc <set_period>:

void set_period(uint32_t pin, float period){
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	ed87 0a00 	vstr	s0, [r7]
	int iperiod = ((float)config.max_period * period);
 8008bd8:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <set_period+0x9c>)
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008be4:	edd7 7a00 	vldr	s15, [r7]
 8008be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bf0:	ee17 3a90 	vmov	r3, s15
 8008bf4:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <set_period+0x3c>
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <set_period+0x9c>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008c06:	e028      	b.n	8008c5a <set_period+0x8e>
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d105      	bne.n	8008c1a <set_period+0x4e>
 8008c0e:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <set_period+0x9c>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008c18:	e01f      	b.n	8008c5a <set_period+0x8e>
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d105      	bne.n	8008c2c <set_period+0x60>
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <set_period+0x9c>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c2a:	e016      	b.n	8008c5a <set_period+0x8e>
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b0c      	cmp	r3, #12
 8008c30:	d105      	bne.n	8008c3e <set_period+0x72>
 8008c32:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <set_period+0x9c>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008c3c:	e00d      	b.n	8008c5a <set_period+0x8e>
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d105      	bne.n	8008c50 <set_period+0x84>
 8008c44:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <set_period+0x9c>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008c4e:	e004      	b.n	8008c5a <set_period+0x8e>
	__HAL_TIM_SET_COMPARE(config.tim, pin, iperiod);
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <set_period+0x9c>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20002608 	.word	0x20002608

08008c6c <set_low_side>:

void set_low_side(uint16_t pin){
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(config.port, pin, 1);
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <set_low_side+0x20>)
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	88f9      	ldrh	r1, [r7, #6]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f8 fdda 	bl	8001838 <HAL_GPIO_WritePin>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20002608 	.word	0x20002608

08008c90 <set_motor_power>:

void set_motor_power(float power){
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	ed87 0a01 	vstr	s0, [r7, #4]
	motor.period = power;
 8008c9a:	4a04      	ldr	r2, [pc, #16]	; (8008cac <set_motor_power+0x1c>)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6093      	str	r3, [r2, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200025e8 	.word	0x200025e8

08008cb0 <turn_off>:

void turn_off(){
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(config.tim, config.high_a, 0);
 8008cb4:	4b5b      	ldr	r3, [pc, #364]	; (8008e24 <turn_off+0x174>)
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d105      	bne.n	8008cc8 <turn_off+0x18>
 8008cbc:	4b59      	ldr	r3, [pc, #356]	; (8008e24 <turn_off+0x174>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8008cc6:	e02c      	b.n	8008d22 <turn_off+0x72>
 8008cc8:	4b56      	ldr	r3, [pc, #344]	; (8008e24 <turn_off+0x174>)
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d105      	bne.n	8008cdc <turn_off+0x2c>
 8008cd0:	4b54      	ldr	r3, [pc, #336]	; (8008e24 <turn_off+0x174>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8008cda:	e022      	b.n	8008d22 <turn_off+0x72>
 8008cdc:	4b51      	ldr	r3, [pc, #324]	; (8008e24 <turn_off+0x174>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d105      	bne.n	8008cf0 <turn_off+0x40>
 8008ce4:	4b4f      	ldr	r3, [pc, #316]	; (8008e24 <turn_off+0x174>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8008cee:	e018      	b.n	8008d22 <turn_off+0x72>
 8008cf0:	4b4c      	ldr	r3, [pc, #304]	; (8008e24 <turn_off+0x174>)
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b0c      	cmp	r3, #12
 8008cf6:	d105      	bne.n	8008d04 <turn_off+0x54>
 8008cf8:	4b4a      	ldr	r3, [pc, #296]	; (8008e24 <turn_off+0x174>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	641a      	str	r2, [r3, #64]	; 0x40
 8008d02:	e00e      	b.n	8008d22 <turn_off+0x72>
 8008d04:	4b47      	ldr	r3, [pc, #284]	; (8008e24 <turn_off+0x174>)
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	d105      	bne.n	8008d18 <turn_off+0x68>
 8008d0c:	4b45      	ldr	r3, [pc, #276]	; (8008e24 <turn_off+0x174>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2200      	movs	r2, #0
 8008d14:	659a      	str	r2, [r3, #88]	; 0x58
 8008d16:	e004      	b.n	8008d22 <turn_off+0x72>
 8008d18:	4b42      	ldr	r3, [pc, #264]	; (8008e24 <turn_off+0x174>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(config.tim, config.high_b, 0);
 8008d22:	4b40      	ldr	r3, [pc, #256]	; (8008e24 <turn_off+0x174>)
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <turn_off+0x86>
 8008d2a:	4b3e      	ldr	r3, [pc, #248]	; (8008e24 <turn_off+0x174>)
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2200      	movs	r2, #0
 8008d32:	635a      	str	r2, [r3, #52]	; 0x34
 8008d34:	e02c      	b.n	8008d90 <turn_off+0xe0>
 8008d36:	4b3b      	ldr	r3, [pc, #236]	; (8008e24 <turn_off+0x174>)
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d105      	bne.n	8008d4a <turn_off+0x9a>
 8008d3e:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <turn_off+0x174>)
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
 8008d48:	e022      	b.n	8008d90 <turn_off+0xe0>
 8008d4a:	4b36      	ldr	r3, [pc, #216]	; (8008e24 <turn_off+0x174>)
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d105      	bne.n	8008d5e <turn_off+0xae>
 8008d52:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <turn_off+0x174>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d5c:	e018      	b.n	8008d90 <turn_off+0xe0>
 8008d5e:	4b31      	ldr	r3, [pc, #196]	; (8008e24 <turn_off+0x174>)
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b0c      	cmp	r3, #12
 8008d64:	d105      	bne.n	8008d72 <turn_off+0xc2>
 8008d66:	4b2f      	ldr	r3, [pc, #188]	; (8008e24 <turn_off+0x174>)
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8008d70:	e00e      	b.n	8008d90 <turn_off+0xe0>
 8008d72:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <turn_off+0x174>)
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d105      	bne.n	8008d86 <turn_off+0xd6>
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <turn_off+0x174>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2200      	movs	r2, #0
 8008d82:	659a      	str	r2, [r3, #88]	; 0x58
 8008d84:	e004      	b.n	8008d90 <turn_off+0xe0>
 8008d86:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <turn_off+0x174>)
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(config.tim, config.high_c, 0);
 8008d90:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <turn_off+0x174>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <turn_off+0xf4>
 8008d98:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <turn_off+0x174>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	635a      	str	r2, [r3, #52]	; 0x34
 8008da2:	e02c      	b.n	8008dfe <turn_off+0x14e>
 8008da4:	4b1f      	ldr	r3, [pc, #124]	; (8008e24 <turn_off+0x174>)
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d105      	bne.n	8008db8 <turn_off+0x108>
 8008dac:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <turn_off+0x174>)
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
 8008db6:	e022      	b.n	8008dfe <turn_off+0x14e>
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <turn_off+0x174>)
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d105      	bne.n	8008dcc <turn_off+0x11c>
 8008dc0:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <turn_off+0x174>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8008dca:	e018      	b.n	8008dfe <turn_off+0x14e>
 8008dcc:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <turn_off+0x174>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	d105      	bne.n	8008de0 <turn_off+0x130>
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <turn_off+0x174>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8008dde:	e00e      	b.n	8008dfe <turn_off+0x14e>
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <turn_off+0x174>)
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	2b10      	cmp	r3, #16
 8008de6:	d105      	bne.n	8008df4 <turn_off+0x144>
 8008de8:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <turn_off+0x174>)
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2200      	movs	r2, #0
 8008df0:	659a      	str	r2, [r3, #88]	; 0x58
 8008df2:	e004      	b.n	8008dfe <turn_off+0x14e>
 8008df4:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <turn_off+0x174>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_GPIO_WritePin(config.port, config.low_a | config.low_b | config.low_c, 0);
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <turn_off+0x174>)
 8008e00:	69d8      	ldr	r0, [r3, #28]
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <turn_off+0x174>)
 8008e04:	8c1a      	ldrh	r2, [r3, #32]
 8008e06:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <turn_off+0x174>)
 8008e08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <turn_off+0x174>)
 8008e10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e12:	4313      	orrs	r3, r2
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2200      	movs	r2, #0
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7f8 fd0d 	bl	8001838 <HAL_GPIO_WritePin>
}
 8008e1e:	bf00      	nop
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20002608 	.word	0x20002608

08008e28 <switch_comparator>:

void switch_comparator(COMP_HandleTypeDef* comp, uint32_t mode){
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	if(comp != config.compA) HAL_COMP_Stop_IT(config.compA);
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <switch_comparator+0x98>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d004      	beq.n	8008e46 <switch_comparator+0x1e>
 8008e3c:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <switch_comparator+0x98>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f8 f963 	bl	800110c <HAL_COMP_Stop_IT>
	if(comp != config.compB) HAL_COMP_Stop_IT(config.compB);
 8008e46:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <switch_comparator+0x98>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d004      	beq.n	8008e5a <switch_comparator+0x32>
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <switch_comparator+0x98>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f8 f959 	bl	800110c <HAL_COMP_Stop_IT>
	if(comp != config.compC) HAL_COMP_Stop_IT(config.compC);
 8008e5a:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <switch_comparator+0x98>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d004      	beq.n	8008e6e <switch_comparator+0x46>
 8008e64:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <switch_comparator+0x98>)
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7f8 f94f 	bl	800110c <HAL_COMP_Stop_IT>
	config.compA->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <switch_comparator+0x98>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2200      	movs	r2, #0
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24
	config.compB->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <switch_comparator+0x98>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	625a      	str	r2, [r3, #36]	; 0x24
	config.compC->Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <switch_comparator+0x98>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_COMP_Init(config.compA);
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <switch_comparator+0x98>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f7 ff02 	bl	8000c94 <HAL_COMP_Init>
	HAL_COMP_Init(config.compB);
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <switch_comparator+0x98>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f7 fefd 	bl	8000c94 <HAL_COMP_Init>
	HAL_COMP_Init(config.compC);
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <switch_comparator+0x98>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f7 fef8 	bl	8000c94 <HAL_COMP_Init>
	comp->Init.TriggerMode = mode;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_COMP_Init(comp);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f7 fef2 	bl	8000c94 <HAL_COMP_Init>
	HAL_COMP_Start_IT(comp);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7f8 f837 	bl	8000f24 <HAL_COMP_Start_IT>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20002608 	.word	0x20002608

08008ec4 <debounce_comp>:

void debounce_comp(COMP_HandleTypeDef* comp){
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	//HAL_COMP_Stop_IT(comp);
	//HAL_COMP_Start(comp);
	for(int i = 0; i < 30; i += 3) {
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	e019      	b.n	8008f06 <debounce_comp+0x42>
	    if(comp->Init.TriggerMode == COMP_TRIGGERMODE_IT_RISING)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d109      	bne.n	8008eee <debounce_comp+0x2a>
	    {
	      if(!HAL_COMP_GetOutputLevel(comp)) i -= 4;
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7f8 fa36 	bl	800134c <HAL_COMP_GetOutputLevel>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10c      	bne.n	8008f00 <debounce_comp+0x3c>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3b04      	subs	r3, #4
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e008      	b.n	8008f00 <debounce_comp+0x3c>
	    }
	    else
	    {
	      if(HAL_COMP_GetOutputLevel(comp))  i -= 4;
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f8 fa2c 	bl	800134c <HAL_COMP_GetOutputLevel>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <debounce_comp+0x3c>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 30; i += 3) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3303      	adds	r3, #3
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b1d      	cmp	r3, #29
 8008f0a:	dde2      	ble.n	8008ed2 <debounce_comp+0xe>
	    }
	  }
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	4a10      	ldr	r2, [pc, #64]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	6193      	str	r3, [r2, #24]
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3c:	61d3      	str	r3, [r2, #28]
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <HAL_MspInit+0x4c>)
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	210f      	movs	r1, #15
 8008f4e:	f06f 0001 	mvn.w	r0, #1
 8008f52:	f7f8 fac9 	bl	80014e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40021000 	.word	0x40021000

08008f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08c      	sub	sp, #48	; 0x30
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8008f74:	2200      	movs	r2, #0
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	2019      	movs	r0, #25
 8008f7a:	f7f8 fab5 	bl	80014e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8008f7e:	2019      	movs	r0, #25
 8008f80:	f7f8 face 	bl	8001520 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8008f84:	4b1e      	ldr	r3, [pc, #120]	; (8009000 <HAL_InitTick+0x9c>)
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	4a1d      	ldr	r2, [pc, #116]	; (8009000 <HAL_InitTick+0x9c>)
 8008f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f8e:	6193      	str	r3, [r2, #24]
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <HAL_InitTick+0x9c>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f9c:	f107 0210 	add.w	r2, r7, #16
 8008fa0:	f107 0314 	add.w	r3, r7, #20
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fb fc44 	bl	8004834 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008fac:	f7fb fc20 	bl	80047f0 <HAL_RCC_GetPCLK2Freq>
 8008fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	4a13      	ldr	r2, [pc, #76]	; (8009004 <HAL_InitTick+0xa0>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	0c9b      	lsrs	r3, r3, #18
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <HAL_InitTick+0xa4>)
 8008fc2:	4a12      	ldr	r2, [pc, #72]	; (800900c <HAL_InitTick+0xa8>)
 8008fc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <HAL_InitTick+0xa4>)
 8008fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8008fce:	4a0e      	ldr	r2, [pc, #56]	; (8009008 <HAL_InitTick+0xa4>)
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <HAL_InitTick+0xa4>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <HAL_InitTick+0xa4>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008fe0:	4809      	ldr	r0, [pc, #36]	; (8009008 <HAL_InitTick+0xa4>)
 8008fe2:	f7fb fe09 	bl	8004bf8 <HAL_TIM_Base_Init>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8008fec:	4806      	ldr	r0, [pc, #24]	; (8009008 <HAL_InitTick+0xa4>)
 8008fee:	f7fb fe49 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	e000      	b.n	8008ff8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3730      	adds	r7, #48	; 0x30
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40021000 	.word	0x40021000
 8009004:	431bde83 	.word	0x431bde83
 8009008:	20002634 	.word	0x20002634
 800900c:	40012c00 	.word	0x40012c00

08009010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009014:	bf00      	nop
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009022:	e7fe      	b.n	8009022 <HardFault_Handler+0x4>

08009024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009028:	e7fe      	b.n	8009028 <MemManage_Handler+0x4>

0800902a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800902a:	b480      	push	{r7}
 800902c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800902e:	e7fe      	b.n	800902e <BusFault_Handler+0x4>

08009030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009034:	e7fe      	b.n	8009034 <UsageFault_Handler+0x4>

08009036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009036:	b480      	push	{r7}
 8009038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800903a:	bf00      	nop
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009048:	4802      	ldr	r0, [pc, #8]	; (8009054 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800904a:	f7f9 f825 	bl	8002098 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	200030a8 	.word	0x200030a8

08009058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800905c:	4802      	ldr	r0, [pc, #8]	; (8009068 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800905e:	f7fb feab 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009062:	bf00      	nop
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20002634 	.word	0x20002634

0800906c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */
	commutate_irq();
 8009070:	f7ff fd98 	bl	8008ba4 <commutate_irq>
  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8009074:	4803      	ldr	r0, [pc, #12]	; (8009084 <COMP1_2_3_IRQHandler+0x18>)
 8009076:	f7f8 f8ef 	bl	8001258 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 800907a:	4803      	ldr	r0, [pc, #12]	; (8009088 <COMP1_2_3_IRQHandler+0x1c>)
 800907c:	f7f8 f8ec 	bl	8001258 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}
 8009084:	2000258c 	.word	0x2000258c
 8009088:	200025b8 	.word	0x200025b8

0800908c <COMP4_5_6_IRQHandler>:

/**
  * @brief This function handles COMP4, COMP5 and COMP6 interrupts through EXTI lines 30, 31 and 32.
  */
void COMP4_5_6_IRQHandler(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_5_6_IRQn 0 */
	commutate_irq();
 8009090:	f7ff fd88 	bl	8008ba4 <commutate_irq>
  /* USER CODE END COMP4_5_6_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp4);
 8009094:	4802      	ldr	r0, [pc, #8]	; (80090a0 <COMP4_5_6_IRQHandler+0x14>)
 8009096:	f7f8 f8df 	bl	8001258 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP4_5_6_IRQn 1 */

  /* USER CODE END COMP4_5_6_IRQn 1 */
}
 800909a:	bf00      	nop
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20002560 	.word	0x20002560

080090a4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090a8:	4b1f      	ldr	r3, [pc, #124]	; (8009128 <SystemInit+0x84>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <SystemInit+0x84>)
 80090b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80090b8:	4b1c      	ldr	r3, [pc, #112]	; (800912c <SystemInit+0x88>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a1b      	ldr	r2, [pc, #108]	; (800912c <SystemInit+0x88>)
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80090c4:	4b19      	ldr	r3, [pc, #100]	; (800912c <SystemInit+0x88>)
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	4918      	ldr	r1, [pc, #96]	; (800912c <SystemInit+0x88>)
 80090ca:	4b19      	ldr	r3, [pc, #100]	; (8009130 <SystemInit+0x8c>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80090d0:	4b16      	ldr	r3, [pc, #88]	; (800912c <SystemInit+0x88>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a15      	ldr	r2, [pc, #84]	; (800912c <SystemInit+0x88>)
 80090d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80090da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80090e0:	4b12      	ldr	r3, [pc, #72]	; (800912c <SystemInit+0x88>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a11      	ldr	r2, [pc, #68]	; (800912c <SystemInit+0x88>)
 80090e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80090ec:	4b0f      	ldr	r3, [pc, #60]	; (800912c <SystemInit+0x88>)
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0e      	ldr	r2, [pc, #56]	; (800912c <SystemInit+0x88>)
 80090f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80090f6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <SystemInit+0x88>)
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a0b      	ldr	r2, [pc, #44]	; (800912c <SystemInit+0x88>)
 80090fe:	f023 030f 	bic.w	r3, r3, #15
 8009102:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <SystemInit+0x88>)
 8009106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009108:	4908      	ldr	r1, [pc, #32]	; (800912c <SystemInit+0x88>)
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <SystemInit+0x90>)
 800910c:	4013      	ands	r3, r2
 800910e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <SystemInit+0x88>)
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <SystemInit+0x84>)
 8009118:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800911c:	609a      	str	r2, [r3, #8]
#endif
}
 800911e:	bf00      	nop
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	e000ed00 	.word	0xe000ed00
 800912c:	40021000 	.word	0x40021000
 8009130:	f87fc00c 	.word	0xf87fc00c
 8009134:	ff00fccc 	.word	0xff00fccc

08009138 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08e      	sub	sp, #56	; 0x38
 800913c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800913e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	605a      	str	r2, [r3, #4]
 8009148:	609a      	str	r2, [r3, #8]
 800914a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800914c:	f107 031c 	add.w	r3, r7, #28
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009158:	463b      	mov	r3, r7
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	609a      	str	r2, [r3, #8]
 8009162:	60da      	str	r2, [r3, #12]
 8009164:	611a      	str	r2, [r3, #16]
 8009166:	615a      	str	r2, [r3, #20]
 8009168:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800916a:	4b38      	ldr	r3, [pc, #224]	; (800924c <MX_TIM2_Init+0x114>)
 800916c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009172:	4b36      	ldr	r3, [pc, #216]	; (800924c <MX_TIM2_Init+0x114>)
 8009174:	2200      	movs	r2, #0
 8009176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009178:	4b34      	ldr	r3, [pc, #208]	; (800924c <MX_TIM2_Init+0x114>)
 800917a:	2200      	movs	r2, #0
 800917c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 800917e:	4b33      	ldr	r3, [pc, #204]	; (800924c <MX_TIM2_Init+0x114>)
 8009180:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009186:	4b31      	ldr	r3, [pc, #196]	; (800924c <MX_TIM2_Init+0x114>)
 8009188:	2200      	movs	r2, #0
 800918a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800918c:	4b2f      	ldr	r3, [pc, #188]	; (800924c <MX_TIM2_Init+0x114>)
 800918e:	2280      	movs	r2, #128	; 0x80
 8009190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009192:	482e      	ldr	r0, [pc, #184]	; (800924c <MX_TIM2_Init+0x114>)
 8009194:	f7fb fd30 	bl	8004bf8 <HAL_TIM_Base_Init>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800919e:	f7ff fbcf 	bl	8008940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80091a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091ac:	4619      	mov	r1, r3
 80091ae:	4827      	ldr	r0, [pc, #156]	; (800924c <MX_TIM2_Init+0x114>)
 80091b0:	f7fb ff21 	bl	8004ff6 <HAL_TIM_ConfigClockSource>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80091ba:	f7ff fbc1 	bl	8008940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80091be:	4823      	ldr	r0, [pc, #140]	; (800924c <MX_TIM2_Init+0x114>)
 80091c0:	f7fb fd7b 	bl	8004cba <HAL_TIM_PWM_Init>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80091ca:	f7ff fbb9 	bl	8008940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80091d6:	f107 031c 	add.w	r3, r7, #28
 80091da:	4619      	mov	r1, r3
 80091dc:	481b      	ldr	r0, [pc, #108]	; (800924c <MX_TIM2_Init+0x114>)
 80091de:	f7fc fcaf 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80091e8:	f7ff fbaa 	bl	8008940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091ec:	2360      	movs	r3, #96	; 0x60
 80091ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80091f8:	2304      	movs	r3, #4
 80091fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80091fc:	463b      	mov	r3, r7
 80091fe:	2200      	movs	r2, #0
 8009200:	4619      	mov	r1, r3
 8009202:	4812      	ldr	r0, [pc, #72]	; (800924c <MX_TIM2_Init+0x114>)
 8009204:	f7fc fb84 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800920e:	f7ff fb97 	bl	8008940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009212:	463b      	mov	r3, r7
 8009214:	2204      	movs	r2, #4
 8009216:	4619      	mov	r1, r3
 8009218:	480c      	ldr	r0, [pc, #48]	; (800924c <MX_TIM2_Init+0x114>)
 800921a:	f7fc fb79 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8009224:	f7ff fb8c 	bl	8008940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009228:	463b      	mov	r3, r7
 800922a:	2208      	movs	r2, #8
 800922c:	4619      	mov	r1, r3
 800922e:	4807      	ldr	r0, [pc, #28]	; (800924c <MX_TIM2_Init+0x114>)
 8009230:	f7fc fb6e 	bl	8005910 <HAL_TIM_PWM_ConfigChannel>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800923a:	f7ff fb81 	bl	8008940 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800923e:	4803      	ldr	r0, [pc, #12]	; (800924c <MX_TIM2_Init+0x114>)
 8009240:	f000 f824 	bl	800928c <HAL_TIM_MspPostInit>

}
 8009244:	bf00      	nop
 8009246:	3738      	adds	r7, #56	; 0x38
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20002674 	.word	0x20002674

08009250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009260:	d10b      	bne.n	800927a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <HAL_TIM_Base_MspInit+0x38>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	4a08      	ldr	r2, [pc, #32]	; (8009288 <HAL_TIM_Base_MspInit+0x38>)
 8009268:	f043 0301 	orr.w	r3, r3, #1
 800926c:	61d3      	str	r3, [r2, #28]
 800926e:	4b06      	ldr	r3, [pc, #24]	; (8009288 <HAL_TIM_Base_MspInit+0x38>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40021000 	.word	0x40021000

0800928c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	609a      	str	r2, [r3, #8]
 80092a0:	60da      	str	r2, [r3, #12]
 80092a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ac:	d156      	bne.n	800935c <HAL_TIM_MspPostInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092ae:	4b2d      	ldr	r3, [pc, #180]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	4a2c      	ldr	r2, [pc, #176]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092b8:	6153      	str	r3, [r2, #20]
 80092ba:	4b2a      	ldr	r3, [pc, #168]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c6:	4b27      	ldr	r3, [pc, #156]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	4a26      	ldr	r2, [pc, #152]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d0:	6153      	str	r3, [r2, #20]
 80092d2:	4b24      	ldr	r3, [pc, #144]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80092de:	4b21      	ldr	r3, [pc, #132]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	4a20      	ldr	r2, [pc, #128]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092e8:	6153      	str	r3, [r2, #20]
 80092ea:	4b1e      	ldr	r3, [pc, #120]	; (8009364 <HAL_TIM_MspPostInit+0xd8>)
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f2:	60bb      	str	r3, [r7, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PD4     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = HIGH_B_Pin;
 80092f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fc:	2302      	movs	r3, #2
 80092fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009300:	2300      	movs	r3, #0
 8009302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009304:	2303      	movs	r3, #3
 8009306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009308:	2301      	movs	r3, #1
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIGH_B_GPIO_Port, &GPIO_InitStruct);
 800930c:	f107 0314 	add.w	r3, r7, #20
 8009310:	4619      	mov	r1, r3
 8009312:	4815      	ldr	r0, [pc, #84]	; (8009368 <HAL_TIM_MspPostInit+0xdc>)
 8009314:	f7f8 f912 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HIGH_A_Pin;
 8009318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931e:	2302      	movs	r3, #2
 8009320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009326:	2303      	movs	r3, #3
 8009328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800932a:	2301      	movs	r3, #1
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIGH_A_GPIO_Port, &GPIO_InitStruct);
 800932e:	f107 0314 	add.w	r3, r7, #20
 8009332:	4619      	mov	r1, r3
 8009334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009338:	f7f8 f900 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HIGH_C_Pin;
 800933c:	2310      	movs	r3, #16
 800933e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	2302      	movs	r3, #2
 8009342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009348:	2300      	movs	r3, #0
 800934a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800934c:	2302      	movs	r3, #2
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HIGH_C_GPIO_Port, &GPIO_InitStruct);
 8009350:	f107 0314 	add.w	r3, r7, #20
 8009354:	4619      	mov	r1, r3
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <HAL_TIM_MspPostInit+0xe0>)
 8009358:	f7f8 f8f0 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800935c:	bf00      	nop
 800935e:	3728      	adds	r7, #40	; 0x28
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40021000 	.word	0x40021000
 8009368:	48000400 	.word	0x48000400
 800936c:	48000c00 	.word	0x48000c00

08009370 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009374:	2200      	movs	r2, #0
 8009376:	4912      	ldr	r1, [pc, #72]	; (80093c0 <MX_USB_DEVICE_Init+0x50>)
 8009378:	4812      	ldr	r0, [pc, #72]	; (80093c4 <MX_USB_DEVICE_Init+0x54>)
 800937a:	f7fc ff3c 	bl	80061f6 <USBD_Init>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009384:	f7ff fadc 	bl	8008940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009388:	490f      	ldr	r1, [pc, #60]	; (80093c8 <MX_USB_DEVICE_Init+0x58>)
 800938a:	480e      	ldr	r0, [pc, #56]	; (80093c4 <MX_USB_DEVICE_Init+0x54>)
 800938c:	f7fc ff5e 	bl	800624c <USBD_RegisterClass>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009396:	f7ff fad3 	bl	8008940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800939a:	490c      	ldr	r1, [pc, #48]	; (80093cc <MX_USB_DEVICE_Init+0x5c>)
 800939c:	4809      	ldr	r0, [pc, #36]	; (80093c4 <MX_USB_DEVICE_Init+0x54>)
 800939e:	f7fc febb 	bl	8006118 <USBD_CDC_RegisterInterface>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093a8:	f7ff faca 	bl	8008940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093ac:	4805      	ldr	r0, [pc, #20]	; (80093c4 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fc ff67 	bl	8006280 <USBD_Start>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093b8:	f7ff fac2 	bl	8008940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093bc:	bf00      	nop
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	2000012c 	.word	0x2000012c
 80093c4:	200026b4 	.word	0x200026b4
 80093c8:	20000010 	.word	0x20000010
 80093cc:	2000011c 	.word	0x2000011c

080093d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093d4:	2200      	movs	r2, #0
 80093d6:	4905      	ldr	r1, [pc, #20]	; (80093ec <CDC_Init_FS+0x1c>)
 80093d8:	4805      	ldr	r0, [pc, #20]	; (80093f0 <CDC_Init_FS+0x20>)
 80093da:	f7fc feb4 	bl	8006146 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093de:	4905      	ldr	r1, [pc, #20]	; (80093f4 <CDC_Init_FS+0x24>)
 80093e0:	4803      	ldr	r0, [pc, #12]	; (80093f0 <CDC_Init_FS+0x20>)
 80093e2:	f7fc feca 	bl	800617a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20002cc0 	.word	0x20002cc0
 80093f0:	200026b4 	.word	0x200026b4
 80093f4:	200028d8 	.word	0x200028d8

080093f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093fe:	4618      	mov	r0, r3
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
 8009414:	4613      	mov	r3, r2
 8009416:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b23      	cmp	r3, #35	; 0x23
 800941c:	d84a      	bhi.n	80094b4 <CDC_Control_FS+0xac>
 800941e:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <CDC_Control_FS+0x1c>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	080094b5 	.word	0x080094b5
 8009428:	080094b5 	.word	0x080094b5
 800942c:	080094b5 	.word	0x080094b5
 8009430:	080094b5 	.word	0x080094b5
 8009434:	080094b5 	.word	0x080094b5
 8009438:	080094b5 	.word	0x080094b5
 800943c:	080094b5 	.word	0x080094b5
 8009440:	080094b5 	.word	0x080094b5
 8009444:	080094b5 	.word	0x080094b5
 8009448:	080094b5 	.word	0x080094b5
 800944c:	080094b5 	.word	0x080094b5
 8009450:	080094b5 	.word	0x080094b5
 8009454:	080094b5 	.word	0x080094b5
 8009458:	080094b5 	.word	0x080094b5
 800945c:	080094b5 	.word	0x080094b5
 8009460:	080094b5 	.word	0x080094b5
 8009464:	080094b5 	.word	0x080094b5
 8009468:	080094b5 	.word	0x080094b5
 800946c:	080094b5 	.word	0x080094b5
 8009470:	080094b5 	.word	0x080094b5
 8009474:	080094b5 	.word	0x080094b5
 8009478:	080094b5 	.word	0x080094b5
 800947c:	080094b5 	.word	0x080094b5
 8009480:	080094b5 	.word	0x080094b5
 8009484:	080094b5 	.word	0x080094b5
 8009488:	080094b5 	.word	0x080094b5
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094b5 	.word	0x080094b5
 8009498:	080094b5 	.word	0x080094b5
 800949c:	080094b5 	.word	0x080094b5
 80094a0:	080094b5 	.word	0x080094b5
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094b5 	.word	0x080094b5
 80094ac:	080094b5 	.word	0x080094b5
 80094b0:	080094b5 	.word	0x080094b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094b4:	bf00      	nop
  }

  return (USBD_OK);
 80094b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4805      	ldr	r0, [pc, #20]	; (80094e8 <CDC_Receive_FS+0x24>)
 80094d2:	f7fc fe52 	bl	800617a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094d6:	4804      	ldr	r0, [pc, #16]	; (80094e8 <CDC_Receive_FS+0x24>)
 80094d8:	f7fc fe63 	bl	80061a2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200026b4 	.word	0x200026b4

080094ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f4:	f107 0314 	add.w	r3, r7, #20
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	605a      	str	r2, [r3, #4]
 80094fe:	609a      	str	r2, [r3, #8]
 8009500:	60da      	str	r2, [r3, #12]
 8009502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1c      	ldr	r2, [pc, #112]	; (800957c <HAL_PCD_MspInit+0x90>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d131      	bne.n	8009572 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <HAL_PCD_MspInit+0x94>)
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	4a1b      	ldr	r2, [pc, #108]	; (8009580 <HAL_PCD_MspInit+0x94>)
 8009514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009518:	6153      	str	r3, [r2, #20]
 800951a:	4b19      	ldr	r3, [pc, #100]	; (8009580 <HAL_PCD_MspInit+0x94>)
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009526:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800952a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952c:	2302      	movs	r3, #2
 800952e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009534:	2303      	movs	r3, #3
 8009536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009538:	230e      	movs	r3, #14
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	4619      	mov	r1, r3
 8009542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009546:	f7f7 fff9 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800954a:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <HAL_PCD_MspInit+0x94>)
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	4a0c      	ldr	r2, [pc, #48]	; (8009580 <HAL_PCD_MspInit+0x94>)
 8009550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009554:	61d3      	str	r3, [r2, #28]
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <HAL_PCD_MspInit+0x94>)
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8009562:	2200      	movs	r2, #0
 8009564:	2105      	movs	r1, #5
 8009566:	2014      	movs	r0, #20
 8009568:	f7f7 ffbe 	bl	80014e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800956c:	2014      	movs	r0, #20
 800956e:	f7f7 ffd7 	bl	8001520 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009572:	bf00      	nop
 8009574:	3728      	adds	r7, #40	; 0x28
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	40005c00 	.word	0x40005c00
 8009580:	40021000 	.word	0x40021000

08009584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f7fc feb9 	bl	8006312 <USBD_LL_SetupStage>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	4619      	mov	r1, r3
 80095d2:	f7fc fee8 	bl	80063a6 <USBD_LL_DataOutStage>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	3338      	adds	r3, #56	; 0x38
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	4619      	mov	r1, r3
 8009606:	f7fc ff29 	bl	800645c <USBD_LL_DataInStage>
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fd f80f 	bl	8006644 <USBD_LL_SOF>
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d001      	beq.n	8009646 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009642:	f7ff f97d 	bl	8008940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800964c:	7bfa      	ldrb	r2, [r7, #15]
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f7fc ffc1 	bl	80065d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800965c:	4618      	mov	r0, r3
 800965e:	f7fc ff8c 	bl	800657a <USBD_LL_Reset>
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800967a:	4618      	mov	r0, r3
 800967c:	f7fc ffbc 	bl	80065f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009688:	4b04      	ldr	r3, [pc, #16]	; (800969c <HAL_PCD_SuspendCallback+0x30>)
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	4a03      	ldr	r2, [pc, #12]	; (800969c <HAL_PCD_SuspendCallback+0x30>)
 800968e:	f043 0306 	orr.w	r3, r3, #6
 8009692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	e000ed00 	.word	0xe000ed00

080096a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fc ffb7 	bl	8006622 <USBD_LL_Resume>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096c4:	4a28      	ldr	r2, [pc, #160]	; (8009768 <USBD_LL_Init+0xac>)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a26      	ldr	r2, [pc, #152]	; (8009768 <USBD_LL_Init+0xac>)
 80096d0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <USBD_LL_Init+0xac>)
 80096d6:	4a25      	ldr	r2, [pc, #148]	; (800976c <USBD_LL_Init+0xb0>)
 80096d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096da:	4b23      	ldr	r3, [pc, #140]	; (8009768 <USBD_LL_Init+0xac>)
 80096dc:	2208      	movs	r2, #8
 80096de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096e0:	4b21      	ldr	r3, [pc, #132]	; (8009768 <USBD_LL_Init+0xac>)
 80096e2:	2202      	movs	r2, #2
 80096e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096e6:	4b20      	ldr	r3, [pc, #128]	; (8009768 <USBD_LL_Init+0xac>)
 80096e8:	2202      	movs	r2, #2
 80096ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ec:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <USBD_LL_Init+0xac>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <USBD_LL_Init+0xac>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096f8:	481b      	ldr	r0, [pc, #108]	; (8009768 <USBD_LL_Init+0xac>)
 80096fa:	f7f8 f8b5 	bl	8001868 <HAL_PCD_Init>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009704:	f7ff f91c 	bl	8008940 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800970e:	2318      	movs	r3, #24
 8009710:	2200      	movs	r2, #0
 8009712:	2100      	movs	r1, #0
 8009714:	f7f9 feba 	bl	800348c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800971e:	2358      	movs	r3, #88	; 0x58
 8009720:	2200      	movs	r2, #0
 8009722:	2180      	movs	r1, #128	; 0x80
 8009724:	f7f9 feb2 	bl	800348c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800972e:	23c0      	movs	r3, #192	; 0xc0
 8009730:	2200      	movs	r2, #0
 8009732:	2181      	movs	r1, #129	; 0x81
 8009734:	f7f9 feaa 	bl	800348c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800973e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009742:	2200      	movs	r2, #0
 8009744:	2101      	movs	r1, #1
 8009746:	f7f9 fea1 	bl	800348c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009754:	2200      	movs	r2, #0
 8009756:	2182      	movs	r1, #130	; 0x82
 8009758:	f7f9 fe98 	bl	800348c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200030a8 	.word	0x200030a8
 800976c:	40005c00 	.word	0x40005c00

08009770 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009786:	4618      	mov	r0, r3
 8009788:	f7f8 f94e 	bl	8001a28 <HAL_PCD_Start>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f952 	bl	8009a3c <USBD_Get_USB_Status>
 8009798:	4603      	mov	r3, r0
 800979a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800979c:	7bbb      	ldrb	r3, [r7, #14]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	4608      	mov	r0, r1
 80097b0:	4611      	mov	r1, r2
 80097b2:	461a      	mov	r2, r3
 80097b4:	4603      	mov	r3, r0
 80097b6:	70fb      	strb	r3, [r7, #3]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70bb      	strb	r3, [r7, #2]
 80097bc:	4613      	mov	r3, r2
 80097be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80097ce:	78bb      	ldrb	r3, [r7, #2]
 80097d0:	883a      	ldrh	r2, [r7, #0]
 80097d2:	78f9      	ldrb	r1, [r7, #3]
 80097d4:	f7f8 fd58 	bl	8002288 <HAL_PCD_EP_Open>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f92c 	bl	8009a3c <USBD_Get_USB_Status>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7f9 f8b5 	bl	8002980 <HAL_PCD_EP_Close>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f90d 	bl	8009a3c <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009826:	7bbb      	ldrb	r3, [r7, #14]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7f9 fc9a 	bl	8003188 <HAL_PCD_EP_SetStall>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 f8ee 	bl	8009a3c <USBD_Get_USB_Status>
 8009860:	4603      	mov	r3, r0
 8009862:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009864:	7bbb      	ldrb	r3, [r7, #14]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7f9 fd23 	bl	80032d8 <HAL_PCD_EP_ClrStall>
 8009892:	4603      	mov	r3, r0
 8009894:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f8cf 	bl	8009a3c <USBD_Get_USB_Status>
 800989e:	4603      	mov	r3, r0
 80098a0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80098be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80098c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da0b      	bge.n	80098e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	332a      	adds	r3, #42	; 0x2a
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	e00b      	b.n	80098f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80098f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f8 fc87 	bl	8002236 <HAL_PCD_SetAddress>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f884 	bl	8009a3c <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	461a      	mov	r2, r3
 800994e:	460b      	mov	r3, r1
 8009950:	72fb      	strb	r3, [r7, #11]
 8009952:	4613      	mov	r3, r2
 8009954:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009964:	893b      	ldrh	r3, [r7, #8]
 8009966:	7af9      	ldrb	r1, [r7, #11]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	f7f9 fb2b 	bl	8002fc4 <HAL_PCD_EP_Transmit>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 f861 	bl	8009a3c <USBD_Get_USB_Status>
 800997a:	4603      	mov	r3, r0
 800997c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800997e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	461a      	mov	r2, r3
 8009994:	460b      	mov	r3, r1
 8009996:	72fb      	strb	r3, [r7, #11]
 8009998:	4613      	mov	r3, r2
 800999a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80099aa:	893b      	ldrh	r3, [r7, #8]
 80099ac:	7af9      	ldrb	r1, [r7, #11]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	f7f9 f9ee 	bl	8002d90 <HAL_PCD_EP_Receive>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f83e 	bl	8009a3c <USBD_Get_USB_Status>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80099c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7f9 fad3 	bl	8002f90 <HAL_PCD_EP_GetRxCount>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099fc:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <USBD_static_malloc+0x18>)
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	200022e8 	.word	0x200022e8

08009a10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d817      	bhi.n	8009a80 <USBD_Get_USB_Status+0x44>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_Get_USB_Status+0x1c>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a69 	.word	0x08009a69
 8009a5c:	08009a6f 	.word	0x08009a6f
 8009a60:	08009a75 	.word	0x08009a75
 8009a64:	08009a7b 	.word	0x08009a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6c:	e00b      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	73fb      	strb	r3, [r7, #15]
    break;
 8009a72:	e008      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e005      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7e:	e002      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	73fb      	strb	r3, [r7, #15]
    break;
 8009a84:	bf00      	nop
  }
  return usb_status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2212      	movs	r2, #18
 8009aa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009aa6:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	20000148 	.word	0x20000148

08009ab8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2204      	movs	r2, #4
 8009ac8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009aca:	4b03      	ldr	r3, [pc, #12]	; (8009ad8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	2000015c 	.word	0x2000015c

08009adc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d105      	bne.n	8009afa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	4907      	ldr	r1, [pc, #28]	; (8009b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009af2:	4808      	ldr	r0, [pc, #32]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009af4:	f7fd f9c3 	bl	8006e7e <USBD_GetString>
 8009af8:	e004      	b.n	8009b04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	4904      	ldr	r1, [pc, #16]	; (8009b10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009afe:	4805      	ldr	r0, [pc, #20]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b00:	f7fd f9bd 	bl	8006e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b04:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20003450 	.word	0x20003450
 8009b14:	08009d9c 	.word	0x08009d9c

08009b18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6039      	str	r1, [r7, #0]
 8009b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	4904      	ldr	r1, [pc, #16]	; (8009b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b28:	4804      	ldr	r0, [pc, #16]	; (8009b3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b2a:	f7fd f9a8 	bl	8006e7e <USBD_GetString>
  return USBD_StrDesc;
 8009b2e:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20003450 	.word	0x20003450
 8009b3c:	08009db4 	.word	0x08009db4

08009b40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	221a      	movs	r2, #26
 8009b50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b52:	f000 f843 	bl	8009bdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b56:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000160 	.word	0x20000160

08009b64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d105      	bne.n	8009b82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4907      	ldr	r1, [pc, #28]	; (8009b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b7a:	4808      	ldr	r0, [pc, #32]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b7c:	f7fd f97f 	bl	8006e7e <USBD_GetString>
 8009b80:	e004      	b.n	8009b8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	4904      	ldr	r1, [pc, #16]	; (8009b98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b86:	4805      	ldr	r0, [pc, #20]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b88:	f7fd f979 	bl	8006e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b8c:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20003450 	.word	0x20003450
 8009b9c:	08009dc8 	.word	0x08009dc8

08009ba0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	6039      	str	r1, [r7, #0]
 8009baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4907      	ldr	r1, [pc, #28]	; (8009bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bb6:	4808      	ldr	r0, [pc, #32]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bb8:	f7fd f961 	bl	8006e7e <USBD_GetString>
 8009bbc:	e004      	b.n	8009bc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4904      	ldr	r1, [pc, #16]	; (8009bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bc2:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bc4:	f7fd f95b 	bl	8006e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc8:	4b02      	ldr	r3, [pc, #8]	; (8009bd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20003450 	.word	0x20003450
 8009bd8:	08009dd4 	.word	0x08009dd4

08009bdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009be2:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <Get_SerialNum+0x44>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <Get_SerialNum+0x48>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bee:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <Get_SerialNum+0x4c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c02:	2208      	movs	r2, #8
 8009c04:	4909      	ldr	r1, [pc, #36]	; (8009c2c <Get_SerialNum+0x50>)
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 f814 	bl	8009c34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c0c:	2204      	movs	r2, #4
 8009c0e:	4908      	ldr	r1, [pc, #32]	; (8009c30 <Get_SerialNum+0x54>)
 8009c10:	68b8      	ldr	r0, [r7, #8]
 8009c12:	f000 f80f 	bl	8009c34 <IntToUnicode>
  }
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	1ffff7ac 	.word	0x1ffff7ac
 8009c24:	1ffff7b0 	.word	0x1ffff7b0
 8009c28:	1ffff7b4 	.word	0x1ffff7b4
 8009c2c:	20000162 	.word	0x20000162
 8009c30:	20000172 	.word	0x20000172

08009c34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]
 8009c4a:	e027      	b.n	8009c9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0f1b      	lsrs	r3, r3, #28
 8009c50:	2b09      	cmp	r3, #9
 8009c52:	d80b      	bhi.n	8009c6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	0f1b      	lsrs	r3, r3, #28
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	440b      	add	r3, r1
 8009c64:	3230      	adds	r2, #48	; 0x30
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	e00a      	b.n	8009c82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	0f1b      	lsrs	r3, r3, #28
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4619      	mov	r1, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3237      	adds	r2, #55	; 0x37
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	75fb      	strb	r3, [r7, #23]
 8009c9c:	7dfa      	ldrb	r2, [r7, #23]
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d3d3      	bcc.n	8009c4c <IntToUnicode+0x18>
  }
}
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ce8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009cb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009cb6:	e003      	b.n	8009cc0 <LoopCopyDataInit>

08009cb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009cba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009cbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009cbe:	3104      	adds	r1, #4

08009cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009cc0:	480b      	ldr	r0, [pc, #44]	; (8009cf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009cc2:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009cc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009cc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009cc8:	d3f6      	bcc.n	8009cb8 <CopyDataInit>
	ldr	r2, =_sbss
 8009cca:	4a0b      	ldr	r2, [pc, #44]	; (8009cf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009ccc:	e002      	b.n	8009cd4 <LoopFillZerobss>

08009cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009cce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009cd0:	f842 3b04 	str.w	r3, [r2], #4

08009cd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009cd4:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <LoopForever+0x16>)
	cmp	r2, r3
 8009cd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009cd8:	d3f9      	bcc.n	8009cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009cda:	f7ff f9e3 	bl	80090a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cde:	f000 f811 	bl	8009d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009ce2:	f7fe fda3 	bl	800882c <main>

08009ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8009ce6:	e7fe      	b.n	8009ce6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009ce8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8009cec:	08009e24 	.word	0x08009e24
	ldr	r0, =_sdata
 8009cf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009cf4:	2000017c 	.word	0x2000017c
	ldr	r2, =_sbss
 8009cf8:	2000017c 	.word	0x2000017c
	ldr	r3, = _ebss
 8009cfc:	20003650 	.word	0x20003650

08009d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009d00:	e7fe      	b.n	8009d00 <ADC1_2_IRQHandler>
	...

08009d04 <__libc_init_array>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	4e0d      	ldr	r6, [pc, #52]	; (8009d3c <__libc_init_array+0x38>)
 8009d08:	4c0d      	ldr	r4, [pc, #52]	; (8009d40 <__libc_init_array+0x3c>)
 8009d0a:	1ba4      	subs	r4, r4, r6
 8009d0c:	10a4      	asrs	r4, r4, #2
 8009d0e:	2500      	movs	r5, #0
 8009d10:	42a5      	cmp	r5, r4
 8009d12:	d109      	bne.n	8009d28 <__libc_init_array+0x24>
 8009d14:	4e0b      	ldr	r6, [pc, #44]	; (8009d44 <__libc_init_array+0x40>)
 8009d16:	4c0c      	ldr	r4, [pc, #48]	; (8009d48 <__libc_init_array+0x44>)
 8009d18:	f000 f820 	bl	8009d5c <_init>
 8009d1c:	1ba4      	subs	r4, r4, r6
 8009d1e:	10a4      	asrs	r4, r4, #2
 8009d20:	2500      	movs	r5, #0
 8009d22:	42a5      	cmp	r5, r4
 8009d24:	d105      	bne.n	8009d32 <__libc_init_array+0x2e>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d2c:	4798      	blx	r3
 8009d2e:	3501      	adds	r5, #1
 8009d30:	e7ee      	b.n	8009d10 <__libc_init_array+0xc>
 8009d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d36:	4798      	blx	r3
 8009d38:	3501      	adds	r5, #1
 8009d3a:	e7f2      	b.n	8009d22 <__libc_init_array+0x1e>
 8009d3c:	08009e1c 	.word	0x08009e1c
 8009d40:	08009e1c 	.word	0x08009e1c
 8009d44:	08009e1c 	.word	0x08009e1c
 8009d48:	08009e20 	.word	0x08009e20

08009d4c <memset>:
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d100      	bne.n	8009d56 <memset+0xa>
 8009d54:	4770      	bx	lr
 8009d56:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5a:	e7f9      	b.n	8009d50 <memset+0x4>

08009d5c <_init>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr

08009d68 <_fini>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr
